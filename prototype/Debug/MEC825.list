
MEC825.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006664  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007490  08007490  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08007490  08007490  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007490  08007490  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dcc  20000018  080074b0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  080074b0  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020037  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a35  00000000  00000000  0004007f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f8  00000000  00000000  00043ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001640  00000000  00000000  000452b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005093  00000000  00000000  000468f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001510f  00000000  00000000  0004b983  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107843  00000000  00000000  00060a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001682d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006380  00000000  00000000  00168350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080067fc 	.word	0x080067fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	080067fc 	.word	0x080067fc

080001f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink01 */
  Blink01Handle = osThreadNew(StartBlink01, NULL, &Blink01_attributes);
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <MX_FREERTOS_Init+0x28>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_FREERTOS_Init+0x2c>)
 80001fa:	f003 fdf5 	bl	8003de8 <osThreadNew>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <MX_FREERTOS_Init+0x30>)
 8000202:	601a      	str	r2, [r3, #0]

  /* creation of Blink02 */
  Blink02Handle = osThreadNew(StartBlink02, NULL, &Blink02_attributes);
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <MX_FREERTOS_Init+0x34>)
 8000206:	2100      	movs	r1, #0
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <MX_FREERTOS_Init+0x38>)
 800020a:	f003 fded 	bl	8003de8 <osThreadNew>
 800020e:	4602      	mov	r2, r0
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <MX_FREERTOS_Init+0x3c>)
 8000212:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	08007000 	.word	0x08007000
 800021c:	08000231 	.word	0x08000231
 8000220:	20001d04 	.word	0x20001d04
 8000224:	08007024 	.word	0x08007024
 8000228:	08000251 	.word	0x08000251
 800022c:	20001d00 	.word	0x20001d00

08000230 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <StartBlink01+0x1c>)
 800023c:	f001 fa5a 	bl	80016f4 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000244:	f003 fe76 	bl	8003f34 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000248:	e7f6      	b.n	8000238 <StartBlink01+0x8>
 800024a:	bf00      	nop
 800024c:	48000400 	.word	0x48000400

08000250 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f003 fe6b 	bl	8003f34 <osDelay>
 800025e:	e7fb      	b.n	8000258 <StartBlink02+0x8>

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	4b32      	ldr	r3, [pc, #200]	; (8000340 <MX_GPIO_Init+0xe0>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027a:	4a31      	ldr	r2, [pc, #196]	; (8000340 <MX_GPIO_Init+0xe0>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000282:	4b2f      	ldr	r3, [pc, #188]	; (8000340 <MX_GPIO_Init+0xe0>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028e:	4b2c      	ldr	r3, [pc, #176]	; (8000340 <MX_GPIO_Init+0xe0>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	4a2b      	ldr	r2, [pc, #172]	; (8000340 <MX_GPIO_Init+0xe0>)
 8000294:	f043 0302 	orr.w	r3, r3, #2
 8000298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029a:	4b29      	ldr	r3, [pc, #164]	; (8000340 <MX_GPIO_Init+0xe0>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	f003 0302 	and.w	r3, r3, #2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b26      	ldr	r3, [pc, #152]	; (8000340 <MX_GPIO_Init+0xe0>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	4a25      	ldr	r2, [pc, #148]	; (8000340 <MX_GPIO_Init+0xe0>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b2:	4b23      	ldr	r3, [pc, #140]	; (8000340 <MX_GPIO_Init+0xe0>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80002c4:	481f      	ldr	r0, [pc, #124]	; (8000344 <MX_GPIO_Init+0xe4>)
 80002c6:	f001 f9fd 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2180      	movs	r1, #128	; 0x80
 80002ce:	481e      	ldr	r0, [pc, #120]	; (8000348 <MX_GPIO_Init+0xe8>)
 80002d0:	f001 f9f8 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002da:	4b1c      	ldr	r3, [pc, #112]	; (800034c <MX_GPIO_Init+0xec>)
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	4619      	mov	r1, r3
 80002e8:	4817      	ldr	r0, [pc, #92]	; (8000348 <MX_GPIO_Init+0xe8>)
 80002ea:	f001 f859 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80002ee:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80002f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f4:	2301      	movs	r3, #1
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	4619      	mov	r1, r3
 8000306:	480f      	ldr	r0, [pc, #60]	; (8000344 <MX_GPIO_Init+0xe4>)
 8000308:	f001 f84a 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800031c:	f107 030c 	add.w	r3, r7, #12
 8000320:	4619      	mov	r1, r3
 8000322:	4809      	ldr	r0, [pc, #36]	; (8000348 <MX_GPIO_Init+0xe8>)
 8000324:	f001 f83c 	bl	80013a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	2100      	movs	r1, #0
 800032c:	2028      	movs	r0, #40	; 0x28
 800032e:	f001 f80d 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000332:	2028      	movs	r0, #40	; 0x28
 8000334:	f001 f826 	bl	8001384 <HAL_NVIC_EnableIRQ>

}
 8000338:	bf00      	nop
 800033a:	3720      	adds	r7, #32
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40021000 	.word	0x40021000
 8000344:	48000400 	.word	0x48000400
 8000348:	48000800 	.word	0x48000800
 800034c:	10110000 	.word	0x10110000

08000350 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
//CALLBACK IMPLEMENTED FROM STM32L4XX_HAL_GPIO.C
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	80fb      	strh	r3, [r7, #6]
	//BELOW IS JUST CODE IN PLACE OF TOTAL SYSTEM SHUTDOWN.
	//EVERYTHING SHOULD STOP IN ITS PLACE IMMEDIATELY

	//infinite loop for all intents and purposes

	if(isOn == false){
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <HAL_GPIO_EXTI_Callback+0x44>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	f083 0301 	eor.w	r3, r3, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	2b00      	cmp	r3, #0
 8000366:	d011      	beq.n	800038c <HAL_GPIO_EXTI_Callback+0x3c>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036e:	480a      	ldr	r0, [pc, #40]	; (8000398 <HAL_GPIO_EXTI_Callback+0x48>)
 8000370:	f001 f9a8 	bl	80016c4 <HAL_GPIO_WritePin>
		isOn = true;
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <HAL_GPIO_EXTI_Callback+0x44>)
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
		while (1){
			for(int i; i < 5000000; i++){
 800037a:	e002      	b.n	8000382 <HAL_GPIO_EXTI_Callback+0x32>
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000386:	4293      	cmp	r3, r2
 8000388:	ddf8      	ble.n	800037c <HAL_GPIO_EXTI_Callback+0x2c>
 800038a:	e7f6      	b.n	800037a <HAL_GPIO_EXTI_Callback+0x2a>
	}




}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000034 	.word	0x20000034
 8000398:	48000400 	.word	0x48000400
 800039c:	004c4b3f 	.word	0x004c4b3f

080003a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_I2C1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <MX_I2C1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ac:	2204      	movs	r2, #4
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	480e      	ldr	r0, [pc, #56]	; (8000414 <MX_I2C1_Init+0x74>)
 80003dc:	f001 f9bc 	bl	8001758 <HAL_I2C_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e6:	f000 f97b 	bl	80006e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ea:	2100      	movs	r1, #0
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ee:	f001 fdb3 	bl	8001f58 <HAL_I2CEx_ConfigAnalogFilter>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 f972 	bl	80006e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fc:	2100      	movs	r1, #0
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_I2C1_Init+0x74>)
 8000400:	f001 fdf5 	bl	8001fee <HAL_I2CEx_ConfigDigitalFilter>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 f969 	bl	80006e0 <Error_Handler>
  }

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20001d08 	.word	0x20001d08
 8000418:	40005400 	.word	0x40005400

0800041c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <HAL_I2C_MspInit+0x7c>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d128      	bne.n	8000490 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <HAL_I2C_MspInit+0x80>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <HAL_I2C_MspInit+0x80>)
 8000444:	f043 0302 	orr.w	r3, r3, #2
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <HAL_I2C_MspInit+0x80>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f003 0302 	and.w	r3, r3, #2
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000456:	f44f 7340 	mov.w	r3, #768	; 0x300
 800045a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045c:	2312      	movs	r3, #18
 800045e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000460:	2301      	movs	r3, #1
 8000462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000464:	2303      	movs	r3, #3
 8000466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000468:	2304      	movs	r3, #4
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	480b      	ldr	r0, [pc, #44]	; (80004a0 <HAL_I2C_MspInit+0x84>)
 8000474:	f000 ff94 	bl	80013a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_I2C_MspInit+0x80>)
 800047a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800047c:	4a07      	ldr	r2, [pc, #28]	; (800049c <HAL_I2C_MspInit+0x80>)
 800047e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000482:	6593      	str	r3, [r2, #88]	; 0x58
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_I2C_MspInit+0x80>)
 8000486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000490:	bf00      	nop
 8000492:	3728      	adds	r7, #40	; 0x28
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40005400 	.word	0x40005400
 800049c:	40021000 	.word	0x40021000
 80004a0:	48000400 	.word	0x48000400

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 fe3c 	bl	8001126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f89f 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f7ff fed5 	bl	8000260 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004b6:	f7ff ff73 	bl	80003a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();  // initialise
 80004ba:	f000 fa87 	bl	80009cc <SSD1306_Init>

    /// lets print some string

      SSD1306_GotoXY (0,0);
 80004be:	2100      	movs	r1, #0
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fbed 	bl	8000ca0 <SSD1306_GotoXY>
      SSD1306_Puts ("Autonomous", &Font_7x10, 1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	4941      	ldr	r1, [pc, #260]	; (80005d0 <main+0x12c>)
 80004ca:	4842      	ldr	r0, [pc, #264]	; (80005d4 <main+0x130>)
 80004cc:	f000 fc7e 	bl	8000dcc <SSD1306_Puts>
      SSD1306_GotoXY (0, 15);
 80004d0:	210f      	movs	r1, #15
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 fbe4 	bl	8000ca0 <SSD1306_GotoXY>
      SSD1306_Puts ("Pole & Line", &Font_7x10, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	493d      	ldr	r1, [pc, #244]	; (80005d0 <main+0x12c>)
 80004dc:	483e      	ldr	r0, [pc, #248]	; (80005d8 <main+0x134>)
 80004de:	f000 fc75 	bl	8000dcc <SSD1306_Puts>
      SSD1306_GotoXY (0, 30);
 80004e2:	211e      	movs	r1, #30
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fbdb 	bl	8000ca0 <SSD1306_GotoXY>
      SSD1306_Puts ("Fishing System", &Font_7x10, 1);
 80004ea:	2201      	movs	r2, #1
 80004ec:	4938      	ldr	r1, [pc, #224]	; (80005d0 <main+0x12c>)
 80004ee:	483b      	ldr	r0, [pc, #236]	; (80005dc <main+0x138>)
 80004f0:	f000 fc6c 	bl	8000dcc <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 80004f4:	f000 fb2e 	bl	8000b54 <SSD1306_UpdateScreen>
      HAL_Delay (3000);
 80004f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004fc:	f000 fe4c 	bl	8001198 <HAL_Delay>
      SSD1306_Clear();
 8000500:	f000 fc89 	bl	8000e16 <SSD1306_Clear>

      SSD1306_GotoXY (0,0);
 8000504:	2100      	movs	r1, #0
 8000506:	2000      	movs	r0, #0
 8000508:	f000 fbca 	bl	8000ca0 <SSD1306_GotoXY>
      SSD1306_Puts ("Created By:", &Font_7x10, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	4930      	ldr	r1, [pc, #192]	; (80005d0 <main+0x12c>)
 8000510:	4833      	ldr	r0, [pc, #204]	; (80005e0 <main+0x13c>)
 8000512:	f000 fc5b 	bl	8000dcc <SSD1306_Puts>
      SSD1306_GotoXY (0, 18);
 8000516:	2112      	movs	r1, #18
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fbc1 	bl	8000ca0 <SSD1306_GotoXY>
      SSD1306_Puts ("Heather & Nicholas", &Font_7x10, 1);
 800051e:	2201      	movs	r2, #1
 8000520:	492b      	ldr	r1, [pc, #172]	; (80005d0 <main+0x12c>)
 8000522:	4830      	ldr	r0, [pc, #192]	; (80005e4 <main+0x140>)
 8000524:	f000 fc52 	bl	8000dcc <SSD1306_Puts>
      SSD1306_GotoXY (0, 36);
 8000528:	2124      	movs	r1, #36	; 0x24
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fbb8 	bl	8000ca0 <SSD1306_GotoXY>
      SSD1306_Puts ("Imran & Hasib", &Font_7x10, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	4927      	ldr	r1, [pc, #156]	; (80005d0 <main+0x12c>)
 8000534:	482c      	ldr	r0, [pc, #176]	; (80005e8 <main+0x144>)
 8000536:	f000 fc49 	bl	8000dcc <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 800053a:	f000 fb0b 	bl	8000b54 <SSD1306_UpdateScreen>
      HAL_Delay (3000);
 800053e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000542:	f000 fe29 	bl	8001198 <HAL_Delay>
      SSD1306_Clear();
 8000546:	f000 fc66 	bl	8000e16 <SSD1306_Clear>

      SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 800054a:	2301      	movs	r3, #1
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2340      	movs	r3, #64	; 0x40
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	4a25      	ldr	r2, [pc, #148]	; (80005ec <main+0x148>)
 8000556:	2100      	movs	r1, #0
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f9d0 	bl	80008fe <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 800055e:	f000 faf9 	bl	8000b54 <SSD1306_UpdateScreen>

      HAL_Delay(2000);
 8000562:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000566:	f000 fe17 	bl	8001198 <HAL_Delay>

      SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 800056a:	210f      	movs	r1, #15
 800056c:	2000      	movs	r0, #0
 800056e:	f000 f8bb 	bl	80006e8 <SSD1306_ScrollRight>

      HAL_Delay (2000);
 8000572:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000576:	f000 fe0f 	bl	8001198 <HAL_Delay>

      SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 800057a:	210f      	movs	r1, #15
 800057c:	2000      	movs	r0, #0
 800057e:	f000 f8e9 	bl	8000754 <SSD1306_ScrollLeft>

      HAL_Delay (2000);
 8000582:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000586:	f000 fe07 	bl	8001198 <HAL_Delay>

      SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 800058a:	210f      	movs	r1, #15
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f917 	bl	80007c0 <SSD1306_Scrolldiagright>

      HAL_Delay (2000);
 8000592:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000596:	f000 fdff 	bl	8001198 <HAL_Delay>

      SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 800059a:	210f      	movs	r1, #15
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f94f 	bl	8000840 <SSD1306_Scrolldiagleft>

      HAL_Delay (2000);
 80005a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a6:	f000 fdf7 	bl	8001198 <HAL_Delay>

      SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 80005aa:	f000 f989 	bl	80008c0 <SSD1306_Stopscroll>


      SSD1306_InvertDisplay(1);   // invert the display
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 f98f 	bl	80008d2 <SSD1306_InvertDisplay>

      HAL_Delay(2000);
 80005b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b8:	f000 fdee 	bl	8001198 <HAL_Delay>

      SSD1306_InvertDisplay(0);  // normalize the display
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 f988 	bl	80008d2 <SSD1306_InvertDisplay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005c2:	f003 fba7 	bl	8003d14 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005c6:	f7ff fe13 	bl	80001f0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80005ca:	f003 fbd7 	bl	8003d7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <main+0x12a>
 80005d0:	20000000 	.word	0x20000000
 80005d4:	08006824 	.word	0x08006824
 80005d8:	08006830 	.word	0x08006830
 80005dc:	0800683c 	.word	0x0800683c
 80005e0:	0800684c 	.word	0x0800684c
 80005e4:	08006858 	.word	0x08006858
 80005e8:	0800686c 	.word	0x0800686c
 80005ec:	08007048 	.word	0x08007048

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0ba      	sub	sp, #232	; 0xe8
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 f8f3 	bl	80067ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	228c      	movs	r2, #140	; 0x8c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f006 f8e5 	bl	80067ea <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000620:	2310      	movs	r3, #16
 8000622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000632:	2360      	movs	r3, #96	; 0x60
 8000634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fd84 	bl	8002150 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800064e:	f000 f847 	bl	80006e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f990 	bl	800299c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 f82d 	bl	80006e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000686:	2340      	movs	r3, #64	; 0x40
 8000688:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800068a:	2300      	movs	r3, #0
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fba3 	bl	8002ddc <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800069c:	f000 f820 	bl	80006e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a4:	f001 fcfe 	bl	80020a4 <HAL_PWREx_ControlVoltageScaling>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 f817 	bl	80006e0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	37e8      	adds	r7, #232	; 0xe8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d101      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ce:	f000 fd43 	bl	8001158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40001000 	.word	0x40001000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <Error_Handler+0x6>

080006e8 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80006f8:	2226      	movs	r2, #38	; 0x26
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 fbef 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 fbea 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	461a      	mov	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	; 0x78
 8000714:	f000 fbe4 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2078      	movs	r0, #120	; 0x78
 800071e:	f000 fbdf 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	461a      	mov	r2, r3
 8000726:	2100      	movs	r1, #0
 8000728:	2078      	movs	r0, #120	; 0x78
 800072a:	f000 fbd9 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f000 fbd4 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	2100      	movs	r1, #0
 800073c:	2078      	movs	r0, #120	; 0x78
 800073e:	f000 fbcf 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000742:	222f      	movs	r2, #47	; 0x2f
 8000744:	2100      	movs	r1, #0
 8000746:	2078      	movs	r0, #120	; 0x78
 8000748:	f000 fbca 	bl	8000ee0 <ssd1306_I2C_Write>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000764:	2227      	movs	r2, #39	; 0x27
 8000766:	2100      	movs	r1, #0
 8000768:	2078      	movs	r0, #120	; 0x78
 800076a:	f000 fbb9 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	2078      	movs	r0, #120	; 0x78
 8000774:	f000 fbb4 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	461a      	mov	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	2078      	movs	r0, #120	; 0x78
 8000780:	f000 fbae 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2078      	movs	r0, #120	; 0x78
 800078a:	f000 fba9 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	461a      	mov	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	2078      	movs	r0, #120	; 0x78
 8000796:	f000 fba3 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2078      	movs	r0, #120	; 0x78
 80007a0:	f000 fb9e 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	2100      	movs	r1, #0
 80007a8:	2078      	movs	r0, #120	; 0x78
 80007aa:	f000 fb99 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80007ae:	222f      	movs	r2, #47	; 0x2f
 80007b0:	2100      	movs	r1, #0
 80007b2:	2078      	movs	r0, #120	; 0x78
 80007b4:	f000 fb94 	bl	8000ee0 <ssd1306_I2C_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80007d0:	22a3      	movs	r2, #163	; 0xa3
 80007d2:	2100      	movs	r1, #0
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f000 fb83 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2078      	movs	r0, #120	; 0x78
 80007e0:	f000 fb7e 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80007e4:	2240      	movs	r2, #64	; 0x40
 80007e6:	2100      	movs	r1, #0
 80007e8:	2078      	movs	r0, #120	; 0x78
 80007ea:	f000 fb79 	bl	8000ee0 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 80007ee:	2229      	movs	r2, #41	; 0x29
 80007f0:	2100      	movs	r1, #0
 80007f2:	2078      	movs	r0, #120	; 0x78
 80007f4:	f000 fb74 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2078      	movs	r0, #120	; 0x78
 80007fe:	f000 fb6f 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	461a      	mov	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	2078      	movs	r0, #120	; 0x78
 800080a:	f000 fb69 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2078      	movs	r0, #120	; 0x78
 8000814:	f000 fb64 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	461a      	mov	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	2078      	movs	r0, #120	; 0x78
 8000820:	f000 fb5e 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8000824:	2201      	movs	r2, #1
 8000826:	2100      	movs	r1, #0
 8000828:	2078      	movs	r0, #120	; 0x78
 800082a:	f000 fb59 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 800082e:	222f      	movs	r2, #47	; 0x2f
 8000830:	2100      	movs	r1, #0
 8000832:	2078      	movs	r0, #120	; 0x78
 8000834:	f000 fb54 	bl	8000ee0 <ssd1306_I2C_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8000850:	22a3      	movs	r2, #163	; 0xa3
 8000852:	2100      	movs	r1, #0
 8000854:	2078      	movs	r0, #120	; 0x78
 8000856:	f000 fb43 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2078      	movs	r0, #120	; 0x78
 8000860:	f000 fb3e 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	2100      	movs	r1, #0
 8000868:	2078      	movs	r0, #120	; 0x78
 800086a:	f000 fb39 	bl	8000ee0 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 800086e:	222a      	movs	r2, #42	; 0x2a
 8000870:	2100      	movs	r1, #0
 8000872:	2078      	movs	r0, #120	; 0x78
 8000874:	f000 fb34 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	2078      	movs	r0, #120	; 0x78
 800087e:	f000 fb2f 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	461a      	mov	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	2078      	movs	r0, #120	; 0x78
 800088a:	f000 fb29 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2078      	movs	r0, #120	; 0x78
 8000894:	f000 fb24 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	461a      	mov	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	2078      	movs	r0, #120	; 0x78
 80008a0:	f000 fb1e 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2100      	movs	r1, #0
 80008a8:	2078      	movs	r0, #120	; 0x78
 80008aa:	f000 fb19 	bl	8000ee0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 80008ae:	222f      	movs	r2, #47	; 0x2f
 80008b0:	2100      	movs	r1, #0
 80008b2:	2078      	movs	r0, #120	; 0x78
 80008b4:	f000 fb14 	bl	8000ee0 <ssd1306_I2C_Write>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008c4:	222e      	movs	r2, #46	; 0x2e
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	; 0x78
 80008ca:	f000 fb09 	bl	8000ee0 <ssd1306_I2C_Write>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d005      	beq.n	80008ec <SSD1306_InvertDisplay+0x1a>
 80008e0:	22a7      	movs	r2, #167	; 0xa7
 80008e2:	2100      	movs	r1, #0
 80008e4:	2078      	movs	r0, #120	; 0x78
 80008e6:	f000 fafb 	bl	8000ee0 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80008ea:	e004      	b.n	80008f6 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80008ec:	22a6      	movs	r2, #166	; 0xa6
 80008ee:	2100      	movs	r1, #0
 80008f0:	2078      	movs	r0, #120	; 0x78
 80008f2:	f000 faf5 	bl	8000ee0 <ssd1306_I2C_Write>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	461a      	mov	r2, r3
 8000908:	4603      	mov	r3, r0
 800090a:	81fb      	strh	r3, [r7, #14]
 800090c:	460b      	mov	r3, r1
 800090e:	81bb      	strh	r3, [r7, #12]
 8000910:	4613      	mov	r3, r2
 8000912:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000918:	3307      	adds	r3, #7
 800091a:	2b00      	cmp	r3, #0
 800091c:	da00      	bge.n	8000920 <SSD1306_DrawBitmap+0x22>
 800091e:	3307      	adds	r3, #7
 8000920:	10db      	asrs	r3, r3, #3
 8000922:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000928:	2300      	movs	r3, #0
 800092a:	82bb      	strh	r3, [r7, #20]
 800092c:	e044      	b.n	80009b8 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800092e:	2300      	movs	r3, #0
 8000930:	827b      	strh	r3, [r7, #18]
 8000932:	e02f      	b.n	8000994 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000934:	8a7b      	ldrh	r3, [r7, #18]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	75fb      	strb	r3, [r7, #23]
 8000944:	e012      	b.n	800096c <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000946:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800094a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800094e:	fb02 f203 	mul.w	r2, r2, r3
 8000952:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da00      	bge.n	800095c <SSD1306_DrawBitmap+0x5e>
 800095a:	3307      	adds	r3, #7
 800095c:	10db      	asrs	r3, r3, #3
 800095e:	b21b      	sxth	r3, r3
 8000960:	4413      	add	r3, r2
 8000962:	461a      	mov	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800096c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000970:	2b00      	cmp	r3, #0
 8000972:	da09      	bge.n	8000988 <SSD1306_DrawBitmap+0x8a>
 8000974:	89fa      	ldrh	r2, [r7, #14]
 8000976:	8a7b      	ldrh	r3, [r7, #18]
 8000978:	4413      	add	r3, r2
 800097a:	b29b      	uxth	r3, r3
 800097c:	89b9      	ldrh	r1, [r7, #12]
 800097e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f92c 	bl	8000be0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800098c:	b29b      	uxth	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	827b      	strh	r3, [r7, #18]
 8000994:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbc9      	blt.n	8000934 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80009a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	82bb      	strh	r3, [r7, #20]
 80009ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	81bb      	strh	r3, [r7, #12]
 80009b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80009bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbb4      	blt.n	800092e <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80009d2:	f000 fa29 	bl	8000e28 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80009d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009da:	2201      	movs	r2, #1
 80009dc:	2178      	movs	r1, #120	; 0x78
 80009de:	485b      	ldr	r0, [pc, #364]	; (8000b4c <SSD1306_Init+0x180>)
 80009e0:	f001 f83e 	bl	8001a60 <HAL_I2C_IsDeviceReady>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e0a9      	b.n	8000b42 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80009ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80009f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009f4:	e002      	b.n	80009fc <SSD1306_Init+0x30>
		p--;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f9      	bne.n	80009f6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a02:	22ae      	movs	r2, #174	; 0xae
 8000a04:	2100      	movs	r1, #0
 8000a06:	2078      	movs	r0, #120	; 0x78
 8000a08:	f000 fa6a 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2078      	movs	r0, #120	; 0x78
 8000a12:	f000 fa65 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a16:	2210      	movs	r2, #16
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2078      	movs	r0, #120	; 0x78
 8000a1c:	f000 fa60 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a20:	22b0      	movs	r2, #176	; 0xb0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2078      	movs	r0, #120	; 0x78
 8000a26:	f000 fa5b 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a2a:	22c8      	movs	r2, #200	; 0xc8
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2078      	movs	r0, #120	; 0x78
 8000a30:	f000 fa56 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2078      	movs	r0, #120	; 0x78
 8000a3a:	f000 fa51 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a3e:	2210      	movs	r2, #16
 8000a40:	2100      	movs	r1, #0
 8000a42:	2078      	movs	r0, #120	; 0x78
 8000a44:	f000 fa4c 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2078      	movs	r0, #120	; 0x78
 8000a4e:	f000 fa47 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a52:	2281      	movs	r2, #129	; 0x81
 8000a54:	2100      	movs	r1, #0
 8000a56:	2078      	movs	r0, #120	; 0x78
 8000a58:	f000 fa42 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2078      	movs	r0, #120	; 0x78
 8000a62:	f000 fa3d 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a66:	22a1      	movs	r2, #161	; 0xa1
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2078      	movs	r0, #120	; 0x78
 8000a6c:	f000 fa38 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a70:	22a6      	movs	r2, #166	; 0xa6
 8000a72:	2100      	movs	r1, #0
 8000a74:	2078      	movs	r0, #120	; 0x78
 8000a76:	f000 fa33 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a7a:	22a8      	movs	r2, #168	; 0xa8
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2078      	movs	r0, #120	; 0x78
 8000a80:	f000 fa2e 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a84:	223f      	movs	r2, #63	; 0x3f
 8000a86:	2100      	movs	r1, #0
 8000a88:	2078      	movs	r0, #120	; 0x78
 8000a8a:	f000 fa29 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a8e:	22a4      	movs	r2, #164	; 0xa4
 8000a90:	2100      	movs	r1, #0
 8000a92:	2078      	movs	r0, #120	; 0x78
 8000a94:	f000 fa24 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a98:	22d3      	movs	r2, #211	; 0xd3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2078      	movs	r0, #120	; 0x78
 8000a9e:	f000 fa1f 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2078      	movs	r0, #120	; 0x78
 8000aa8:	f000 fa1a 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000aac:	22d5      	movs	r2, #213	; 0xd5
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2078      	movs	r0, #120	; 0x78
 8000ab2:	f000 fa15 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ab6:	22f0      	movs	r2, #240	; 0xf0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2078      	movs	r0, #120	; 0x78
 8000abc:	f000 fa10 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ac0:	22d9      	movs	r2, #217	; 0xd9
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2078      	movs	r0, #120	; 0x78
 8000ac6:	f000 fa0b 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000aca:	2222      	movs	r2, #34	; 0x22
 8000acc:	2100      	movs	r1, #0
 8000ace:	2078      	movs	r0, #120	; 0x78
 8000ad0:	f000 fa06 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ad4:	22da      	movs	r2, #218	; 0xda
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2078      	movs	r0, #120	; 0x78
 8000ada:	f000 fa01 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ade:	2212      	movs	r2, #18
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2078      	movs	r0, #120	; 0x78
 8000ae4:	f000 f9fc 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ae8:	22db      	movs	r2, #219	; 0xdb
 8000aea:	2100      	movs	r1, #0
 8000aec:	2078      	movs	r0, #120	; 0x78
 8000aee:	f000 f9f7 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000af2:	2220      	movs	r2, #32
 8000af4:	2100      	movs	r1, #0
 8000af6:	2078      	movs	r0, #120	; 0x78
 8000af8:	f000 f9f2 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000afc:	228d      	movs	r2, #141	; 0x8d
 8000afe:	2100      	movs	r1, #0
 8000b00:	2078      	movs	r0, #120	; 0x78
 8000b02:	f000 f9ed 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b06:	2214      	movs	r2, #20
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2078      	movs	r0, #120	; 0x78
 8000b0c:	f000 f9e8 	bl	8000ee0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b10:	22af      	movs	r2, #175	; 0xaf
 8000b12:	2100      	movs	r1, #0
 8000b14:	2078      	movs	r0, #120	; 0x78
 8000b16:	f000 f9e3 	bl	8000ee0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b1a:	222e      	movs	r2, #46	; 0x2e
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2078      	movs	r0, #120	; 0x78
 8000b20:	f000 f9de 	bl	8000ee0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f843 	bl	8000bb0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000b2a:	f000 f813 	bl	8000b54 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SSD1306_Init+0x184>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SSD1306_Init+0x184>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SSD1306_Init+0x184>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20001d08 	.word	0x20001d08
 8000b50:	20000438 	.word	0x20000438

08000b54 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	e01d      	b.n	8000b9c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	3b50      	subs	r3, #80	; 0x50
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2078      	movs	r0, #120	; 0x78
 8000b6c:	f000 f9b8 	bl	8000ee0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2078      	movs	r0, #120	; 0x78
 8000b76:	f000 f9b3 	bl	8000ee0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	; 0x78
 8000b80:	f000 f9ae 	bl	8000ee0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	01db      	lsls	r3, r3, #7
 8000b88:	4a08      	ldr	r2, [pc, #32]	; (8000bac <SSD1306_UpdateScreen+0x58>)
 8000b8a:	441a      	add	r2, r3
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	2078      	movs	r0, #120	; 0x78
 8000b92:	f000 f95d 	bl	8000e50 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b07      	cmp	r3, #7
 8000ba0:	d9de      	bls.n	8000b60 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000038 	.word	0x20000038

08000bb0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <SSD1306_Fill+0x14>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e000      	b.n	8000bc6 <SSD1306_Fill+0x16>
 8000bc4:	23ff      	movs	r3, #255	; 0xff
 8000bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <SSD1306_Fill+0x2c>)
 8000bce:	f005 fe0c 	bl	80067ea <memset>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000038 	.word	0x20000038

08000be0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	460b      	mov	r3, r1
 8000bec:	80bb      	strh	r3, [r7, #4]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	70fb      	strb	r3, [r7, #3]
	if (
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf6:	d848      	bhi.n	8000c8a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d845      	bhi.n	8000c8a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <SSD1306_DrawPixel+0xb8>)
 8000c00:	791b      	ldrb	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d006      	beq.n	8000c14 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	bf0c      	ite	eq
 8000c0c:	2301      	moveq	r3, #1
 8000c0e:	2300      	movne	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d11a      	bne.n	8000c50 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	b298      	uxth	r0, r3
 8000c22:	4603      	mov	r3, r0
 8000c24:	01db      	lsls	r3, r3, #7
 8000c26:	4413      	add	r3, r2
 8000c28:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <SSD1306_DrawPixel+0xbc>)
 8000c2a:	5cd3      	ldrb	r3, [r2, r3]
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	88bb      	ldrh	r3, [r7, #4]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	2101      	movs	r1, #1
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b259      	sxtb	r1, r3
 8000c40:	88fa      	ldrh	r2, [r7, #6]
 8000c42:	4603      	mov	r3, r0
 8000c44:	01db      	lsls	r3, r3, #7
 8000c46:	4413      	add	r3, r2
 8000c48:	b2c9      	uxtb	r1, r1
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <SSD1306_DrawPixel+0xbc>)
 8000c4c:	54d1      	strb	r1, [r2, r3]
 8000c4e:	e01d      	b.n	8000c8c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c50:	88fa      	ldrh	r2, [r7, #6]
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	b298      	uxth	r0, r3
 8000c58:	4603      	mov	r3, r0
 8000c5a:	01db      	lsls	r3, r3, #7
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <SSD1306_DrawPixel+0xbc>)
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	b25a      	sxtb	r2, r3
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	4013      	ands	r3, r2
 8000c78:	b259      	sxtb	r1, r3
 8000c7a:	88fa      	ldrh	r2, [r7, #6]
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	01db      	lsls	r3, r3, #7
 8000c80:	4413      	add	r3, r2
 8000c82:	b2c9      	uxtb	r1, r1
 8000c84:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SSD1306_DrawPixel+0xbc>)
 8000c86:	54d1      	strb	r1, [r2, r3]
 8000c88:	e000      	b.n	8000c8c <SSD1306_DrawPixel+0xac>
		return;
 8000c8a:	bf00      	nop
	}
}
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000438 	.word	0x20000438
 8000c9c:	20000038 	.word	0x20000038

08000ca0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	4613      	mov	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SSD1306_GotoXY+0x28>)
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <SSD1306_GotoXY+0x28>)
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	8053      	strh	r3, [r2, #2]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20000438 	.word	0x20000438

08000ccc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
	if (
 8000ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cea:	dc07      	bgt.n	8000cfc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000cec:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000cee:	885b      	ldrh	r3, [r3, #2]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cf8:	2b3f      	cmp	r3, #63	; 0x3f
 8000cfa:	dd01      	ble.n	8000d00 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e05e      	b.n	8000dbe <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e04b      	b.n	8000d9e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	3b20      	subs	r3, #32
 8000d0e:	6839      	ldr	r1, [r7, #0]
 8000d10:	7849      	ldrb	r1, [r1, #1]
 8000d12:	fb01 f303 	mul.w	r3, r1, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e030      	b.n	8000d8c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d010      	beq.n	8000d5c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000d3c:	881a      	ldrh	r2, [r3, #0]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	b298      	uxth	r0, r3
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000d48:	885a      	ldrh	r2, [r3, #2]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	79ba      	ldrb	r2, [r7, #6]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f7ff ff43 	bl	8000be0 <SSD1306_DrawPixel>
 8000d5a:	e014      	b.n	8000d86 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b298      	uxth	r0, r3
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000d6a:	885a      	ldrh	r2, [r3, #2]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	b299      	uxth	r1, r3
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf0c      	ite	eq
 8000d7a:	2301      	moveq	r3, #1
 8000d7c:	2300      	movne	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	f7ff ff2d 	bl	8000be0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d3c8      	bcc.n	8000d2a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	785b      	ldrb	r3, [r3, #1]
 8000da2:	461a      	mov	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d3ad      	bcc.n	8000d06 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <SSD1306_Putc+0xfc>)
 8000dba:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000438 	.word	0x20000438

08000dcc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000dda:	e012      	b.n	8000e02 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff71 	bl	8000ccc <SSD1306_Putc>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d002      	beq.n	8000dfc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	e008      	b.n	8000e0e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1e8      	bne.n	8000ddc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fec8 	bl	8000bb0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000e20:	f7ff fe98 	bl	8000b54 <SSD1306_UpdateScreen>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <ssd1306_I2C_Init+0x24>)
 8000e30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e32:	e002      	b.n	8000e3a <ssd1306_I2C_Init+0x12>
		p--;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f9      	bne.n	8000e34 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	0003d090 	.word	0x0003d090

08000e50 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b0c7      	sub	sp, #284	; 0x11c
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	4639      	mov	r1, r7
 8000e5c:	600a      	str	r2, [r1, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	4622      	mov	r2, r4
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	4602      	mov	r2, r0
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	460a      	mov	r2, r1
 8000e70:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	1dba      	adds	r2, r7, #6
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000e82:	e010      	b.n	8000ea6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000e84:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e88:	463a      	mov	r2, r7
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	441a      	add	r2, r3
 8000e8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e92:	3301      	adds	r3, #1
 8000e94:	7811      	ldrb	r1, [r2, #0]
 8000e96:	f107 020c 	add.w	r2, r7, #12
 8000e9a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e9c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ea6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	8812      	ldrh	r2, [r2, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8e7      	bhi.n	8000e84 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b298      	uxth	r0, r3
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <ssd1306_I2C_WriteMulti+0x8c>)
 8000ece:	f000 fcd3 	bl	8001878 <HAL_I2C_Master_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	20001d08 	.word	0x20001d08

08000ee0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	460b      	mov	r3, r1
 8000eec:	71bb      	strb	r3, [r7, #6]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ef6:	797b      	ldrb	r3, [r7, #5]
 8000ef8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	b299      	uxth	r1, r3
 8000efe:	f107 020c 	add.w	r2, r7, #12
 8000f02:	230a      	movs	r3, #10
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2302      	movs	r3, #2
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <ssd1306_I2C_Write+0x38>)
 8000f0a:	f000 fcb5 	bl	8001878 <HAL_I2C_Master_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20001d08 	.word	0x20001d08

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	210f      	movs	r1, #15
 8000f56:	f06f 0001 	mvn.w	r0, #1
 8000f5a:	f000 f9f7 	bl	800134c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	2036      	movs	r0, #54	; 0x36
 8000f82:	f000 f9e3 	bl	800134c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f86:	2036      	movs	r0, #54	; 0x36
 8000f88:	f000 f9fc 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_InitTick+0x9c>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_InitTick+0x9c>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_InitTick+0x9c>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa4:	f107 0210 	add.w	r2, r7, #16
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fe82 	bl	8002cb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb4:	f001 fe6a 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8000fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <HAL_InitTick+0xa0>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9b      	lsrs	r3, r3, #18
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_InitTick+0xa4>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_InitTick+0xa8>)
 8000fcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_InitTick+0xa4>)
 8000fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_InitTick+0xa4>)
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_InitTick+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_InitTick+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <HAL_InitTick+0xa4>)
 8000fea:	f002 fbb9 	bl	8003760 <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d104      	bne.n	8000ffe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <HAL_InitTick+0xa4>)
 8000ff6:	f002 fc15 	bl	8003824 <HAL_TIM_Base_Start_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	431bde83 	.word	0x431bde83
 8001010:	20001d54 	.word	0x20001d54
 8001014:	40001000 	.word	0x40001000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001048:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800104c:	f000 fb6c 	bl	8001728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM6_DAC_IRQHandler+0x10>)
 800105a:	f002 fc53 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20001d54 	.word	0x20001d54

08001068 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <SystemInit+0x64>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <SystemInit+0x64>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <SystemInit+0x68>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <SystemInit+0x68>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <SystemInit+0x68>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <SystemInit+0x68>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <SystemInit+0x68>)
 8001094:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001098:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800109c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <SystemInit+0x68>)
 80010a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <SystemInit+0x68>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <SystemInit+0x68>)
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <SystemInit+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SystemInit+0x64>)
 80010ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010be:	609a      	str	r2, [r3, #8]
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	40021000 	.word	0x40021000

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff ffc6 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010de:	e003      	b.n	80010e8 <LoopCopyDataInit>

080010e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010e6:	3104      	adds	r1, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010f0:	d3f6      	bcc.n	80010e0 <CopyDataInit>
	ldr	r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopForever+0x12>)
	b	LoopFillZerobss
 80010f4:	e002      	b.n	80010fc <LoopFillZerobss>

080010f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010f8:	f842 3b04 	str.w	r3, [r2], #4

080010fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LoopForever+0x16>)
	cmp	r2, r3
 80010fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001100:	d3f9      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f005 fb43 	bl	800678c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff f9cd 	bl	80004a4 <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001110:	08007498 	.word	0x08007498
	ldr	r0, =_sdata
 8001114:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001118:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 800111c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001120:	20001de4 	.word	0x20001de4

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>

08001126 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f900 	bl	8001336 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff ff18 	bl	8000f6c <HAL_InitTick>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e001      	b.n	800114c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001148:	f7ff fee8 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000010 	.word	0x20000010
 800117c:	20001da0 	.word	0x20001da0

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20001da0 	.word	0x20001da0

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_Delay+0x40>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000010 	.word	0x20000010

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff4c 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135e:	f7ff ff61 	bl	8001224 <__NVIC_GetPriorityGrouping>
 8001362:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	6978      	ldr	r0, [r7, #20]
 800136a:	f7ff ffb1 	bl	80012d0 <NVIC_EncodePriority>
 800136e:	4602      	mov	r2, r0
 8001370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff80 	bl	800127c <__NVIC_SetPriority>
}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff54 	bl	8001240 <__NVIC_EnableIRQ>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ae:	e166      	b.n	800167e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8158 	beq.w	8001678 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d00b      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013dc:	2b11      	cmp	r3, #17
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b12      	cmp	r3, #18
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 0201 	and.w	r2, r3, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0xea>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b12      	cmp	r3, #18
 8001488:	d123      	bne.n	80014d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	6939      	ldr	r1, [r7, #16]
 80014ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0203 	and.w	r2, r3, #3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80b2 	beq.w	8001678 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001514:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_GPIO_Init+0x2fc>)
 8001516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001518:	4a60      	ldr	r2, [pc, #384]	; (800169c <HAL_GPIO_Init+0x2fc>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6613      	str	r3, [r2, #96]	; 0x60
 8001520:	4b5e      	ldr	r3, [pc, #376]	; (800169c <HAL_GPIO_Init+0x2fc>)
 8001522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <HAL_GPIO_Init+0x300>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001556:	d02b      	beq.n	80015b0 <HAL_GPIO_Init+0x210>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_GPIO_Init+0x304>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d025      	beq.n	80015ac <HAL_GPIO_Init+0x20c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <HAL_GPIO_Init+0x308>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d01f      	beq.n	80015a8 <HAL_GPIO_Init+0x208>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a50      	ldr	r2, [pc, #320]	; (80016ac <HAL_GPIO_Init+0x30c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d019      	beq.n	80015a4 <HAL_GPIO_Init+0x204>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a4f      	ldr	r2, [pc, #316]	; (80016b0 <HAL_GPIO_Init+0x310>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x200>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_GPIO_Init+0x314>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1fc>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <HAL_GPIO_Init+0x318>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1f8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4c      	ldr	r2, [pc, #304]	; (80016bc <HAL_GPIO_Init+0x31c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1f4>
 8001590:	2307      	movs	r3, #7
 8001592:	e00e      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 8001594:	2308      	movs	r3, #8
 8001596:	e00c      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 8001598:	2306      	movs	r3, #6
 800159a:	e00a      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 800159c:	2305      	movs	r3, #5
 800159e:	e008      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 80015a0:	2304      	movs	r3, #4
 80015a2:	e006      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 80015a4:	2303      	movs	r3, #3
 80015a6:	e004      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e002      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_GPIO_Init+0x212>
 80015b0:	2300      	movs	r3, #0
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	f002 0203 	and.w	r2, r2, #3
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	4093      	lsls	r3, r2
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c2:	4937      	ldr	r1, [pc, #220]	; (80016a0 <HAL_GPIO_Init+0x300>)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015d0:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_GPIO_Init+0x320>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f4:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <HAL_GPIO_Init+0x320>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_GPIO_Init+0x320>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800161e:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <HAL_GPIO_Init+0x320>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_GPIO_Init+0x320>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_GPIO_Init+0x320>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_GPIO_Init+0x320>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_GPIO_Init+0x320>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	f47f ae91 	bne.w	80013b0 <HAL_GPIO_Init+0x10>
  }
}
 800168e:	bf00      	nop
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000c00 	.word	0x48000c00
 80016b0:	48001000 	.word	0x48001000
 80016b4:	48001400 	.word	0x48001400
 80016b8:	48001800 	.word	0x48001800
 80016bc:	48001c00 	.word	0x48001c00
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43d9      	mvns	r1, r3
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	400b      	ands	r3, r1
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe02 	bl	8000350 <HAL_GPIO_EXTI_Callback>
  }
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e081      	b.n	800186e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe fe4c 	bl	800041c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2224      	movs	r2, #36	; 0x24
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	e006      	b.n	80017e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d104      	bne.n	80017f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001804:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001814:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	ea42 0103 	orr.w	r1, r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	021a      	lsls	r2, r3, #8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69d9      	ldr	r1, [r3, #28]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	460b      	mov	r3, r1
 8001886:	817b      	strh	r3, [r7, #10]
 8001888:	4613      	mov	r3, r2
 800188a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b20      	cmp	r3, #32
 8001896:	f040 80da 	bne.w	8001a4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_I2C_Master_Transmit+0x30>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e0d3      	b.n	8001a50 <HAL_I2C_Master_Transmit+0x1d8>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018b0:	f7ff fc66 	bl	8001180 <HAL_GetTick>
 80018b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2319      	movs	r3, #25
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f9f7 	bl	8001cb6 <I2C_WaitOnFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0be      	b.n	8001a50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2221      	movs	r2, #33	; 0x21
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2210      	movs	r2, #16
 80018de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	893a      	ldrh	r2, [r7, #8]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2bff      	cmp	r3, #255	; 0xff
 8001902:	d90e      	bls.n	8001922 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	22ff      	movs	r2, #255	; 0xff
 8001908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190e:	b2da      	uxtb	r2, r3
 8001910:	8979      	ldrh	r1, [r7, #10]
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <HAL_I2C_Master_Transmit+0x1e0>)
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 faee 	bl	8001efc <I2C_TransferConfig>
 8001920:	e06c      	b.n	80019fc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	b2da      	uxtb	r2, r3
 8001932:	8979      	ldrh	r1, [r7, #10]
 8001934:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <HAL_I2C_Master_Transmit+0x1e0>)
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fadd 	bl	8001efc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001942:	e05b      	b.n	80019fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	6a39      	ldr	r1, [r7, #32]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f9f4 	bl	8001d36 <I2C_WaitOnTXISFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e07b      	b.n	8001a50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d034      	beq.n	80019fc <HAL_I2C_Master_Transmit+0x184>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d130      	bne.n	80019fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	2200      	movs	r2, #0
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f986 	bl	8001cb6 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e04d      	b.n	8001a50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	d90e      	bls.n	80019dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fa91 	bl	8001efc <I2C_TransferConfig>
 80019da:	e00f      	b.n	80019fc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	8979      	ldrh	r1, [r7, #10]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa80 	bl	8001efc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d19e      	bne.n	8001944 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f9d3 	bl	8001db6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e01a      	b.n	8001a50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_I2C_Master_Transmit+0x1e4>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	80002000 	.word	0x80002000
 8001a5c:	fe00e800 	.word	0xfe00e800

08001a60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	f040 80f1 	bne.w	8001c64 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
 8001a94:	e0e7      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2C_IsDeviceReady+0x44>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e0e0      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d107      	bne.n	8001ad2 <HAL_I2C_IsDeviceReady+0x72>
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001acc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad0:	e004      	b.n	8001adc <HAL_I2C_IsDeviceReady+0x7c>
 8001ad2:	897b      	ldrh	r3, [r7, #10]
 8001ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fb4d 	bl	8001180 <HAL_GetTick>
 8001ae6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b14:	e034      	b.n	8001b80 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d01a      	beq.n	8001b54 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b1e:	f7ff fb2f 	bl	8001180 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d302      	bcc.n	8001b34 <HAL_I2C_IsDeviceReady+0xd4>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10f      	bne.n	8001b54 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e088      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	bf0c      	ite	eq
 8001b62:	2301      	moveq	r3, #1
 8001b64:	2300      	movne	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b80:	7ffb      	ldrb	r3, [r7, #31]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_I2C_IsDeviceReady+0x12c>
 8001b86:	7fbb      	ldrb	r3, [r7, #30]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0c4      	beq.n	8001b16 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d01a      	beq.n	8001bd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f886 	bl	8001cb6 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e058      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e04a      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2120      	movs	r1, #32
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f86b 	bl	8001cb6 <I2C_WaitOnFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e03d      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2210      	movs	r2, #16
 8001bf0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d118      	bne.n	8001c34 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c10:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2120      	movs	r1, #32
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f84a 	bl	8001cb6 <I2C_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e01c      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2220      	movs	r2, #32
 8001c32:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f63f af3b 	bhi.w	8001aba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
  }
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d103      	bne.n	8001c8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d007      	beq.n	8001caa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	619a      	str	r2, [r3, #24]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc6:	e022      	b.n	8001d0e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d01e      	beq.n	8001d0e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd0:	f7ff fa56 	bl	8001180 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d302      	bcc.n	8001ce6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d113      	bne.n	8001d0e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0220 	orr.w	r2, r3, #32
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d0cd      	beq.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d42:	e02c      	b.n	8001d9e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f871 	bl	8001e30 <I2C_IsAcknowledgeFailed>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e02a      	b.n	8001dae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5e:	d01e      	beq.n	8001d9e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d60:	f7ff fa0e 	bl	8001180 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d302      	bcc.n	8001d76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d113      	bne.n	8001d9e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f043 0220 	orr.w	r2, r3, #32
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e007      	b.n	8001dae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d1cb      	bne.n	8001d44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc2:	e028      	b.n	8001e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f831 	bl	8001e30 <I2C_IsAcknowledgeFailed>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e026      	b.n	8001e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd8:	f7ff f9d2 	bl	8001180 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d302      	bcc.n	8001dee <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d113      	bne.n	8001e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e007      	b.n	8001e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d1cf      	bne.n	8001dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d151      	bne.n	8001eee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4a:	e022      	b.n	8001e92 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e52:	d01e      	beq.n	8001e92 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e54:	f7ff f994 	bl	8001180 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d302      	bcc.n	8001e6a <I2C_IsAcknowledgeFailed+0x3a>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d113      	bne.n	8001e92 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e02e      	b.n	8001ef0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d1d5      	bne.n	8001e4c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2220      	movs	r2, #32
 8001eae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff fedc 	bl	8001c6e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f043 0204 	orr.w	r2, r3, #4
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	fe00e800 	.word	0xfe00e800

08001efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	817b      	strh	r3, [r7, #10]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	0d5b      	lsrs	r3, r3, #21
 8001f18:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <I2C_TransferConfig+0x58>)
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	43db      	mvns	r3, r3
 8001f22:	ea02 0103 	and.w	r1, r2, r3
 8001f26:	897b      	ldrh	r3, [r7, #10]
 8001f28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f2c:	7a7b      	ldrb	r3, [r7, #9]
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	03ff63ff 	.word	0x03ff63ff

08001f58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d138      	bne.n	8001fe0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e032      	b.n	8001fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001faa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b20      	cmp	r3, #32
 8002002:	d139      	bne.n	8002078 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800200e:	2302      	movs	r3, #2
 8002010:	e033      	b.n	800207a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2224      	movs	r2, #36	; 0x24
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002040:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40007000 	.word	0x40007000

080020a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b2:	d130      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c0:	d038      	beq.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2232      	movs	r2, #50	; 0x32
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e8:	e002      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fc:	d102      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f2      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d110      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e00f      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d007      	beq.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800212c:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40007000 	.word	0x40007000
 8002148:	20000008 	.word	0x20000008
 800214c:	431bde83 	.word	0x431bde83

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f000 bc16 	b.w	8002990 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002164:	4ba0      	ldr	r3, [pc, #640]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216e:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80e4 	beq.w	800234e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_RCC_OscConfig+0x4c>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	f040 808b 	bne.w	80022aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 8087 	bne.w	80022aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x64>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e3ed      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_RCC_OscConfig+0x7e>
 80021c4:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021cc:	e005      	b.n	80021da <HAL_RCC_OscConfig+0x8a>
 80021ce:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021da:	4293      	cmp	r3, r2
 80021dc:	d223      	bcs.n	8002226 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fd9a 	bl	8002d1c <RCC_SetFlashLatencyFromMSIRange>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e3ce      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f2:	4b7d      	ldr	r3, [pc, #500]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7c      	ldr	r2, [pc, #496]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b7a      	ldr	r3, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4977      	ldr	r1, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002210:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	4972      	ldr	r1, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
 8002224:	e025      	b.n	8002272 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002226:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6f      	ldr	r2, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	496a      	ldr	r1, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	4965      	ldr	r1, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fd5a 	bl	8002d1c <RCC_SetFlashLatencyFromMSIRange>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e38e      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002272:	f000 fc75 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002276:	4601      	mov	r1, r0
 8002278:	4b5b      	ldr	r3, [pc, #364]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a5a      	ldr	r2, [pc, #360]	; (80023ec <HAL_RCC_OscConfig+0x29c>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	fa21 f303 	lsr.w	r3, r1, r3
 800228e:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x2a0>)
 8002290:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002292:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <HAL_RCC_OscConfig+0x2a4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe68 	bl	8000f6c <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d052      	beq.n	800234c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	e372      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d032      	beq.n	8002318 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022be:	f7fe ff5f 	bl	8001180 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c6:	f7fe ff5b 	bl	8001180 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e35b      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e4:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3f      	ldr	r2, [pc, #252]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	493a      	ldr	r1, [pc, #232]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002302:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
 8002316:	e01a      	b.n	800234e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002318:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002324:	f7fe ff2c 	bl	8001180 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232c:	f7fe ff28 	bl	8001180 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e328      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1dc>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d073      	beq.n	8002442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x21c>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d063      	beq.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d15f      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e305      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x24c>
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0x288>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x270>
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0x288>
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <HAL_RCC_OscConfig+0x298>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fece 	bl	8001180 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	e010      	b.n	800240a <HAL_RCC_OscConfig+0x2ba>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08007448 	.word	0x08007448
 80023f0:	20000008 	.word	0x20000008
 80023f4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fec2 	bl	8001180 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2c2      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240a:	4baf      	ldr	r3, [pc, #700]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2a8>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe feb2 	bl	8001180 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe feae 	bl	8001180 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e2ae      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	4ba5      	ldr	r3, [pc, #660]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x2d0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d060      	beq.n	8002510 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x310>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d119      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d116      	bne.n	800248e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	4b99      	ldr	r3, [pc, #612]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x328>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e28b      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b93      	ldr	r3, [pc, #588]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4990      	ldr	r1, [pc, #576]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248c:	e040      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d023      	beq.n	80024de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002496:	4b8c      	ldr	r3, [pc, #560]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a8b      	ldr	r2, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe6d 	bl	8001180 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fe69 	bl	8001180 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e269      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	4b82      	ldr	r3, [pc, #520]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b7f      	ldr	r3, [pc, #508]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	497c      	ldr	r1, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	e018      	b.n	8002510 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b7a      	ldr	r3, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a79      	ldr	r2, [pc, #484]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80024e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fe49 	bl	8001180 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fe45 	bl	8001180 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e245      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002504:	4b70      	ldr	r3, [pc, #448]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002524:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	4a67      	ldr	r2, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fe24 	bl	8001180 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7fe fe20 	bl	8001180 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e220      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254e:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCC_OscConfig+0x3ec>
 800255c:	e01b      	b.n	8002596 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255e:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fe07 	bl	8001180 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002576:	f7fe fe03 	bl	8001180 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e203      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002588:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80a6 	beq.w	80026f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	4a43      	ldr	r2, [pc, #268]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	; 0x58
 80025c0:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d0:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025dc:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7fe fdca 	bl	8001180 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7fe fdc6 	bl	8001180 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1c6      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_RCC_OscConfig+0x57c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d8>
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002626:	e024      	b.n	8002672 <HAL_RCC_OscConfig+0x522>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d110      	bne.n	8002652 <HAL_RCC_OscConfig+0x502>
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002650:	e00f      	b.n	8002672 <HAL_RCC_OscConfig+0x522>
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800266a:	f023 0304 	bic.w	r3, r3, #4
 800266e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe fd81 	bl	8001180 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fd7d 	bl	8001180 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e17b      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x578>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ed      	beq.n	8002682 <HAL_RCC_OscConfig+0x532>
 80026a6:	e01a      	b.n	80026de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fd6a 	bl	8001180 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ae:	e00f      	b.n	80026d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe fd66 	bl	8001180 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d906      	bls.n	80026d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e164      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	4ba8      	ldr	r3, [pc, #672]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e8      	bne.n	80026b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4ba3      	ldr	r3, [pc, #652]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4aa2      	ldr	r2, [pc, #648]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d03c      	beq.n	8002776 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01c      	beq.n	800273e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002704:	4b9b      	ldr	r3, [pc, #620]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270a:	4a9a      	ldr	r2, [pc, #616]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fd34 	bl	8001180 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271c:	f7fe fd30 	bl	8001180 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e130      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800272e:	4b91      	ldr	r3, [pc, #580]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ef      	beq.n	800271c <HAL_RCC_OscConfig+0x5cc>
 800273c:	e01b      	b.n	8002776 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800273e:	4b8d      	ldr	r3, [pc, #564]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002744:	4a8b      	ldr	r2, [pc, #556]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fd17 	bl	8001180 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002756:	f7fe fd13 	bl	8001180 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e113      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002768:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800276a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ef      	bne.n	8002756 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8107 	beq.w	800298e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	f040 80cb 	bne.w	8002920 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800278a:	4b7a      	ldr	r3, [pc, #488]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	429a      	cmp	r2, r3
 800279c:	d12c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	3b01      	subs	r3, #1
 80027aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d123      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d11b      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d113      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d109      	bne.n	80027f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	3b01      	subs	r3, #1
 80027f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d06d      	beq.n	80028d4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d068      	beq.n	80028d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800280a:	4b5a      	ldr	r3, [pc, #360]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0ba      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800281a:	4b56      	ldr	r3, [pc, #344]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a55      	ldr	r2, [pc, #340]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002820:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002824:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002826:	f7fe fcab 	bl	8001180 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fca7 	bl	8001180 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0a7      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800284c:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4b49      	ldr	r3, [pc, #292]	; (8002978 <HAL_RCC_OscConfig+0x828>)
 8002852:	4013      	ands	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800285c:	3a01      	subs	r2, #1
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	4311      	orrs	r1, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002866:	0212      	lsls	r2, r2, #8
 8002868:	4311      	orrs	r1, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800286e:	0852      	lsrs	r2, r2, #1
 8002870:	3a01      	subs	r2, #1
 8002872:	0552      	lsls	r2, r2, #21
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800287a:	0852      	lsrs	r2, r2, #1
 800287c:	3a01      	subs	r2, #1
 800287e:	0652      	lsls	r2, r2, #25
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002886:	06d2      	lsls	r2, r2, #27
 8002888:	430a      	orrs	r2, r1
 800288a:	493a      	ldr	r1, [pc, #232]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800288c:	4313      	orrs	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002890:	4b38      	ldr	r3, [pc, #224]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a37      	ldr	r2, [pc, #220]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800289c:	4b35      	ldr	r3, [pc, #212]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a34      	ldr	r2, [pc, #208]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a8:	f7fe fc6a 	bl	8001180 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fc66 	bl	8001180 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e066      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ce:	e05e      	b.n	800298e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e05d      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d156      	bne.n	800298e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a23      	ldr	r2, [pc, #140]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f8:	f7fe fc42 	bl	8001180 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fc3e 	bl	8001180 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e03e      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x7b0>
 800291e:	e036      	b.n	800298e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d031      	beq.n	800298a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800292c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002930:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002944:	f023 0303 	bic.w	r3, r3, #3
 8002948:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_OscConfig+0x824>)
 8002950:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002958:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe fc11 	bl	8001180 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002960:	e00c      	b.n	800297c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fc0d 	bl	8001180 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d905      	bls.n	800297c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e00d      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
 8002974:	40021000 	.word	0x40021000
 8002978:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_OscConfig+0x848>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ec      	bne.n	8002962 <HAL_RCC_OscConfig+0x812>
 8002988:	e001      	b.n	800298e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0c8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b66      	ldr	r3, [pc, #408]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4961      	ldr	r1, [pc, #388]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b0      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d04c      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f4:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d121      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e09e      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d115      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e092      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a24:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e086      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e07e      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 0203 	bic.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	493f      	ldr	r1, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a56:	f7fe fb93 	bl	8001180 <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5e:	f7fe fb8f 	bl	8001180 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e066      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 020c 	and.w	r2, r3, #12
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d1eb      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a92:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	492c      	ldr	r1, [pc, #176]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d210      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4924      	ldr	r1, [pc, #144]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e036      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4918      	ldr	r1, [pc, #96]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4910      	ldr	r1, [pc, #64]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b12:	f000 f825 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_RCC_ClockConfig+0x1b4>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	5cd3      	ldrb	r3, [r2, r3]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fa18 	bl	8000f6c <HAL_InitTick>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b40:	7afb      	ldrb	r3, [r7, #11]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08007448 	.word	0x08007448
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d121      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d11e      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e005      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e004      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002be6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d133      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0xa4>
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0xaa>
 8002c02:	e005      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c06:	617b      	str	r3, [r7, #20]
      break;
 8002c08:	e005      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0c:	617b      	str	r3, [r7, #20]
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	617b      	str	r3, [r7, #20]
      break;
 8002c14:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	3301      	adds	r3, #1
 8002c22:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	fb02 f203 	mul.w	r2, r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0e5b      	lsrs	r3, r3, #25
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c56:	69bb      	ldr	r3, [r7, #24]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3724      	adds	r7, #36	; 0x24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08007460 	.word	0x08007460
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	007a1200 	.word	0x007a1200

08002c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000008 	.word	0x20000008

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c90:	f7ff fff0 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c94:	4601      	mov	r1, r0
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08007458 	.word	0x08007458

08002cb8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <HAL_RCC_GetClockConfig+0x60>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0207 	and.w	r2, r3, #7
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40022000 	.word	0x40022000

08002d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d34:	f7ff f9a8 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002d38:	6178      	str	r0, [r7, #20]
 8002d3a:	e014      	b.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6593      	str	r3, [r2, #88]	; 0x58
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d54:	f7ff f998 	bl	8002088 <HAL_PWREx_GetVoltageRange>
 8002d58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6c:	d10b      	bne.n	8002d86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b80      	cmp	r3, #128	; 0x80
 8002d72:	d919      	bls.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2ba0      	cmp	r3, #160	; 0xa0
 8002d78:	d902      	bls.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	e013      	b.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d80:	2301      	movs	r3, #1
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	e010      	b.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d902      	bls.n	8002d92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	e00a      	b.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d102      	bne.n	8002d9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d98:	2302      	movs	r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	e004      	b.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b70      	cmp	r3, #112	; 0x70
 8002da2:	d101      	bne.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002da4:	2301      	movs	r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 0207 	bic.w	r2, r3, #7
 8002db0:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d001      	beq.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40022000 	.word	0x40022000

08002ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de4:	2300      	movs	r3, #0
 8002de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de8:	2300      	movs	r3, #0
 8002dea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03f      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e00:	d01c      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e06:	d802      	bhi.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e0c:	e01f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e12:	d003      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e18:	d01c      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e1c:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a84      	ldr	r2, [pc, #528]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e28:	e015      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 facb 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e3a:	e00c      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3320      	adds	r3, #32
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fbb2 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	74fb      	strb	r3, [r7, #19]
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e5c:	4b75      	ldr	r3, [pc, #468]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e6a:	4972      	ldr	r1, [pc, #456]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e72:	e001      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d03f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8c:	d01c      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e92:	d802      	bhi.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00e      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002e98:	e01f      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ea0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ea4:	d01c      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002ea6:	e018      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea8:	4b62      	ldr	r3, [pc, #392]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a61      	ldr	r2, [pc, #388]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fa85 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ec6:	e00c      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3320      	adds	r3, #32
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fb6c 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed8:	e003      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ee8:	4b52      	ldr	r3, [pc, #328]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef6:	494f      	ldr	r1, [pc, #316]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002efe:	e001      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a0 	beq.w	8003052 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	4a40      	ldr	r2, [pc, #256]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f36:	6593      	str	r3, [r2, #88]	; 0x58
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f54:	f7fe f914 	bl	8001180 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f5a:	e009      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5c:	f7fe f910 	bl	8001180 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f6e:	e005      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ef      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d15c      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f82:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01f      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d019      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	4a20      	ldr	r2, [pc, #128]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d016      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7fe f8cf 	bl	8001180 <HAL_GetTick>
 8002fe2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe4:	e00b      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fe f8cb 	bl	8001180 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d902      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	74fb      	strb	r3, [r7, #19]
            break;
 8002ffc:	e006      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ec      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800302a:	e009      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	74bb      	strb	r3, [r7, #18]
 8003030:	e006      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003040:	7c7b      	ldrb	r3, [r7, #17]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d105      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4ba6      	ldr	r3, [pc, #664]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	4aa5      	ldr	r2, [pc, #660]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003050:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800305e:	4ba0      	ldr	r3, [pc, #640]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f023 0203 	bic.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	499c      	ldr	r1, [pc, #624]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003080:	4b97      	ldr	r3, [pc, #604]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f023 020c 	bic.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308e:	4994      	ldr	r1, [pc, #592]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a2:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	498b      	ldr	r1, [pc, #556]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c4:	4b86      	ldr	r3, [pc, #536]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4983      	ldr	r1, [pc, #524]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030e6:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f4:	497a      	ldr	r1, [pc, #488]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003108:	4b75      	ldr	r3, [pc, #468]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	4972      	ldr	r1, [pc, #456]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003138:	4969      	ldr	r1, [pc, #420]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800314c:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315a:	4961      	ldr	r1, [pc, #388]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316e:	4b5c      	ldr	r3, [pc, #368]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317c:	4958      	ldr	r1, [pc, #352]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	4950      	ldr	r1, [pc, #320]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b2:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4947      	ldr	r1, [pc, #284]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	493f      	ldr	r1, [pc, #252]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d028      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f6:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4936      	ldr	r1, [pc, #216]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003214:	d106      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003216:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800321c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003220:	60d3      	str	r3, [r2, #12]
 8003222:	e011      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800322c:	d10c      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f8c9 	bl	80033cc <RCCEx_PLLSAI1_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d028      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003254:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	491f      	ldr	r1, [pc, #124]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003272:	d106      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327e:	60d3      	str	r3, [r2, #12]
 8003280:	e011      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003286:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800328a:	d10c      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f89a 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d02a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c0:	4907      	ldr	r1, [pc, #28]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d0:	d108      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d2:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a02      	ldr	r2, [pc, #8]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80032d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032dc:	60d3      	str	r3, [r2, #12]
 80032de:	e013      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80032e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f869 	bl	80033cc <RCCEx_PLLSAI1_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02f      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003322:	4929      	ldr	r1, [pc, #164]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003332:	d10d      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f846 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d014      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	74bb      	strb	r3, [r7, #18]
 800334e:	e011      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003358:	d10c      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3320      	adds	r3, #32
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f923 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003390:	490d      	ldr	r1, [pc, #52]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b4:	4904      	ldr	r1, [pc, #16]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000

080033cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033e6:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0203 	and.w	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10d      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
       ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
       ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d044      	beq.n	800349c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e041      	b.n	800349c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d00c      	beq.n	800343a <RCCEx_PLLSAI1_Config+0x6e>
 8003420:	2b03      	cmp	r3, #3
 8003422:	d013      	beq.n	800344c <RCCEx_PLLSAI1_Config+0x80>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d120      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003428:	4b5f      	ldr	r3, [pc, #380]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d11d      	bne.n	8003470 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003438:	e01a      	b.n	8003470 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800343a:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344a:	e013      	b.n	8003474 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344c:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10f      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003468:	e006      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      break;
 800346e:	e004      	b.n	800347a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003470:	bf00      	nop
 8003472:	e002      	b.n	800347a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003474:	bf00      	nop
 8003476:	e000      	b.n	800347a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003478:	bf00      	nop
    }

    if(status == HAL_OK)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003480:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	3b01      	subs	r3, #1
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	430b      	orrs	r3, r1
 8003496:	4944      	ldr	r1, [pc, #272]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d17c      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ae:	f7fd fe67 	bl	8001180 <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b4:	e009      	b.n	80034ca <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b6:	f7fd fe63 	bl	8001180 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d902      	bls.n	80034ca <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	73fb      	strb	r3, [r7, #15]
        break;
 80034c8:	e005      	b.n	80034d6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ef      	bne.n	80034b6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d15f      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d110      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e2:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80034ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6892      	ldr	r2, [r2, #8]
 80034f2:	0211      	lsls	r1, r2, #8
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68d2      	ldr	r2, [r2, #12]
 80034f8:	06d2      	lsls	r2, r2, #27
 80034fa:	430a      	orrs	r2, r1
 80034fc:	492a      	ldr	r1, [pc, #168]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
 8003502:	e027      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d112      	bne.n	8003530 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003512:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	0211      	lsls	r1, r2, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6912      	ldr	r2, [r2, #16]
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0552      	lsls	r2, r2, #21
 8003526:	430a      	orrs	r2, r1
 8003528:	491f      	ldr	r1, [pc, #124]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	610b      	str	r3, [r1, #16]
 800352e:	e011      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6952      	ldr	r2, [r2, #20]
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0652      	lsls	r2, r2, #25
 800354c:	430a      	orrs	r2, r1
 800354e:	4916      	ldr	r1, [pc, #88]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800355a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800355e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd fe0e 	bl	8001180 <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003566:	e009      	b.n	800357c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003568:	f7fd fe0a 	bl	8001180 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d902      	bls.n	800357c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	73fb      	strb	r3, [r7, #15]
          break;
 800357a:	e005      	b.n	8003588 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ef      	beq.n	8003568 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4904      	ldr	r1, [pc, #16]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000

080035ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ba:	4b68      	ldr	r3, [pc, #416]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10d      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
       ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035de:	4b5f      	ldr	r3, [pc, #380]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
       ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d044      	beq.n	800367c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e041      	b.n	800367c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d00c      	beq.n	800361a <RCCEx_PLLSAI2_Config+0x6e>
 8003600:	2b03      	cmp	r3, #3
 8003602:	d013      	beq.n	800362c <RCCEx_PLLSAI2_Config+0x80>
 8003604:	2b01      	cmp	r3, #1
 8003606:	d120      	bne.n	800364a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003608:	4b54      	ldr	r3, [pc, #336]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e01a      	b.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362a:	e013      	b.n	8003654 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362c:	4b4b      	ldr	r3, [pc, #300]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10f      	bne.n	8003658 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003638:	4b48      	ldr	r3, [pc, #288]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003648:	e006      	b.n	8003658 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      break;
 800364e:	e004      	b.n	800365a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003650:	bf00      	nop
 8003652:	e002      	b.n	800365a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003654:	bf00      	nop
 8003656:	e000      	b.n	800365a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003658:	bf00      	nop
    }

    if(status == HAL_OK)
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003660:	4b3e      	ldr	r3, [pc, #248]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	3b01      	subs	r3, #1
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	430b      	orrs	r3, r1
 8003676:	4939      	ldr	r1, [pc, #228]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d166      	bne.n	8003750 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a35      	ldr	r2, [pc, #212]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368e:	f7fd fd77 	bl	8001180 <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003694:	e009      	b.n	80036aa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003696:	f7fd fd73 	bl	8001180 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d902      	bls.n	80036aa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	73fb      	strb	r3, [r7, #15]
        break;
 80036a8:	e005      	b.n	80036b6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036aa:	4b2c      	ldr	r3, [pc, #176]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ef      	bne.n	8003696 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d149      	bne.n	8003750 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d110      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80036ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	0211      	lsls	r1, r2, #8
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68d2      	ldr	r2, [r2, #12]
 80036d8:	06d2      	lsls	r2, r2, #27
 80036da:	430a      	orrs	r2, r1
 80036dc:	491f      	ldr	r1, [pc, #124]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	614b      	str	r3, [r1, #20]
 80036e2:	e011      	b.n	8003708 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6892      	ldr	r2, [r2, #8]
 80036f4:	0211      	lsls	r1, r2, #8
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6912      	ldr	r2, [r2, #16]
 80036fa:	0852      	lsrs	r2, r2, #1
 80036fc:	3a01      	subs	r2, #1
 80036fe:	0652      	lsls	r2, r2, #25
 8003700:	430a      	orrs	r2, r1
 8003702:	4916      	ldr	r1, [pc, #88]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003704:	4313      	orrs	r3, r2
 8003706:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fd34 	bl	8001180 <HAL_GetTick>
 8003718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800371a:	e009      	b.n	8003730 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800371c:	f7fd fd30 	bl	8001180 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d902      	bls.n	8003730 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	73fb      	strb	r3, [r7, #15]
          break;
 800372e:	e005      	b.n	800373c <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ef      	beq.n	800371c <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4904      	ldr	r1, [pc, #16]	; (800375c <RCCEx_PLLSAI2_Config+0x1b0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e049      	b.n	8003806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f841 	bl	800380e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 f9f8 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e04f      	b.n	80038dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01d      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x76>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d018      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x76>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <HAL_TIM_Base_Start_IT+0xc8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x76>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x76>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x76>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x76>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d115      	bne.n	80038c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_TIM_Base_Start_IT+0xdc>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d015      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0xb4>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b2:	d011      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	e008      	b.n	80038d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e000      	b.n	80038da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40013400 	.word	0x40013400
 80038fc:	40014000 	.word	0x40014000
 8003900:	00010007 	.word	0x00010007

08003904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0202 	mvn.w	r2, #2
 8003930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f905 	bl	8003b56 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8f7 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f908 	bl	8003b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0204 	mvn.w	r2, #4
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8db 	bl	8003b56 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8cd 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8de 	bl	8003b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0208 	mvn.w	r2, #8
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2204      	movs	r2, #4
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8b1 	bl	8003b56 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8a3 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8b4 	bl	8003b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0210 	mvn.w	r2, #16
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2208      	movs	r2, #8
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f887 	bl	8003b56 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f879 	bl	8003b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f88a 	bl	8003b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0201 	mvn.w	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc fe1a 	bl	80006bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b80      	cmp	r3, #128	; 0x80
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f914 	bl	8003cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac2:	d10e      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b80      	cmp	r3, #128	; 0x80
 8003ad0:	d107      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f907 	bl	8003cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d10e      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d107      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f838 	bl	8003b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d10e      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d107      	bne.n	8003b3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0220 	mvn.w	r2, #32
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f8c7 	bl	8003cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <TIM_Base_SetConfig+0x118>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <TIM_Base_SetConfig+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <TIM_Base_SetConfig+0x120>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3a      	ldr	r2, [pc, #232]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01f      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d01b      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <TIM_Base_SetConfig+0x118>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d017      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <TIM_Base_SetConfig+0x11c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <TIM_Base_SetConfig+0x120>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <TIM_Base_SetConfig+0x128>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <TIM_Base_SetConfig+0x12c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0x9a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <TIM_Base_SetConfig+0x130>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00f      	beq.n	8003c8c <TIM_Base_SetConfig+0xf8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <TIM_Base_SetConfig+0xf8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <TIM_Base_SetConfig+0x128>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_Base_SetConfig+0xf8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <TIM_Base_SetConfig+0x12c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0xf8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a0f      	ldr	r2, [pc, #60]	; (8003cc4 <TIM_Base_SetConfig+0x130>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40013400 	.word	0x40013400
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800

08003cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d1a:	f3ef 8305 	mrs	r3, IPSR
 8003d1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d26:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d105      	bne.n	8003d3e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d32:	f3ef 8311 	mrs	r3, BASEPRI
 8003d36:	603b      	str	r3, [r7, #0]
  return(result);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <osKernelInitialize+0x3a>
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <osKernelInitialize+0x64>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d103      	bne.n	8003d4e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d46:	f06f 0305 	mvn.w	r3, #5
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e00c      	b.n	8003d68 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <osKernelInitialize+0x64>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d105      	bne.n	8003d62 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <osKernelInitialize+0x64>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e002      	b.n	8003d68 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000440 	.word	0x20000440

08003d7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d82:	f3ef 8305 	mrs	r3, IPSR
 8003d86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d92:	607b      	str	r3, [r7, #4]
  return(result);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <osKernelStart+0x3a>
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <osKernelStart+0x68>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d103      	bne.n	8003db6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003dae:	f06f 0305 	mvn.w	r3, #5
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e010      	b.n	8003dd8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <osKernelStart+0x68>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d109      	bne.n	8003dd2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dbe:	f7ff ffa1 	bl	8003d04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <osKernelStart+0x68>)
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003dc8:	f001 f870 	bl	8004eac <vTaskStartScheduler>
      stat = osOK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e002      	b.n	8003dd8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000440 	.word	0x20000440

08003de8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b090      	sub	sp, #64	; 0x40
 8003dec:	af04      	add	r7, sp, #16
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df8:	f3ef 8305 	mrs	r3, IPSR
 8003dfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dfe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 808f 	bne.w	8003f24 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e06:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e12:	f3ef 8311 	mrs	r3, BASEPRI
 8003e16:	617b      	str	r3, [r7, #20]
  return(result);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <osThreadNew+0x3e>
 8003e1e:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <osThreadNew+0x148>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d07e      	beq.n	8003f24 <osThreadNew+0x13c>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d07b      	beq.n	8003f24 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003e30:	2318      	movs	r3, #24
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d045      	beq.n	8003ed0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <osThreadNew+0x6a>
        name = attr->name;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <osThreadNew+0x90>
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	2b38      	cmp	r3, #56	; 0x38
 8003e6a:	d805      	bhi.n	8003e78 <osThreadNew+0x90>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <osThreadNew+0x94>
        return (NULL);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e054      	b.n	8003f26 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00e      	beq.n	8003eb2 <osThreadNew+0xca>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b5b      	cmp	r3, #91	; 0x5b
 8003e9a:	d90a      	bls.n	8003eb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <osThreadNew+0xca>
        mem = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	e010      	b.n	8003ed4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <osThreadNew+0xec>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d108      	bne.n	8003ed4 <osThreadNew+0xec>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <osThreadNew+0xec>
          mem = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	e001      	b.n	8003ed4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d110      	bne.n	8003efc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ee2:	9202      	str	r2, [sp, #8]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fe09 	bl	8004b08 <xTaskCreateStatic>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e013      	b.n	8003f24 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d110      	bne.n	8003f24 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fe51 	bl	8004bbc <xTaskCreate>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d001      	beq.n	8003f24 <osThreadNew+0x13c>
          hTask = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f24:	693b      	ldr	r3, [r7, #16]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3730      	adds	r7, #48	; 0x30
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000440 	.word	0x20000440

08003f34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f3c:	f3ef 8305 	mrs	r3, IPSR
 8003f40:	613b      	str	r3, [r7, #16]
  return(result);
 8003f42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10f      	bne.n	8003f68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f48:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f54:	f3ef 8311 	mrs	r3, BASEPRI
 8003f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <osDelay+0x3c>
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <osDelay+0x58>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d103      	bne.n	8003f70 <osDelay+0x3c>
    stat = osErrorISR;
 8003f68:	f06f 0305 	mvn.w	r3, #5
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	e007      	b.n	8003f80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 ff62 	bl	8004e44 <vTaskDelay>
    }
  }

  return (stat);
 8003f80:	697b      	ldr	r3, [r7, #20]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000440 	.word	0x20000440

08003f90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <vApplicationGetIdleTaskMemory+0x2c>)
 8003fa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4a06      	ldr	r2, [pc, #24]	; (8003fc0 <vApplicationGetIdleTaskMemory+0x30>)
 8003fa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000444 	.word	0x20000444
 8003fc0:	200004a0 	.word	0x200004a0

08003fc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4a06      	ldr	r2, [pc, #24]	; (8003ff4 <vApplicationGetTimerTaskMemory+0x30>)
 8003fda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe2:	601a      	str	r2, [r3, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	200006a0 	.word	0x200006a0
 8003ff4:	200006fc 	.word	0x200006fc

08003ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f103 0208 	add.w	r2, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f04f 32ff 	mov.w	r2, #4294967295
 8004010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f103 0208 	add.w	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f103 0208 	add.w	r2, r3, #8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d103      	bne.n	80040ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e00c      	b.n	80040d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3308      	adds	r3, #8
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e002      	b.n	80040c8 <vListInsert+0x2e>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d2f6      	bcs.n	80040c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6892      	ldr	r2, [r2, #8]
 8004122:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6852      	ldr	r2, [r2, #4]
 800412c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d103      	bne.n	8004140 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1e5a      	subs	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	e7fe      	b.n	8004186 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004188:	f002 f810 	bl	80061ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	441a      	add	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	3b01      	subs	r3, #1
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	441a      	add	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	22ff      	movs	r2, #255	; 0xff
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d114      	bne.n	8004208 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01a      	beq.n	800421c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3310      	adds	r3, #16
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f8de 	bl	80053ac <xTaskRemoveFromEventList>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <xQueueGenericReset+0xcc>)
 80041f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	e009      	b.n	800421c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3310      	adds	r3, #16
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fef3 	bl	8003ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3324      	adds	r3, #36	; 0x24
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff feee 	bl	8003ff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800421c:	f001 fff4 	bl	8006208 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004220:	2301      	movs	r3, #1
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	e000ed04 	.word	0xe000ed04

08004230 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	; 0x38
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <xQueueGenericCreateStatic+0x28>
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
 8004256:	e7fe      	b.n	8004256 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <xQueueGenericCreateStatic+0x42>
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	e7fe      	b.n	8004270 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <xQueueGenericCreateStatic+0x4e>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <xQueueGenericCreateStatic+0x52>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <xQueueGenericCreateStatic+0x54>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <xQueueGenericCreateStatic+0x6c>
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	e7fe      	b.n	800429a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <xQueueGenericCreateStatic+0x78>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <xQueueGenericCreateStatic+0x7c>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <xQueueGenericCreateStatic+0x7e>
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <xQueueGenericCreateStatic+0x96>
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e7fe      	b.n	80042c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042c6:	2350      	movs	r3, #80	; 0x50
 80042c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b50      	cmp	r3, #80	; 0x50
 80042ce:	d009      	beq.n	80042e4 <xQueueGenericCreateStatic+0xb4>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	e7fe      	b.n	80042e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f805 	bl	8004316 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800430e:	4618      	mov	r0, r3
 8004310:	3730      	adds	r7, #48	; 0x30
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e002      	b.n	8004338 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004344:	2101      	movs	r1, #1
 8004346:	69b8      	ldr	r0, [r7, #24]
 8004348:	f7ff ff0a 	bl	8004160 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800436a:	2300      	movs	r3, #0
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <xQueueGenericSend+0x30>
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
 800438a:	e7fe      	b.n	800438a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <xQueueGenericSend+0x3e>
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <xQueueGenericSend+0x42>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <xQueueGenericSend+0x44>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <xQueueGenericSend+0x5c>
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	e7fe      	b.n	80043b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d103      	bne.n	80043c6 <xQueueGenericSend+0x6a>
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <xQueueGenericSend+0x6e>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <xQueueGenericSend+0x70>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <xQueueGenericSend+0x88>
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	e7fe      	b.n	80043e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043e4:	f001 f998 	bl	8005718 <xTaskGetSchedulerState>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <xQueueGenericSend+0x98>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <xQueueGenericSend+0x9c>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <xQueueGenericSend+0x9e>
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <xQueueGenericSend+0xb6>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	e7fe      	b.n	8004410 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004412:	f001 fecb 	bl	80061ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <xQueueGenericSend+0xcc>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d129      	bne.n	800447c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442e:	f000 f9ff 	bl	8004830 <prvCopyDataToQueue>
 8004432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	3324      	adds	r3, #36	; 0x24
 8004440:	4618      	mov	r0, r3
 8004442:	f000 ffb3 	bl	80053ac <xTaskRemoveFromEventList>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800444c:	4b3f      	ldr	r3, [pc, #252]	; (800454c <xQueueGenericSend+0x1f0>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	e00a      	b.n	8004474 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004464:	4b39      	ldr	r3, [pc, #228]	; (800454c <xQueueGenericSend+0x1f0>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004474:	f001 fec8 	bl	8006208 <vPortExitCritical>
				return pdPASS;
 8004478:	2301      	movs	r3, #1
 800447a:	e063      	b.n	8004544 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004482:	f001 fec1 	bl	8006208 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004486:	2300      	movs	r3, #0
 8004488:	e05c      	b.n	8004544 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	4618      	mov	r0, r3
 8004496:	f000 ffeb 	bl	8005470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800449e:	f001 feb3 	bl	8006208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044a2:	f000 fd67 	bl	8004f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044a6:	f001 fe81 	bl	80061ac <vPortEnterCritical>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d103      	bne.n	80044c0 <xQueueGenericSend+0x164>
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d103      	bne.n	80044d6 <xQueueGenericSend+0x17a>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d6:	f001 fe97 	bl	8006208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044da:	1d3a      	adds	r2, r7, #4
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 ffda 	bl	800549c <xTaskCheckForTimeOut>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d124      	bne.n	8004538 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f0:	f000 fa96 	bl	8004a20 <prvIsQueueFull>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	3310      	adds	r3, #16
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f000 ff04 	bl	8005310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800450a:	f000 fa21 	bl	8004950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800450e:	f000 fd3f 	bl	8004f90 <xTaskResumeAll>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	f47f af7c 	bne.w	8004412 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <xQueueGenericSend+0x1f0>)
 800451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	e772      	b.n	8004412 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800452c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452e:	f000 fa0f 	bl	8004950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004532:	f000 fd2d 	bl	8004f90 <xTaskResumeAll>
 8004536:	e76c      	b.n	8004412 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800453a:	f000 fa09 	bl	8004950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800453e:	f000 fd27 	bl	8004f90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004544:	4618      	mov	r0, r3
 8004546:	3738      	adds	r7, #56	; 0x38
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08e      	sub	sp, #56	; 0x38
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <xQueueGenericSendFromISR+0x2c>
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	e7fe      	b.n	800457a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <xQueueGenericSendFromISR+0x3a>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <xQueueGenericSendFromISR+0x3e>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericSendFromISR+0x40>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <xQueueGenericSendFromISR+0x58>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	e7fe      	b.n	80045a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d103      	bne.n	80045b6 <xQueueGenericSendFromISR+0x66>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <xQueueGenericSendFromISR+0x6a>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueGenericSendFromISR+0x6c>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <xQueueGenericSendFromISR+0x84>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e7fe      	b.n	80045d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045d4:	f001 fec6 	bl	8006364 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045d8:	f3ef 8211 	mrs	r2, BASEPRI
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	61ba      	str	r2, [r7, #24]
 80045ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <xQueueGenericSendFromISR+0xb6>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d12c      	bne.n	8004660 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800460c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004616:	f000 f90b 	bl	8004830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800461a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d112      	bne.n	800464a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d016      	beq.n	800465a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	3324      	adds	r3, #36	; 0x24
 8004630:	4618      	mov	r0, r3
 8004632:	f000 febb 	bl	80053ac <xTaskRemoveFromEventList>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e007      	b.n	800465a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800464a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800464e:	3301      	adds	r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	b25a      	sxtb	r2, r3
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800465a:	2301      	movs	r3, #1
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800465e:	e001      	b.n	8004664 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004660:	2300      	movs	r3, #0
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004670:	4618      	mov	r0, r3
 8004672:	3738      	adds	r7, #56	; 0x38
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	; 0x30
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <xQueueReceive+0x2e>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	623b      	str	r3, [r7, #32]
 80046a4:	e7fe      	b.n	80046a4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <xQueueReceive+0x3c>
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <xQueueReceive+0x40>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <xQueueReceive+0x42>
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <xQueueReceive+0x5a>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e7fe      	b.n	80046d0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046d2:	f001 f821 	bl	8005718 <xTaskGetSchedulerState>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <xQueueReceive+0x6a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <xQueueReceive+0x6e>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <xQueueReceive+0x70>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <xQueueReceive+0x88>
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e7fe      	b.n	80046fe <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004700:	f001 fd54 	bl	80061ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01f      	beq.n	8004750 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004714:	f000 f8f6 	bl	8004904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00f      	beq.n	8004748 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	3310      	adds	r3, #16
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fe3d 	bl	80053ac <xTaskRemoveFromEventList>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004738:	4b3c      	ldr	r3, [pc, #240]	; (800482c <xQueueReceive+0x1b4>)
 800473a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004748:	f001 fd5e 	bl	8006208 <vPortExitCritical>
				return pdPASS;
 800474c:	2301      	movs	r3, #1
 800474e:	e069      	b.n	8004824 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004756:	f001 fd57 	bl	8006208 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800475a:	2300      	movs	r3, #0
 800475c:	e062      	b.n	8004824 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fe81 	bl	8005470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800476e:	2301      	movs	r3, #1
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004772:	f001 fd49 	bl	8006208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004776:	f000 fbfd 	bl	8004f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800477a:	f001 fd17 	bl	80061ac <vPortEnterCritical>
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004784:	b25b      	sxtb	r3, r3
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d103      	bne.n	8004794 <xQueueReceive+0x11c>
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800479a:	b25b      	sxtb	r3, r3
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d103      	bne.n	80047aa <xQueueReceive+0x132>
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047aa:	f001 fd2d 	bl	8006208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ae:	1d3a      	adds	r2, r7, #4
 80047b0:	f107 0310 	add.w	r3, r7, #16
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fe70 	bl	800549c <xTaskCheckForTimeOut>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d123      	bne.n	800480a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c4:	f000 f916 	bl	80049f4 <prvIsQueueEmpty>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d017      	beq.n	80047fe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	3324      	adds	r3, #36	; 0x24
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fd9a 	bl	8005310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047de:	f000 f8b7 	bl	8004950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047e2:	f000 fbd5 	bl	8004f90 <xTaskResumeAll>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d189      	bne.n	8004700 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <xQueueReceive+0x1b4>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	e780      	b.n	8004700 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004800:	f000 f8a6 	bl	8004950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004804:	f000 fbc4 	bl	8004f90 <xTaskResumeAll>
 8004808:	e77a      	b.n	8004700 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800480a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480c:	f000 f8a0 	bl	8004950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004810:	f000 fbbe 	bl	8004f90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004816:	f000 f8ed 	bl	80049f4 <prvIsQueueEmpty>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f43f af6f 	beq.w	8004700 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004822:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	e000ed04 	.word	0xe000ed04

08004830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d14d      	bne.n	80048f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 ff7a 	bl	8005754 <xTaskPriorityDisinherit>
 8004860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	e043      	b.n	80048f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d119      	bne.n	80048a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6858      	ldr	r0, [r3, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	461a      	mov	r2, r3
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	f001 ffaa 	bl	80067d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	441a      	add	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d32b      	bcc.n	80048f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	e026      	b.n	80048f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68d8      	ldr	r0, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	461a      	mov	r2, r3
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	f001 ff90 	bl	80067d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	425b      	negs	r3, r3
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d207      	bcs.n	80048e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	425b      	negs	r3, r3
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d105      	bne.n	80048f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048fa:	697b      	ldr	r3, [r7, #20]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d018      	beq.n	8004948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	441a      	add	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	d303      	bcc.n	8004938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68d9      	ldr	r1, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	461a      	mov	r2, r3
 8004942:	6838      	ldr	r0, [r7, #0]
 8004944:	f001 ff46 	bl	80067d4 <memcpy>
	}
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004958:	f001 fc28 	bl	80061ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004964:	e011      	b.n	800498a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d012      	beq.n	8004994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3324      	adds	r3, #36	; 0x24
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fd1a 	bl	80053ac <xTaskRemoveFromEventList>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800497e:	f000 fded 	bl	800555c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	3b01      	subs	r3, #1
 8004986:	b2db      	uxtb	r3, r3
 8004988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	dce9      	bgt.n	8004966 <prvUnlockQueue+0x16>
 8004992:	e000      	b.n	8004996 <prvUnlockQueue+0x46>
					break;
 8004994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800499e:	f001 fc33 	bl	8006208 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049a2:	f001 fc03 	bl	80061ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ae:	e011      	b.n	80049d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3310      	adds	r3, #16
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fcf5 	bl	80053ac <xTaskRemoveFromEventList>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049c8:	f000 fdc8 	bl	800555c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049cc:	7bbb      	ldrb	r3, [r7, #14]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	dce9      	bgt.n	80049b0 <prvUnlockQueue+0x60>
 80049dc:	e000      	b.n	80049e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	22ff      	movs	r2, #255	; 0xff
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049e8:	f001 fc0e 	bl	8006208 <vPortExitCritical>
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049fc:	f001 fbd6 	bl	80061ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e001      	b.n	8004a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a12:	f001 fbf9 	bl	8006208 <vPortExitCritical>

	return xReturn;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a28:	f001 fbc0 	bl	80061ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d102      	bne.n	8004a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e001      	b.n	8004a42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a42:	f001 fbe1 	bl	8006208 <vPortExitCritical>

	return xReturn;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e014      	b.n	8004a8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a60:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <vQueueAddToRegistry+0x4c>)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a6c:	490b      	ldr	r1, [pc, #44]	; (8004a9c <vQueueAddToRegistry+0x4c>)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <vQueueAddToRegistry+0x4c>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a82:	e005      	b.n	8004a90 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b07      	cmp	r3, #7
 8004a8e:	d9e7      	bls.n	8004a60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20001da4 	.word	0x20001da4

08004aa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ab0:	f001 fb7c 	bl	80061ac <vPortEnterCritical>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d103      	bne.n	8004aca <vQueueWaitForMessageRestricted+0x2a>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d103      	bne.n	8004ae0 <vQueueWaitForMessageRestricted+0x40>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae0:	f001 fb92 	bl	8006208 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	3324      	adds	r3, #36	; 0x24
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fc2f 	bl	8005358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7ff ff28 	bl	8004950 <prvUnlockQueue>
	}
 8004b00:	bf00      	nop
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08e      	sub	sp, #56	; 0x38
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <xTaskCreateStatic+0x28>
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	e7fe      	b.n	8004b2e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <xTaskCreateStatic+0x42>
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e7fe      	b.n	8004b48 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b4a:	235c      	movs	r3, #92	; 0x5c
 8004b4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b5c      	cmp	r3, #92	; 0x5c
 8004b52:	d009      	beq.n	8004b68 <xTaskCreateStatic+0x60>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e7fe      	b.n	8004b66 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01e      	beq.n	8004bae <xTaskCreateStatic+0xa6>
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01b      	beq.n	8004bae <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9303      	str	r3, [sp, #12]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	9302      	str	r3, [sp, #8]
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f850 	bl	8004c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ba8:	f000 f8dc 	bl	8004d64 <prvAddNewTaskToReadyList>
 8004bac:	e001      	b.n	8004bb2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bb2:	697b      	ldr	r3, [r7, #20]
	}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3728      	adds	r7, #40	; 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08c      	sub	sp, #48	; 0x30
 8004bc0:	af04      	add	r7, sp, #16
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 fc05 	bl	80063e0 <pvPortMalloc>
 8004bd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bde:	205c      	movs	r0, #92	; 0x5c
 8004be0:	f001 fbfe 	bl	80063e0 <pvPortMalloc>
 8004be4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8004bf2:	e005      	b.n	8004c00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bf4:	6978      	ldr	r0, [r7, #20]
 8004bf6:	f001 fcb5 	bl	8006564 <vPortFree>
 8004bfa:	e001      	b.n	8004c00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d017      	beq.n	8004c36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	2300      	movs	r3, #0
 8004c12:	9303      	str	r3, [sp, #12]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	9302      	str	r3, [sp, #8]
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f80e 	bl	8004c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c2a:	69f8      	ldr	r0, [r7, #28]
 8004c2c:	f000 f89a 	bl	8004d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c30:	2301      	movs	r3, #1
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e002      	b.n	8004c3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b088      	sub	sp, #32
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	21a5      	movs	r1, #165	; 0xa5
 8004c60:	f001 fdc3 	bl	80067ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f023 0307 	bic.w	r3, r3, #7
 8004c7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <prvInitialiseNewTask+0x56>
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e7fe      	b.n	8004c9a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01f      	beq.n	8004ce2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	e012      	b.n	8004cce <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	7819      	ldrb	r1, [r3, #0]
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3334      	adds	r3, #52	; 0x34
 8004cb8:	460a      	mov	r2, r1
 8004cba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	d9e9      	bls.n	8004ca8 <prvInitialiseNewTask+0x62>
 8004cd4:	e000      	b.n	8004cd8 <prvInitialiseNewTask+0x92>
			{
				break;
 8004cd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce0:	e003      	b.n	8004cea <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	2b37      	cmp	r3, #55	; 0x37
 8004cee:	d901      	bls.n	8004cf4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cf0:	2337      	movs	r3, #55	; 0x37
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2200      	movs	r2, #0
 8004d04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff f994 	bl	8004038 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	3318      	adds	r3, #24
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff f98f 	bl	8004038 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	2200      	movs	r2, #0
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	69b8      	ldr	r0, [r7, #24]
 8004d44:	f001 f90c 	bl	8005f60 <pxPortInitialiseStack>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d5a:	bf00      	nop
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d6c:	f001 fa1e 	bl	80061ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d70:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <prvAddNewTaskToReadyList+0xc4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	4a2c      	ldr	r2, [pc, #176]	; (8004e28 <prvAddNewTaskToReadyList+0xc4>)
 8004d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d7a:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <prvAddNewTaskToReadyList+0xc8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d82:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <prvAddNewTaskToReadyList+0xc8>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <prvAddNewTaskToReadyList+0xc4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d110      	bne.n	8004db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d90:	f000 fc08 	bl	80055a4 <prvInitialiseTaskLists>
 8004d94:	e00d      	b.n	8004db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d96:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <prvAddNewTaskToReadyList+0xcc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d9e:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <prvAddNewTaskToReadyList+0xc8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d802      	bhi.n	8004db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dac:	4a1f      	ldr	r2, [pc, #124]	; (8004e2c <prvAddNewTaskToReadyList+0xc8>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004db2:	4b20      	ldr	r3, [pc, #128]	; (8004e34 <prvAddNewTaskToReadyList+0xd0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <prvAddNewTaskToReadyList+0xd0>)
 8004dba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <prvAddNewTaskToReadyList+0xd0>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <prvAddNewTaskToReadyList+0xd4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d903      	bls.n	8004dd8 <prvAddNewTaskToReadyList+0x74>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <prvAddNewTaskToReadyList+0xd4>)
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4a15      	ldr	r2, [pc, #84]	; (8004e3c <prvAddNewTaskToReadyList+0xd8>)
 8004de6:	441a      	add	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f7ff f92f 	bl	8004052 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004df4:	f001 fa08 	bl	8006208 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <prvAddNewTaskToReadyList+0xcc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <prvAddNewTaskToReadyList+0xc8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d207      	bcs.n	8004e1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <prvAddNewTaskToReadyList+0xdc>)
 8004e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000fd0 	.word	0x20000fd0
 8004e2c:	20000afc 	.word	0x20000afc
 8004e30:	20000fdc 	.word	0x20000fdc
 8004e34:	20000fec 	.word	0x20000fec
 8004e38:	20000fd8 	.word	0x20000fd8
 8004e3c:	20000b00 	.word	0x20000b00
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <vTaskDelay+0x60>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <vTaskDelay+0x2e>
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	e7fe      	b.n	8004e70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004e72:	f000 f87f 	bl	8004f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e76:	2100      	movs	r1, #0
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fcd7 	bl	800582c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e7e:	f000 f887 	bl	8004f90 <xTaskResumeAll>
 8004e82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <vTaskDelay+0x64>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000ff8 	.word	0x20000ff8
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eba:	463a      	mov	r2, r7
 8004ebc:	1d39      	adds	r1, r7, #4
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff f864 	bl	8003f90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ec8:	6839      	ldr	r1, [r7, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	9202      	str	r2, [sp, #8]
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	460a      	mov	r2, r1
 8004eda:	4920      	ldr	r1, [pc, #128]	; (8004f5c <vTaskStartScheduler+0xb0>)
 8004edc:	4820      	ldr	r0, [pc, #128]	; (8004f60 <vTaskStartScheduler+0xb4>)
 8004ede:	f7ff fe13 	bl	8004b08 <xTaskCreateStatic>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <vTaskStartScheduler+0xb8>)
 8004ee6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ee8:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <vTaskStartScheduler+0xb8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e001      	b.n	8004efa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d102      	bne.n	8004f06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f00:	f000 fce8 	bl	80058d4 <xTimerCreateTimerTask>
 8004f04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d115      	bne.n	8004f38 <vTaskStartScheduler+0x8c>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <vTaskStartScheduler+0xbc>)
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <vTaskStartScheduler+0xc0>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f2c:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <vTaskStartScheduler+0xc4>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f32:	f001 f89d 	bl	8006070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f36:	e00d      	b.n	8004f54 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d109      	bne.n	8004f54 <vTaskStartScheduler+0xa8>
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e7fe      	b.n	8004f52 <vTaskStartScheduler+0xa6>
}
 8004f54:	bf00      	nop
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	0800687c 	.word	0x0800687c
 8004f60:	08005575 	.word	0x08005575
 8004f64:	20000ff4 	.word	0x20000ff4
 8004f68:	20000ff0 	.word	0x20000ff0
 8004f6c:	20000fdc 	.word	0x20000fdc
 8004f70:	20000fd4 	.word	0x20000fd4

08004f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <vTaskSuspendAll+0x18>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	4a03      	ldr	r2, [pc, #12]	; (8004f8c <vTaskSuspendAll+0x18>)
 8004f80:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004f82:	bf00      	nop
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	20000ff8 	.word	0x20000ff8

08004f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f9e:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <xTaskResumeAll+0x114>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <xTaskResumeAll+0x2a>
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	e7fe      	b.n	8004fb8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fba:	f001 f8f7 	bl	80061ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fbe:	4b39      	ldr	r3, [pc, #228]	; (80050a4 <xTaskResumeAll+0x114>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	4a37      	ldr	r2, [pc, #220]	; (80050a4 <xTaskResumeAll+0x114>)
 8004fc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <xTaskResumeAll+0x114>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d162      	bne.n	8005096 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <xTaskResumeAll+0x118>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d05e      	beq.n	8005096 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fd8:	e02f      	b.n	800503a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fda:	4b34      	ldr	r3, [pc, #208]	; (80050ac <xTaskResumeAll+0x11c>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3318      	adds	r3, #24
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff f890 	bl	800410c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff f88b 	bl	800410c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	4b2d      	ldr	r3, [pc, #180]	; (80050b0 <xTaskResumeAll+0x120>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d903      	bls.n	800500a <xTaskResumeAll+0x7a>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <xTaskResumeAll+0x120>)
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <xTaskResumeAll+0x124>)
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3304      	adds	r3, #4
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f7ff f816 	bl	8004052 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <xTaskResumeAll+0x128>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005034:	4b21      	ldr	r3, [pc, #132]	; (80050bc <xTaskResumeAll+0x12c>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800503a:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <xTaskResumeAll+0x11c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1cb      	bne.n	8004fda <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005048:	f000 fb46 	bl	80056d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800504c:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <xTaskResumeAll+0x130>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d010      	beq.n	800507a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005058:	f000 f846 	bl	80050e8 <xTaskIncrementTick>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005062:	4b16      	ldr	r3, [pc, #88]	; (80050bc <xTaskResumeAll+0x12c>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f1      	bne.n	8005058 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005074:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <xTaskResumeAll+0x130>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <xTaskResumeAll+0x12c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005082:	2301      	movs	r3, #1
 8005084:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005086:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <xTaskResumeAll+0x134>)
 8005088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005096:	f001 f8b7 	bl	8006208 <vPortExitCritical>

	return xAlreadyYielded;
 800509a:	68bb      	ldr	r3, [r7, #8]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000ff8 	.word	0x20000ff8
 80050a8:	20000fd0 	.word	0x20000fd0
 80050ac:	20000f90 	.word	0x20000f90
 80050b0:	20000fd8 	.word	0x20000fd8
 80050b4:	20000b00 	.word	0x20000b00
 80050b8:	20000afc 	.word	0x20000afc
 80050bc:	20000fe4 	.word	0x20000fe4
 80050c0:	20000fe0 	.word	0x20000fe0
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <xTaskGetTickCount+0x1c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050d4:	687b      	ldr	r3, [r7, #4]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000fd4 	.word	0x20000fd4

080050e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050f2:	4b4e      	ldr	r3, [pc, #312]	; (800522c <xTaskIncrementTick+0x144>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f040 8088 	bne.w	800520c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050fc:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <xTaskIncrementTick+0x148>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005104:	4a4a      	ldr	r2, [pc, #296]	; (8005230 <xTaskIncrementTick+0x148>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11f      	bne.n	8005150 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005110:	4b48      	ldr	r3, [pc, #288]	; (8005234 <xTaskIncrementTick+0x14c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <xTaskIncrementTick+0x46>
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	e7fe      	b.n	800512c <xTaskIncrementTick+0x44>
 800512e:	4b41      	ldr	r3, [pc, #260]	; (8005234 <xTaskIncrementTick+0x14c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	4b40      	ldr	r3, [pc, #256]	; (8005238 <xTaskIncrementTick+0x150>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3e      	ldr	r2, [pc, #248]	; (8005234 <xTaskIncrementTick+0x14c>)
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4a3e      	ldr	r2, [pc, #248]	; (8005238 <xTaskIncrementTick+0x150>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	4b3e      	ldr	r3, [pc, #248]	; (800523c <xTaskIncrementTick+0x154>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3301      	adds	r3, #1
 8005148:	4a3c      	ldr	r2, [pc, #240]	; (800523c <xTaskIncrementTick+0x154>)
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	f000 fac4 	bl	80056d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005150:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <xTaskIncrementTick+0x158>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d349      	bcc.n	80051ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <xTaskIncrementTick+0x14c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005164:	4b36      	ldr	r3, [pc, #216]	; (8005240 <xTaskIncrementTick+0x158>)
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	601a      	str	r2, [r3, #0]
					break;
 800516c:	e03f      	b.n	80051ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516e:	4b31      	ldr	r3, [pc, #196]	; (8005234 <xTaskIncrementTick+0x14c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d203      	bcs.n	800518e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005186:	4a2e      	ldr	r2, [pc, #184]	; (8005240 <xTaskIncrementTick+0x158>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800518c:	e02f      	b.n	80051ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3304      	adds	r3, #4
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe ffba 	bl	800410c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	3318      	adds	r3, #24
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe ffb1 	bl	800410c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	4b25      	ldr	r3, [pc, #148]	; (8005244 <xTaskIncrementTick+0x15c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d903      	bls.n	80051be <xTaskIncrementTick+0xd6>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a22      	ldr	r2, [pc, #136]	; (8005244 <xTaskIncrementTick+0x15c>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <xTaskIncrementTick+0x160>)
 80051cc:	441a      	add	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fe ff3c 	bl	8004052 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <xTaskIncrementTick+0x164>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d3b8      	bcc.n	800515a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ec:	e7b5      	b.n	800515a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051ee:	4b17      	ldr	r3, [pc, #92]	; (800524c <xTaskIncrementTick+0x164>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	4914      	ldr	r1, [pc, #80]	; (8005248 <xTaskIncrementTick+0x160>)
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d907      	bls.n	8005216 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005206:	2301      	movs	r3, #1
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e004      	b.n	8005216 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <xTaskIncrementTick+0x168>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <xTaskIncrementTick+0x168>)
 8005214:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <xTaskIncrementTick+0x16c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800521e:	2301      	movs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005222:	697b      	ldr	r3, [r7, #20]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000ff8 	.word	0x20000ff8
 8005230:	20000fd4 	.word	0x20000fd4
 8005234:	20000f88 	.word	0x20000f88
 8005238:	20000f8c 	.word	0x20000f8c
 800523c:	20000fe8 	.word	0x20000fe8
 8005240:	20000ff0 	.word	0x20000ff0
 8005244:	20000fd8 	.word	0x20000fd8
 8005248:	20000b00 	.word	0x20000b00
 800524c:	20000afc 	.word	0x20000afc
 8005250:	20000fe0 	.word	0x20000fe0
 8005254:	20000fe4 	.word	0x20000fe4

08005258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800525e:	4b27      	ldr	r3, [pc, #156]	; (80052fc <vTaskSwitchContext+0xa4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005266:	4b26      	ldr	r3, [pc, #152]	; (8005300 <vTaskSwitchContext+0xa8>)
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800526c:	e040      	b.n	80052f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800526e:	4b24      	ldr	r3, [pc, #144]	; (8005300 <vTaskSwitchContext+0xa8>)
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	4b23      	ldr	r3, [pc, #140]	; (8005304 <vTaskSwitchContext+0xac>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e00f      	b.n	800529c <vTaskSwitchContext+0x44>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <vTaskSwitchContext+0x3e>
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	e7fe      	b.n	8005294 <vTaskSwitchContext+0x3c>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3b01      	subs	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	491a      	ldr	r1, [pc, #104]	; (8005308 <vTaskSwitchContext+0xb0>)
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0e5      	beq.n	800527c <vTaskSwitchContext+0x24>
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4a13      	ldr	r2, [pc, #76]	; (8005308 <vTaskSwitchContext+0xb0>)
 80052bc:	4413      	add	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3308      	adds	r3, #8
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d104      	bne.n	80052e0 <vTaskSwitchContext+0x88>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <vTaskSwitchContext+0xb4>)
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4a06      	ldr	r2, [pc, #24]	; (8005304 <vTaskSwitchContext+0xac>)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6013      	str	r3, [r2, #0]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	20000ff8 	.word	0x20000ff8
 8005300:	20000fe4 	.word	0x20000fe4
 8005304:	20000fd8 	.word	0x20000fd8
 8005308:	20000b00 	.word	0x20000b00
 800530c:	20000afc 	.word	0x20000afc

08005310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <vTaskPlaceOnEventList+0x24>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e7fe      	b.n	8005332 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <vTaskPlaceOnEventList+0x44>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3318      	adds	r3, #24
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fe feac 	bl	800409a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005342:	2101      	movs	r1, #1
 8005344:	6838      	ldr	r0, [r7, #0]
 8005346:	f000 fa71 	bl	800582c <prvAddCurrentTaskToDelayedList>
}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000afc 	.word	0x20000afc

08005358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <vTaskPlaceOnEventListRestricted+0x26>
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e7fe      	b.n	800537c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <vTaskPlaceOnEventListRestricted+0x50>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3318      	adds	r3, #24
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7fe fe63 	bl	8004052 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005392:	f04f 33ff 	mov.w	r3, #4294967295
 8005396:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	68b8      	ldr	r0, [r7, #8]
 800539c:	f000 fa46 	bl	800582c <prvAddCurrentTaskToDelayedList>
	}
 80053a0:	bf00      	nop
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000afc 	.word	0x20000afc

080053ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <xTaskRemoveFromEventList+0x2a>
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e7fe      	b.n	80053d4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3318      	adds	r3, #24
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fe96 	bl	800410c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <xTaskRemoveFromEventList+0xac>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11d      	bne.n	8005424 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fe8d 	bl	800410c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f6:	4b19      	ldr	r3, [pc, #100]	; (800545c <xTaskRemoveFromEventList+0xb0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d903      	bls.n	8005406 <xTaskRemoveFromEventList+0x5a>
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <xTaskRemoveFromEventList+0xb0>)
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a13      	ldr	r2, [pc, #76]	; (8005460 <xTaskRemoveFromEventList+0xb4>)
 8005414:	441a      	add	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3304      	adds	r3, #4
 800541a:	4619      	mov	r1, r3
 800541c:	4610      	mov	r0, r2
 800541e:	f7fe fe18 	bl	8004052 <vListInsertEnd>
 8005422:	e005      	b.n	8005430 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3318      	adds	r3, #24
 8005428:	4619      	mov	r1, r3
 800542a:	480e      	ldr	r0, [pc, #56]	; (8005464 <xTaskRemoveFromEventList+0xb8>)
 800542c:	f7fe fe11 	bl	8004052 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <xTaskRemoveFromEventList+0xbc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d905      	bls.n	800544a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800543e:	2301      	movs	r3, #1
 8005440:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <xTaskRemoveFromEventList+0xc0>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e001      	b.n	800544e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800544e:	697b      	ldr	r3, [r7, #20]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000ff8 	.word	0x20000ff8
 800545c:	20000fd8 	.word	0x20000fd8
 8005460:	20000b00 	.word	0x20000b00
 8005464:	20000f90 	.word	0x20000f90
 8005468:	20000afc 	.word	0x20000afc
 800546c:	20000fe4 	.word	0x20000fe4

08005470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <vTaskInternalSetTimeOutState+0x24>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <vTaskInternalSetTimeOutState+0x28>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	605a      	str	r2, [r3, #4]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	20000fe8 	.word	0x20000fe8
 8005498:	20000fd4 	.word	0x20000fd4

0800549c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <xTaskCheckForTimeOut+0x24>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e7fe      	b.n	80054be <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <xTaskCheckForTimeOut+0x3e>
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e7fe      	b.n	80054d8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80054da:	f000 fe67 	bl	80061ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054de:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <xTaskCheckForTimeOut+0xb8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d102      	bne.n	80054fe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	e023      	b.n	8005546 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <xTaskCheckForTimeOut+0xbc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d007      	beq.n	800551a <xTaskCheckForTimeOut+0x7e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	d302      	bcc.n	800551a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e015      	b.n	8005546 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	429a      	cmp	r2, r3
 8005522:	d20b      	bcs.n	800553c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff ff9d 	bl	8005470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e004      	b.n	8005546 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005546:	f000 fe5f 	bl	8006208 <vPortExitCritical>

	return xReturn;
 800554a:	69fb      	ldr	r3, [r7, #28]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000fd4 	.word	0x20000fd4
 8005558:	20000fe8 	.word	0x20000fe8

0800555c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <vTaskMissedYield+0x14>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000fe4 	.word	0x20000fe4

08005574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800557c:	f000 f852 	bl	8005624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <prvIdleTask+0x28>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d9f9      	bls.n	800557c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <prvIdleTask+0x2c>)
 800558a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005598:	e7f0      	b.n	800557c <prvIdleTask+0x8>
 800559a:	bf00      	nop
 800559c:	20000b00 	.word	0x20000b00
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	e00c      	b.n	80055ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <prvInitialiseTaskLists+0x60>)
 80055bc:	4413      	add	r3, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fd1a 	bl	8003ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b37      	cmp	r3, #55	; 0x37
 80055ce:	d9ef      	bls.n	80055b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055d0:	480d      	ldr	r0, [pc, #52]	; (8005608 <prvInitialiseTaskLists+0x64>)
 80055d2:	f7fe fd11 	bl	8003ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055d6:	480d      	ldr	r0, [pc, #52]	; (800560c <prvInitialiseTaskLists+0x68>)
 80055d8:	f7fe fd0e 	bl	8003ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055dc:	480c      	ldr	r0, [pc, #48]	; (8005610 <prvInitialiseTaskLists+0x6c>)
 80055de:	f7fe fd0b 	bl	8003ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055e2:	480c      	ldr	r0, [pc, #48]	; (8005614 <prvInitialiseTaskLists+0x70>)
 80055e4:	f7fe fd08 	bl	8003ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055e8:	480b      	ldr	r0, [pc, #44]	; (8005618 <prvInitialiseTaskLists+0x74>)
 80055ea:	f7fe fd05 	bl	8003ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <prvInitialiseTaskLists+0x78>)
 80055f0:	4a05      	ldr	r2, [pc, #20]	; (8005608 <prvInitialiseTaskLists+0x64>)
 80055f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <prvInitialiseTaskLists+0x7c>)
 80055f6:	4a05      	ldr	r2, [pc, #20]	; (800560c <prvInitialiseTaskLists+0x68>)
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000b00 	.word	0x20000b00
 8005608:	20000f60 	.word	0x20000f60
 800560c:	20000f74 	.word	0x20000f74
 8005610:	20000f90 	.word	0x20000f90
 8005614:	20000fa4 	.word	0x20000fa4
 8005618:	20000fbc 	.word	0x20000fbc
 800561c:	20000f88 	.word	0x20000f88
 8005620:	20000f8c 	.word	0x20000f8c

08005624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800562a:	e019      	b.n	8005660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800562c:	f000 fdbe 	bl	80061ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005630:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <prvCheckTasksWaitingTermination+0x4c>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe fd65 	bl	800410c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <prvCheckTasksWaitingTermination+0x50>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3b01      	subs	r3, #1
 8005648:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <prvCheckTasksWaitingTermination+0x50>)
 800564a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <prvCheckTasksWaitingTermination+0x54>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3b01      	subs	r3, #1
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <prvCheckTasksWaitingTermination+0x54>)
 8005654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005656:	f000 fdd7 	bl	8006208 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f80e 	bl	800567c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <prvCheckTasksWaitingTermination+0x54>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e1      	bne.n	800562c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000fa4 	.word	0x20000fa4
 8005674:	20000fd0 	.word	0x20000fd0
 8005678:	20000fb8 	.word	0x20000fb8

0800567c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800568a:	2b00      	cmp	r3, #0
 800568c:	d108      	bne.n	80056a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	4618      	mov	r0, r3
 8005694:	f000 ff66 	bl	8006564 <vPortFree>
				vPortFree( pxTCB );
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 ff63 	bl	8006564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800569e:	e017      	b.n	80056d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d103      	bne.n	80056b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 ff5a 	bl	8006564 <vPortFree>
	}
 80056b0:	e00e      	b.n	80056d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d009      	beq.n	80056d0 <prvDeleteTCB+0x54>
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e7fe      	b.n	80056ce <prvDeleteTCB+0x52>
	}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <prvResetNextTaskUnblockTime+0x38>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <prvResetNextTaskUnblockTime+0x3c>)
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056f0:	e008      	b.n	8005704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <prvResetNextTaskUnblockTime+0x38>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	4a04      	ldr	r2, [pc, #16]	; (8005714 <prvResetNextTaskUnblockTime+0x3c>)
 8005702:	6013      	str	r3, [r2, #0]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20000f88 	.word	0x20000f88
 8005714:	20000ff0 	.word	0x20000ff0

08005718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <xTaskGetSchedulerState+0x34>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005726:	2301      	movs	r3, #1
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	e008      	b.n	800573e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572c:	4b08      	ldr	r3, [pc, #32]	; (8005750 <xTaskGetSchedulerState+0x38>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005734:	2302      	movs	r3, #2
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	e001      	b.n	800573e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800573e:	687b      	ldr	r3, [r7, #4]
	}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000fdc 	.word	0x20000fdc
 8005750:	20000ff8 	.word	0x20000ff8

08005754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d054      	beq.n	8005814 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800576a:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <xTaskPriorityDisinherit+0xcc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	d009      	beq.n	8005788 <xTaskPriorityDisinherit+0x34>
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e7fe      	b.n	8005786 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <xTaskPriorityDisinherit+0x50>
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	e7fe      	b.n	80057a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d02c      	beq.n	8005814 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d128      	bne.n	8005814 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fca0 	bl	800410c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <xTaskPriorityDisinherit+0xd0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d903      	bls.n	80057f4 <xTaskPriorityDisinherit+0xa0>
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <xTaskPriorityDisinherit+0xd0>)
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4a09      	ldr	r2, [pc, #36]	; (8005828 <xTaskPriorityDisinherit+0xd4>)
 8005802:	441a      	add	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f7fe fc21 	bl	8004052 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005814:	697b      	ldr	r3, [r7, #20]
	}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000afc 	.word	0x20000afc
 8005824:	20000fd8 	.word	0x20000fd8
 8005828:	20000b00 	.word	0x20000b00

0800582c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005836:	4b21      	ldr	r3, [pc, #132]	; (80058bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800583c:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fc62 	bl	800410c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d10a      	bne.n	8005866 <prvAddCurrentTaskToDelayedList+0x3a>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005856:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3304      	adds	r3, #4
 800585c:	4619      	mov	r1, r3
 800585e:	4819      	ldr	r0, [pc, #100]	; (80058c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005860:	f7fe fbf7 	bl	8004052 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005864:	e026      	b.n	80058b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	429a      	cmp	r2, r3
 800587c:	d209      	bcs.n	8005892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f7fe fc05 	bl	800409a <vListInsert>
}
 8005890:	e010      	b.n	80058b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005892:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7fe fbfb 	bl	800409a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d202      	bcs.n	80058b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058ae:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000fd4 	.word	0x20000fd4
 80058c0:	20000afc 	.word	0x20000afc
 80058c4:	20000fbc 	.word	0x20000fbc
 80058c8:	20000f8c 	.word	0x20000f8c
 80058cc:	20000f88 	.word	0x20000f88
 80058d0:	20000ff0 	.word	0x20000ff0

080058d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058de:	f000 faff 	bl	8005ee0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <xTimerCreateTimerTask+0x80>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d021      	beq.n	800592e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058f2:	1d3a      	adds	r2, r7, #4
 80058f4:	f107 0108 	add.w	r1, r7, #8
 80058f8:	f107 030c 	add.w	r3, r7, #12
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fb61 	bl	8003fc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	9202      	str	r2, [sp, #8]
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	2302      	movs	r3, #2
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	460a      	mov	r2, r1
 8005914:	4910      	ldr	r1, [pc, #64]	; (8005958 <xTimerCreateTimerTask+0x84>)
 8005916:	4811      	ldr	r0, [pc, #68]	; (800595c <xTimerCreateTimerTask+0x88>)
 8005918:	f7ff f8f6 	bl	8004b08 <xTaskCreateStatic>
 800591c:	4602      	mov	r2, r0
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <xTimerCreateTimerTask+0x8c>)
 8005920:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <xTimerCreateTimerTask+0x8c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <xTimerCreateTimerTask+0x74>
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e7fe      	b.n	8005946 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005948:	697b      	ldr	r3, [r7, #20]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000102c 	.word	0x2000102c
 8005958:	08006884 	.word	0x08006884
 800595c:	08005a95 	.word	0x08005a95
 8005960:	20001030 	.word	0x20001030

08005964 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <xTimerGenericCommand+0x2c>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	e7fe      	b.n	800598e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <xTimerGenericCommand+0x94>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02a      	beq.n	80059ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	dc18      	bgt.n	80059dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059aa:	f7ff feb5 	bl	8005718 <xTaskGetSchedulerState>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d109      	bne.n	80059c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059b4:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <xTimerGenericCommand+0x94>)
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	f107 0110 	add.w	r1, r7, #16
 80059bc:	2300      	movs	r3, #0
 80059be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c0:	f7fe fccc 	bl	800435c <xQueueGenericSend>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24
 80059c6:	e012      	b.n	80059ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <xTimerGenericCommand+0x94>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	f107 0110 	add.w	r1, r7, #16
 80059d0:	2300      	movs	r3, #0
 80059d2:	2200      	movs	r2, #0
 80059d4:	f7fe fcc2 	bl	800435c <xQueueGenericSend>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24
 80059da:	e008      	b.n	80059ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <xTimerGenericCommand+0x94>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	f107 0110 	add.w	r1, r7, #16
 80059e4:	2300      	movs	r3, #0
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	f7fe fdb2 	bl	8004550 <xQueueGenericSendFromISR>
 80059ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3728      	adds	r7, #40	; 0x28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	2000102c 	.word	0x2000102c

080059fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a06:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <prvProcessExpiredTimer+0x94>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe fb79 	bl	800410c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d021      	beq.n	8005a6c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	18d1      	adds	r1, r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	6978      	ldr	r0, [r7, #20]
 8005a36:	f000 f8d1 	bl	8005bdc <prvInsertTimerInActiveList>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01e      	beq.n	8005a7e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a40:	2300      	movs	r3, #0
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	2100      	movs	r1, #0
 8005a4a:	6978      	ldr	r0, [r7, #20]
 8005a4c:	f7ff ff8a 	bl	8005964 <xTimerGenericCommand>
 8005a50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d112      	bne.n	8005a7e <prvProcessExpiredTimer+0x82>
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e7fe      	b.n	8005a6a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	6978      	ldr	r0, [r7, #20]
 8005a84:	4798      	blx	r3
}
 8005a86:	bf00      	nop
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20001024 	.word	0x20001024

08005a94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a9c:	f107 0308 	add.w	r3, r7, #8
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 f857 	bl	8005b54 <prvGetNextExpireTime>
 8005aa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f803 	bl	8005ab8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ab2:	f000 f8d5 	bl	8005c60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ab6:	e7f1      	b.n	8005a9c <prvTimerTask+0x8>

08005ab8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ac2:	f7ff fa57 	bl	8004f74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ac6:	f107 0308 	add.w	r3, r7, #8
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f866 	bl	8005b9c <prvSampleTimeNow>
 8005ad0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d130      	bne.n	8005b3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <prvProcessTimerOrBlockTask+0x3c>
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d806      	bhi.n	8005af4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ae6:	f7ff fa53 	bl	8004f90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ff85 	bl	80059fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005af2:	e024      	b.n	8005b3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005afa:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <prvProcessTimerOrBlockTask+0x90>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <prvProcessTimerOrBlockTask+0x50>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <prvProcessTimerOrBlockTask+0x52>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <prvProcessTimerOrBlockTask+0x94>)
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f7fe ffc1 	bl	8004aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b1e:	f7ff fa37 	bl	8004f90 <xTaskResumeAll>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <prvProcessTimerOrBlockTask+0x98>)
 8005b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
}
 8005b38:	e001      	b.n	8005b3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b3a:	f7ff fa29 	bl	8004f90 <xTaskResumeAll>
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20001028 	.word	0x20001028
 8005b4c:	2000102c 	.word	0x2000102c
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <prvGetNextExpireTime+0x44>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <prvGetNextExpireTime+0x16>
 8005b66:	2201      	movs	r2, #1
 8005b68:	e000      	b.n	8005b6c <prvGetNextExpireTime+0x18>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b78:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <prvGetNextExpireTime+0x44>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e001      	b.n	8005b88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b88:	68fb      	ldr	r3, [r7, #12]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20001024 	.word	0x20001024

08005b9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ba4:	f7ff fa90 	bl	80050c8 <xTaskGetTickCount>
 8005ba8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <prvSampleTimeNow+0x3c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d205      	bcs.n	8005bc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bb4:	f000 f930 	bl	8005e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e002      	b.n	8005bc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bc6:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <prvSampleTimeNow+0x3c>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20001034 	.word	0x20001034

08005bdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d812      	bhi.n	8005c28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	1ad2      	subs	r2, r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d302      	bcc.n	8005c16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c10:	2301      	movs	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e01b      	b.n	8005c4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <prvInsertTimerInActiveList+0x7c>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4610      	mov	r0, r2
 8005c22:	f7fe fa3a 	bl	800409a <vListInsert>
 8005c26:	e012      	b.n	8005c4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d206      	bcs.n	8005c3e <prvInsertTimerInActiveList+0x62>
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d302      	bcc.n	8005c3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e007      	b.n	8005c4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c3e:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <prvInsertTimerInActiveList+0x80>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3304      	adds	r3, #4
 8005c46:	4619      	mov	r1, r3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	f7fe fa26 	bl	800409a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c4e:	697b      	ldr	r3, [r7, #20]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20001028 	.word	0x20001028
 8005c5c:	20001024 	.word	0x20001024

08005c60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c66:	e0c6      	b.n	8005df6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da17      	bge.n	8005c9e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	3304      	adds	r3, #4
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <prvProcessReceivedCommands+0x2e>
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e7fe      	b.n	8005c8c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c94:	6850      	ldr	r0, [r2, #4]
 8005c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c98:	6892      	ldr	r2, [r2, #8]
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f2c0 80a7 	blt.w	8005df4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fa28 	bl	800410c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff ff6c 	bl	8005b9c <prvSampleTimeNow>
 8005cc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b09      	cmp	r3, #9
 8005cca:	f200 8094 	bhi.w	8005df6 <prvProcessReceivedCommands+0x196>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <prvProcessReceivedCommands+0x74>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005d6f 	.word	0x08005d6f
 8005ce4:	08005d83 	.word	0x08005d83
 8005ce8:	08005dcb 	.word	0x08005dcb
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005cfd 	.word	0x08005cfd
 8005cf4:	08005d6f 	.word	0x08005d6f
 8005cf8:	08005d83 	.word	0x08005d83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	18d1      	adds	r1, r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d1c:	f7ff ff5e 	bl	8005bdc <prvInsertTimerInActiveList>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d067      	beq.n	8005df6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05c      	beq.n	8005df6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	441a      	add	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4e:	f7ff fe09 	bl	8005964 <xTimerGenericCommand>
 8005d52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d14d      	bne.n	8005df6 <prvProcessReceivedCommands+0x196>
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e7fe      	b.n	8005d6c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d80:	e039      	b.n	8005df6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <prvProcessReceivedCommands+0x156>
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e7fe      	b.n	8005db4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	18d1      	adds	r1, r2, r3
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc4:	f7ff ff0a 	bl	8005bdc <prvInsertTimerInActiveList>
					break;
 8005dc8:	e015      	b.n	8005df6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d103      	bne.n	8005de0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dda:	f000 fbc3 	bl	8006564 <vPortFree>
 8005dde:	e00a      	b.n	8005df6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005df2:	e000      	b.n	8005df6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005df4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <prvProcessReceivedCommands+0x1b4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	1d39      	adds	r1, r7, #4
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fc3a 	bl	8004678 <xQueueReceive>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f47f af2e 	bne.w	8005c68 <prvProcessReceivedCommands+0x8>
	}
}
 8005e0c:	bf00      	nop
 8005e0e:	3730      	adds	r7, #48	; 0x30
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2000102c 	.word	0x2000102c

08005e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e1e:	e047      	b.n	8005eb0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e20:	4b2d      	ldr	r3, [pc, #180]	; (8005ed8 <prvSwitchTimerLists+0xc0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <prvSwitchTimerLists+0xc0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe f967 	bl	800410c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02d      	beq.n	8005eb0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d90e      	bls.n	8005e84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <prvSwitchTimerLists+0xc0>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f7fe f90c 	bl	800409a <vListInsert>
 8005e82:	e015      	b.n	8005eb0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e84:	2300      	movs	r3, #0
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff fd68 	bl	8005964 <xTimerGenericCommand>
 8005e94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <prvSwitchTimerLists+0x98>
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	e7fe      	b.n	8005eae <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <prvSwitchTimerLists+0xc0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1b2      	bne.n	8005e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <prvSwitchTimerLists+0xc0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <prvSwitchTimerLists+0xc4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <prvSwitchTimerLists+0xc0>)
 8005ec6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <prvSwitchTimerLists+0xc4>)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6013      	str	r3, [r2, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20001024 	.word	0x20001024
 8005edc:	20001028 	.word	0x20001028

08005ee0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ee6:	f000 f961 	bl	80061ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <prvCheckForValidListAndQueue+0x60>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d120      	bne.n	8005f34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ef2:	4814      	ldr	r0, [pc, #80]	; (8005f44 <prvCheckForValidListAndQueue+0x64>)
 8005ef4:	f7fe f880 	bl	8003ff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ef8:	4813      	ldr	r0, [pc, #76]	; (8005f48 <prvCheckForValidListAndQueue+0x68>)
 8005efa:	f7fe f87d 	bl	8003ff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <prvCheckForValidListAndQueue+0x6c>)
 8005f00:	4a10      	ldr	r2, [pc, #64]	; (8005f44 <prvCheckForValidListAndQueue+0x64>)
 8005f02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f04:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <prvCheckForValidListAndQueue+0x70>)
 8005f06:	4a10      	ldr	r2, [pc, #64]	; (8005f48 <prvCheckForValidListAndQueue+0x68>)
 8005f08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <prvCheckForValidListAndQueue+0x74>)
 8005f10:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <prvCheckForValidListAndQueue+0x78>)
 8005f12:	2110      	movs	r1, #16
 8005f14:	200a      	movs	r0, #10
 8005f16:	f7fe f98b 	bl	8004230 <xQueueGenericCreateStatic>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <prvCheckForValidListAndQueue+0x60>)
 8005f1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvCheckForValidListAndQueue+0x60>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <prvCheckForValidListAndQueue+0x60>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	490b      	ldr	r1, [pc, #44]	; (8005f5c <prvCheckForValidListAndQueue+0x7c>)
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fd8e 	bl	8004a50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f34:	f000 f968 	bl	8006208 <vPortExitCritical>
}
 8005f38:	bf00      	nop
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000102c 	.word	0x2000102c
 8005f44:	20000ffc 	.word	0x20000ffc
 8005f48:	20001010 	.word	0x20001010
 8005f4c:	20001024 	.word	0x20001024
 8005f50:	20001028 	.word	0x20001028
 8005f54:	200010d8 	.word	0x200010d8
 8005f58:	20001038 	.word	0x20001038
 8005f5c:	0800688c 	.word	0x0800688c

08005f60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f90:	4a0c      	ldr	r2, [pc, #48]	; (8005fc4 <pxPortInitialiseStack+0x64>)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3b14      	subs	r3, #20
 8005f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f06f 0202 	mvn.w	r2, #2
 8005fae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3b20      	subs	r3, #32
 8005fb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	08005fc9 	.word	0x08005fc9

08005fc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fd2:	4b11      	ldr	r3, [pc, #68]	; (8006018 <prvTaskExitError+0x50>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d009      	beq.n	8005ff0 <prvTaskExitError+0x28>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	e7fe      	b.n	8005fee <prvTaskExitError+0x26>
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006002:	bf00      	nop
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0fc      	beq.n	8006004 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000014 	.word	0x20000014
 800601c:	00000000 	.word	0x00000000

08006020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <pxCurrentTCBConst2>)
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	6808      	ldr	r0, [r1, #0]
 8006026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602a:	f380 8809 	msr	PSP, r0
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8811 	msr	BASEPRI, r0
 800603a:	4770      	bx	lr
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst2>:
 8006040:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006048:	4808      	ldr	r0, [pc, #32]	; (800606c <prvPortStartFirstTask+0x24>)
 800604a:	6800      	ldr	r0, [r0, #0]
 800604c:	6800      	ldr	r0, [r0, #0]
 800604e:	f380 8808 	msr	MSP, r0
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f380 8814 	msr	CONTROL, r0
 800605a:	b662      	cpsie	i
 800605c:	b661      	cpsie	f
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	df00      	svc	0
 8006068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800606a:	bf00      	nop
 800606c:	e000ed08 	.word	0xe000ed08

08006070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006076:	4b44      	ldr	r3, [pc, #272]	; (8006188 <xPortStartScheduler+0x118>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a44      	ldr	r2, [pc, #272]	; (800618c <xPortStartScheduler+0x11c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d109      	bne.n	8006094 <xPortStartScheduler+0x24>
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e7fe      	b.n	8006092 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006094:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <xPortStartScheduler+0x118>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <xPortStartScheduler+0x120>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d109      	bne.n	80060b2 <xPortStartScheduler+0x42>
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e7fe      	b.n	80060b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060b2:	4b38      	ldr	r3, [pc, #224]	; (8006194 <xPortStartScheduler+0x124>)
 80060b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	4b30      	ldr	r3, [pc, #192]	; (8006198 <xPortStartScheduler+0x128>)
 80060d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060da:	4b30      	ldr	r3, [pc, #192]	; (800619c <xPortStartScheduler+0x12c>)
 80060dc:	2207      	movs	r2, #7
 80060de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060e0:	e009      	b.n	80060f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80060e2:	4b2e      	ldr	r3, [pc, #184]	; (800619c <xPortStartScheduler+0x12c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	4a2c      	ldr	r2, [pc, #176]	; (800619c <xPortStartScheduler+0x12c>)
 80060ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d0ef      	beq.n	80060e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006102:	4b26      	ldr	r3, [pc, #152]	; (800619c <xPortStartScheduler+0x12c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1c3 0307 	rsb	r3, r3, #7
 800610a:	2b04      	cmp	r3, #4
 800610c:	d009      	beq.n	8006122 <xPortStartScheduler+0xb2>
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60bb      	str	r3, [r7, #8]
 8006120:	e7fe      	b.n	8006120 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006122:	4b1e      	ldr	r3, [pc, #120]	; (800619c <xPortStartScheduler+0x12c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <xPortStartScheduler+0x12c>)
 800612a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <xPortStartScheduler+0x12c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <xPortStartScheduler+0x12c>)
 8006136:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006140:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <xPortStartScheduler+0x130>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <xPortStartScheduler+0x130>)
 8006146:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800614a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <xPortStartScheduler+0x130>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <xPortStartScheduler+0x130>)
 8006152:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006156:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006158:	f000 f8d6 	bl	8006308 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800615c:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <xPortStartScheduler+0x134>)
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006162:	f000 f8f5 	bl	8006350 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <xPortStartScheduler+0x138>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a0f      	ldr	r2, [pc, #60]	; (80061a8 <xPortStartScheduler+0x138>)
 800616c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006170:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006172:	f7ff ff69 	bl	8006048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006176:	f7ff f86f 	bl	8005258 <vTaskSwitchContext>
	prvTaskExitError();
 800617a:	f7ff ff25 	bl	8005fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	e000ed00 	.word	0xe000ed00
 800618c:	410fc271 	.word	0x410fc271
 8006190:	410fc270 	.word	0x410fc270
 8006194:	e000e400 	.word	0xe000e400
 8006198:	20001128 	.word	0x20001128
 800619c:	2000112c 	.word	0x2000112c
 80061a0:	e000ed20 	.word	0xe000ed20
 80061a4:	20000014 	.word	0x20000014
 80061a8:	e000ef34 	.word	0xe000ef34

080061ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <vPortEnterCritical+0x54>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	4a0d      	ldr	r2, [pc, #52]	; (8006200 <vPortEnterCritical+0x54>)
 80061cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <vPortEnterCritical+0x54>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10e      	bne.n	80061f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <vPortEnterCritical+0x58>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <vPortEnterCritical+0x48>
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	e7fe      	b.n	80061f2 <vPortEnterCritical+0x46>
	}
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000014 	.word	0x20000014
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <vPortExitCritical+0x4c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <vPortExitCritical+0x22>
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	e7fe      	b.n	8006228 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <vPortExitCritical+0x4c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3b01      	subs	r3, #1
 8006230:	4a08      	ldr	r2, [pc, #32]	; (8006254 <vPortExitCritical+0x4c>)
 8006232:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <vPortExitCritical+0x4c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <vPortExitCritical+0x3e>
 800623c:	2300      	movs	r3, #0
 800623e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20000014 	.word	0x20000014
	...

08006260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006260:	f3ef 8009 	mrs	r0, PSP
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <pxCurrentTCBConst>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	f01e 0f10 	tst.w	lr, #16
 8006270:	bf08      	it	eq
 8006272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	6010      	str	r0, [r2, #0]
 800627c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006284:	f380 8811 	msr	BASEPRI, r0
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f7fe ffe2 	bl	8005258 <vTaskSwitchContext>
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	f380 8811 	msr	BASEPRI, r0
 800629c:	bc09      	pop	{r0, r3}
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	6808      	ldr	r0, [r1, #0]
 80062a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a6:	f01e 0f10 	tst.w	lr, #16
 80062aa:	bf08      	it	eq
 80062ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062b0:	f380 8809 	msr	PSP, r0
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	f3af 8000 	nop.w

080062c0 <pxCurrentTCBConst>:
 80062c0:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop

080062c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062e0:	f7fe ff02 	bl	80050e8 <xTaskIncrementTick>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <SysTick_Handler+0x3c>)
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	2300      	movs	r3, #0
 80062f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	e000ed04 	.word	0xe000ed04

08006308 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <vPortSetupTimerInterrupt+0x34>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortSetupTimerInterrupt+0x38>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006318:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <vPortSetupTimerInterrupt+0x3c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <vPortSetupTimerInterrupt+0x40>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	099b      	lsrs	r3, r3, #6
 8006324:	4a09      	ldr	r2, [pc, #36]	; (800634c <vPortSetupTimerInterrupt+0x44>)
 8006326:	3b01      	subs	r3, #1
 8006328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800632a:	4b04      	ldr	r3, [pc, #16]	; (800633c <vPortSetupTimerInterrupt+0x34>)
 800632c:	2207      	movs	r2, #7
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	e000e010 	.word	0xe000e010
 8006340:	e000e018 	.word	0xe000e018
 8006344:	20000008 	.word	0x20000008
 8006348:	10624dd3 	.word	0x10624dd3
 800634c:	e000e014 	.word	0xe000e014

08006350 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006350:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006360 <vPortEnableVFP+0x10>
 8006354:	6801      	ldr	r1, [r0, #0]
 8006356:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800635a:	6001      	str	r1, [r0, #0]
 800635c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800635e:	bf00      	nop
 8006360:	e000ed88 	.word	0xe000ed88

08006364 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800636a:	f3ef 8305 	mrs	r3, IPSR
 800636e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b0f      	cmp	r3, #15
 8006374:	d913      	bls.n	800639e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <vPortValidateInterruptPriority+0x6c>)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <vPortValidateInterruptPriority+0x70>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	7afa      	ldrb	r2, [r7, #11]
 8006386:	429a      	cmp	r2, r3
 8006388:	d209      	bcs.n	800639e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	e7fe      	b.n	800639c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <vPortValidateInterruptPriority+0x74>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063a6:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <vPortValidateInterruptPriority+0x78>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d909      	bls.n	80063c2 <vPortValidateInterruptPriority+0x5e>
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	e7fe      	b.n	80063c0 <vPortValidateInterruptPriority+0x5c>
	}
 80063c2:	bf00      	nop
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	e000e3f0 	.word	0xe000e3f0
 80063d4:	20001128 	.word	0x20001128
 80063d8:	e000ed0c 	.word	0xe000ed0c
 80063dc:	2000112c 	.word	0x2000112c

080063e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063ec:	f7fe fdc2 	bl	8004f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <pvPortMalloc+0x170>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063f8:	f000 f90c 	bl	8006614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063fc:	4b55      	ldr	r3, [pc, #340]	; (8006554 <pvPortMalloc+0x174>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 808c 	bne.w	8006522 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01c      	beq.n	800644a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006410:	2208      	movs	r2, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b00      	cmp	r3, #0
 8006420:	d013      	beq.n	800644a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	3308      	adds	r3, #8
 800642a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <pvPortMalloc+0x6a>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e7fe      	b.n	8006448 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d068      	beq.n	8006522 <pvPortMalloc+0x142>
 8006450:	4b41      	ldr	r3, [pc, #260]	; (8006558 <pvPortMalloc+0x178>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d863      	bhi.n	8006522 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800645a:	4b40      	ldr	r3, [pc, #256]	; (800655c <pvPortMalloc+0x17c>)
 800645c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800645e:	4b3f      	ldr	r3, [pc, #252]	; (800655c <pvPortMalloc+0x17c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006464:	e004      	b.n	8006470 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d903      	bls.n	8006482 <pvPortMalloc+0xa2>
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006482:	4b33      	ldr	r3, [pc, #204]	; (8006550 <pvPortMalloc+0x170>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006488:	429a      	cmp	r2, r3
 800648a:	d04a      	beq.n	8006522 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2208      	movs	r2, #8
 8006492:	4413      	add	r3, r2
 8006494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	2308      	movs	r3, #8
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d91e      	bls.n	80064ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <pvPortMalloc+0xf4>
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e7fe      	b.n	80064d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064e6:	69b8      	ldr	r0, [r7, #24]
 80064e8:	f000 f8f6 	bl	80066d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <pvPortMalloc+0x178>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <pvPortMalloc+0x178>)
 80064f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <pvPortMalloc+0x178>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b18      	ldr	r3, [pc, #96]	; (8006560 <pvPortMalloc+0x180>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d203      	bcs.n	800650e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <pvPortMalloc+0x178>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a15      	ldr	r2, [pc, #84]	; (8006560 <pvPortMalloc+0x180>)
 800650c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <pvPortMalloc+0x174>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	431a      	orrs	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006522:	f7fe fd35 	bl	8004f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <pvPortMalloc+0x164>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e7fe      	b.n	8006542 <pvPortMalloc+0x162>
	return pvReturn;
 8006544:	69fb      	ldr	r3, [r7, #28]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3728      	adds	r7, #40	; 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20001cf0 	.word	0x20001cf0
 8006554:	20001cfc 	.word	0x20001cfc
 8006558:	20001cf4 	.word	0x20001cf4
 800655c:	20001ce8 	.word	0x20001ce8
 8006560:	20001cf8 	.word	0x20001cf8

08006564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d046      	beq.n	8006604 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006576:	2308      	movs	r3, #8
 8006578:	425b      	negs	r3, r3
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4413      	add	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	4b20      	ldr	r3, [pc, #128]	; (800660c <vPortFree+0xa8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4013      	ands	r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <vPortFree+0x42>
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e7fe      	b.n	80065a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <vPortFree+0x5e>
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60bb      	str	r3, [r7, #8]
 80065c0:	e7fe      	b.n	80065c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <vPortFree+0xa8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d019      	beq.n	8006604 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d115      	bne.n	8006604 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <vPortFree+0xa8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065e8:	f7fe fcc4 	bl	8004f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <vPortFree+0xac>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4413      	add	r3, r2
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <vPortFree+0xac>)
 80065f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065fa:	6938      	ldr	r0, [r7, #16]
 80065fc:	f000 f86c 	bl	80066d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006600:	f7fe fcc6 	bl	8004f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006604:	bf00      	nop
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20001cfc 	.word	0x20001cfc
 8006610:	20001cf4 	.word	0x20001cf4

08006614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800661a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800661e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006620:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <prvHeapInit+0xac>)
 8006622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3307      	adds	r3, #7
 8006632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <prvHeapInit+0xac>)
 8006644:	4413      	add	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800664c:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <prvHeapInit+0xb0>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <prvHeapInit+0xb0>)
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006660:	2208      	movs	r2, #8
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <prvHeapInit+0xb4>)
 8006674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <prvHeapInit+0xb4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <prvHeapInit+0xb4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvHeapInit+0xb4>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <prvHeapInit+0xb8>)
 80066a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <prvHeapInit+0xbc>)
 80066aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvHeapInit+0xc0>)
 80066ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066b2:	601a      	str	r2, [r3, #0]
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	20001130 	.word	0x20001130
 80066c4:	20001ce8 	.word	0x20001ce8
 80066c8:	20001cf0 	.word	0x20001cf0
 80066cc:	20001cf8 	.word	0x20001cf8
 80066d0:	20001cf4 	.word	0x20001cf4
 80066d4:	20001cfc 	.word	0x20001cfc

080066d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <prvInsertBlockIntoFreeList+0xac>)
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e002      	b.n	80066ec <prvInsertBlockIntoFreeList+0x14>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d8f7      	bhi.n	80066e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4413      	add	r3, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	429a      	cmp	r2, r3
 8006706:	d108      	bne.n	800671a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	441a      	add	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d118      	bne.n	8006760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d00d      	beq.n	8006756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	441a      	add	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e008      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e003      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	429a      	cmp	r2, r3
 800676e:	d002      	beq.n	8006776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20001ce8 	.word	0x20001ce8
 8006788:	20001cf0 	.word	0x20001cf0

0800678c <__libc_init_array>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4e0d      	ldr	r6, [pc, #52]	; (80067c4 <__libc_init_array+0x38>)
 8006790:	4c0d      	ldr	r4, [pc, #52]	; (80067c8 <__libc_init_array+0x3c>)
 8006792:	1ba4      	subs	r4, r4, r6
 8006794:	10a4      	asrs	r4, r4, #2
 8006796:	2500      	movs	r5, #0
 8006798:	42a5      	cmp	r5, r4
 800679a:	d109      	bne.n	80067b0 <__libc_init_array+0x24>
 800679c:	4e0b      	ldr	r6, [pc, #44]	; (80067cc <__libc_init_array+0x40>)
 800679e:	4c0c      	ldr	r4, [pc, #48]	; (80067d0 <__libc_init_array+0x44>)
 80067a0:	f000 f82c 	bl	80067fc <_init>
 80067a4:	1ba4      	subs	r4, r4, r6
 80067a6:	10a4      	asrs	r4, r4, #2
 80067a8:	2500      	movs	r5, #0
 80067aa:	42a5      	cmp	r5, r4
 80067ac:	d105      	bne.n	80067ba <__libc_init_array+0x2e>
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067b4:	4798      	blx	r3
 80067b6:	3501      	adds	r5, #1
 80067b8:	e7ee      	b.n	8006798 <__libc_init_array+0xc>
 80067ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067be:	4798      	blx	r3
 80067c0:	3501      	adds	r5, #1
 80067c2:	e7f2      	b.n	80067aa <__libc_init_array+0x1e>
 80067c4:	08007490 	.word	0x08007490
 80067c8:	08007490 	.word	0x08007490
 80067cc:	08007490 	.word	0x08007490
 80067d0:	08007494 	.word	0x08007494

080067d4 <memcpy>:
 80067d4:	b510      	push	{r4, lr}
 80067d6:	1e43      	subs	r3, r0, #1
 80067d8:	440a      	add	r2, r1
 80067da:	4291      	cmp	r1, r2
 80067dc:	d100      	bne.n	80067e0 <memcpy+0xc>
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067e8:	e7f7      	b.n	80067da <memcpy+0x6>

080067ea <memset>:
 80067ea:	4402      	add	r2, r0
 80067ec:	4603      	mov	r3, r0
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d100      	bne.n	80067f4 <memset+0xa>
 80067f2:	4770      	bx	lr
 80067f4:	f803 1b01 	strb.w	r1, [r3], #1
 80067f8:	e7f9      	b.n	80067ee <memset+0x4>
	...

080067fc <_init>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	bf00      	nop
 8006800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006802:	bc08      	pop	{r3}
 8006804:	469e      	mov	lr, r3
 8006806:	4770      	bx	lr

08006808 <_fini>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr
