
MEC825.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  08006b68  08006b68  00016b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800748c  0800748c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800748c  0800748c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800748c  0800748c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  20000018  080074ac  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e08  080074ac  00021e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ab9  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004148  00000000  00000000  00042b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00046c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  00048518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000057e4  00000000  00000000  00049c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c49a  00000000  00000000  0004f40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010941f  00000000  00000000  0006b8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174cc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006724  00000000  00000000  00174d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006b50 	.word	0x08006b50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	08006b50 	.word	0x08006b50

080001f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLED */
  OLEDHandle = osThreadNew(OLEDupdater, NULL, &OLED_attributes);
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <MX_FREERTOS_Init+0x28>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_FREERTOS_Init+0x2c>)
 80001fa:	f003 ff69 	bl	80040d0 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <MX_FREERTOS_Init+0x30>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of MOTOR */
  MOTORHandle = osThreadNew(MOTORupdater, NULL, &MOTOR_attributes);
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <MX_FREERTOS_Init+0x34>)
 8000206:	2100      	movs	r1, #0
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <MX_FREERTOS_Init+0x38>)
 800020a:	f003 ff61 	bl	80040d0 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <MX_FREERTOS_Init+0x3c>)
 8000212:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	080073fc 	.word	0x080073fc
 800021c:	08000231 	.word	0x08000231
 8000220:	20001d20 	.word	0x20001d20
 8000224:	08007420 	.word	0x08007420
 8000228:	08000321 	.word	0x08000321
 800022c:	20001d24 	.word	0x20001d24

08000230 <OLEDupdater>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OLEDupdater */
void OLEDupdater(void *argument)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OLEDupdater */
  /* Infinite loop */
	SSD1306_Init();  // initialise
 8000238:	f000 fcfc 	bl	8000c34 <SSD1306_Init>
	for(;;)
	{

	      SSD1306_Clear();
 800023c:	f000 ff1f 	bl	800107e <SSD1306_Clear>
	  if (motorAtBoundary == 1 && initialized == 1){
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <OLEDupdater+0xc8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d12f      	bne.n	80002a8 <OLEDupdater+0x78>
 8000248:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <OLEDupdater+0xcc>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d12b      	bne.n	80002a8 <OLEDupdater+0x78>

	      SSD1306_GotoXY (0,0);
 8000250:	2100      	movs	r1, #0
 8000252:	2000      	movs	r0, #0
 8000254:	f000 fe58 	bl	8000f08 <SSD1306_GotoXY>
	      SSD1306_Puts ("Fish Caught: 1" , &Font_7x10, 1);
 8000258:	2201      	movs	r2, #1
 800025a:	4929      	ldr	r1, [pc, #164]	; (8000300 <OLEDupdater+0xd0>)
 800025c:	4829      	ldr	r0, [pc, #164]	; (8000304 <OLEDupdater+0xd4>)
 800025e:	f000 fee9 	bl	8001034 <SSD1306_Puts>
	      SSD1306_GotoXY (0, 15);
 8000262:	210f      	movs	r1, #15
 8000264:	2000      	movs	r0, #0
 8000266:	f000 fe4f 	bl	8000f08 <SSD1306_GotoXY>
	      SSD1306_Puts ("Fish Rejected: 2", &Font_7x10, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	4924      	ldr	r1, [pc, #144]	; (8000300 <OLEDupdater+0xd0>)
 800026e:	4826      	ldr	r0, [pc, #152]	; (8000308 <OLEDupdater+0xd8>)
 8000270:	f000 fee0 	bl	8001034 <SSD1306_Puts>
	      SSD1306_GotoXY (0, 30);
 8000274:	211e      	movs	r1, #30
 8000276:	2000      	movs	r0, #0
 8000278:	f000 fe46 	bl	8000f08 <SSD1306_GotoXY>
	      SSD1306_Puts ("Action:Waiting For", &Font_7x10, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	4920      	ldr	r1, [pc, #128]	; (8000300 <OLEDupdater+0xd0>)
 8000280:	4822      	ldr	r0, [pc, #136]	; (800030c <OLEDupdater+0xdc>)
 8000282:	f000 fed7 	bl	8001034 <SSD1306_Puts>
	      SSD1306_GotoXY (0, 40);
 8000286:	2128      	movs	r1, #40	; 0x28
 8000288:	2000      	movs	r0, #0
 800028a:	f000 fe3d 	bl	8000f08 <SSD1306_GotoXY>
	      SSD1306_Puts ("Fish", &Font_7x10, 1);
 800028e:	2201      	movs	r2, #1
 8000290:	491b      	ldr	r1, [pc, #108]	; (8000300 <OLEDupdater+0xd0>)
 8000292:	481f      	ldr	r0, [pc, #124]	; (8000310 <OLEDupdater+0xe0>)
 8000294:	f000 fece 	bl	8001034 <SSD1306_Puts>
	      SSD1306_UpdateScreen(); //display
 8000298:	f000 fd90 	bl	8000dbc <SSD1306_UpdateScreen>
	      HAL_Delay (5000);
 800029c:	f241 3088 	movw	r0, #5000	; 0x1388
 80002a0:	f001 f8b8 	bl	8001414 <HAL_Delay>
	      SSD1306_Clear();
 80002a4:	f000 feeb 	bl	800107e <SSD1306_Clear>

	  }

	  if(motorAtBoundary == 0){
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <OLEDupdater+0xc8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d1c5      	bne.n	800023c <OLEDupdater+0xc>
	      SSD1306_GotoXY (0,0);
 80002b0:	2100      	movs	r1, #0
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 fe28 	bl	8000f08 <SSD1306_GotoXY>
	      SSD1306_Puts ("Motor Initializing " , &Font_7x10, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	4911      	ldr	r1, [pc, #68]	; (8000300 <OLEDupdater+0xd0>)
 80002bc:	4815      	ldr	r0, [pc, #84]	; (8000314 <OLEDupdater+0xe4>)
 80002be:	f000 feb9 	bl	8001034 <SSD1306_Puts>
	      SSD1306_GotoXY (0, 15);
 80002c2:	210f      	movs	r1, #15
 80002c4:	2000      	movs	r0, #0
 80002c6:	f000 fe1f 	bl	8000f08 <SSD1306_GotoXY>
	      SSD1306_Puts ("", &Font_7x10, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <OLEDupdater+0xd0>)
 80002ce:	4812      	ldr	r0, [pc, #72]	; (8000318 <OLEDupdater+0xe8>)
 80002d0:	f000 feb0 	bl	8001034 <SSD1306_Puts>
	      SSD1306_GotoXY (0, 30);
 80002d4:	211e      	movs	r1, #30
 80002d6:	2000      	movs	r0, #0
 80002d8:	f000 fe16 	bl	8000f08 <SSD1306_GotoXY>
	      SSD1306_Puts ("Please Wait", &Font_7x10, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	4908      	ldr	r1, [pc, #32]	; (8000300 <OLEDupdater+0xd0>)
 80002e0:	480e      	ldr	r0, [pc, #56]	; (800031c <OLEDupdater+0xec>)
 80002e2:	f000 fea7 	bl	8001034 <SSD1306_Puts>
	      SSD1306_UpdateScreen(); //display
 80002e6:	f000 fd69 	bl	8000dbc <SSD1306_UpdateScreen>
	      HAL_Delay (5000);
 80002ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80002ee:	f001 f891 	bl	8001414 <HAL_Delay>
	      SSD1306_Clear();
 80002f2:	f000 fec4 	bl	800107e <SSD1306_Clear>
	      SSD1306_Clear();
 80002f6:	e7a1      	b.n	800023c <OLEDupdater+0xc>
 80002f8:	20000034 	.word	0x20000034
 80002fc:	20000038 	.word	0x20000038
 8000300:	20000000 	.word	0x20000000
 8000304:	08006b78 	.word	0x08006b78
 8000308:	08006b88 	.word	0x08006b88
 800030c:	08006b9c 	.word	0x08006b9c
 8000310:	08006bb0 	.word	0x08006bb0
 8000314:	08006bb8 	.word	0x08006bb8
 8000318:	08006bcc 	.word	0x08006bcc
 800031c:	08006bd0 	.word	0x08006bd0

08000320 <MOTORupdater>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MOTORupdater */
void MOTORupdater(void *argument)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MOTORupdater */
  /* Infinite loop */
  for(;;)
  {

	  if (initialized == 0){ //reel
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MOTORupdater+0x74>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d101      	bne.n	8000334 <MOTORupdater+0x14>
		  motorInit();
 8000330:	f000 f836 	bl	80003a0 <motorInit>
	  }


	  if (passTime == 0){
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MOTORupdater+0x78>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d11e      	bne.n	800037a <MOTORupdater+0x5a>
		  if (pollCast == 0){
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <MOTORupdater+0x7c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d108      	bne.n	8000356 <MOTORupdater+0x36>
			  castPole(); 		//cast
 8000344:	f000 f870 	bl	8000428 <castPole>
			  pollCast =1;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MOTORupdater+0x7c>)
 800034a:	2201      	movs	r2, #1
 800034c:	601a      	str	r2, [r3, #0]
			  osDelay(5000);	//wait
 800034e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000352:	f003 ff4f 	bl	80041f4 <osDelay>
		  }
		  if (pollCast == 1){		//reel when fish detected
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MOTORupdater+0x7c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d108      	bne.n	8000370 <MOTORupdater+0x50>
			  reelPole();
 800035e:	f000 f893 	bl	8000488 <reelPole>
			  pollCast = 0;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MOTORupdater+0x7c>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
			  osDelay(10000);
 8000368:	f242 7010 	movw	r0, #10000	; 0x2710
 800036c:	f003 ff42 	bl	80041f4 <osDelay>
		  }
		  passTime++;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MOTORupdater+0x78>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	4a08      	ldr	r2, [pc, #32]	; (8000398 <MOTORupdater+0x78>)
 8000378:	6013      	str	r3, [r2, #0]
	  }

	  if (passTime == 1){
 800037a:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MOTORupdater+0x78>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d1d2      	bne.n	8000328 <MOTORupdater+0x8>

		  rejectFish(); // cast, wait, reel, unreel
 8000382:	f000 f8b1 	bl	80004e8 <rejectFish>
		  passTime++;
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <MOTORupdater+0x78>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	4a02      	ldr	r2, [pc, #8]	; (8000398 <MOTORupdater+0x78>)
 800038e:	6013      	str	r3, [r2, #0]
	  if (initialized == 0){ //reel
 8000390:	e7ca      	b.n	8000328 <MOTORupdater+0x8>
 8000392:	bf00      	nop
 8000394:	20000038 	.word	0x20000038
 8000398:	20000040 	.word	0x20000040
 800039c:	2000003c 	.word	0x2000003c

080003a0 <motorInit>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void motorInit(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);// set motor dir clockwise LOW for cc // SET MOTOR DIR SO THAT IT ROTATES BACKWARDS
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f001 fae0 	bl	8001974 <HAL_GPIO_WritePin>
	for(int x = 0; x < stepsPerRevolution; x++){
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	e029      	b.n	800040e <motorInit+0x6e>
		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) == 0){ //check if the motor has been initialized.
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	4817      	ldr	r0, [pc, #92]	; (800041c <motorInit+0x7c>)
 80003be:	f001 fac1 	bl	8001944 <HAL_GPIO_ReadPin>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d112      	bne.n	80003ee <motorInit+0x4e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2120      	movs	r1, #32
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d0:	f001 fad0 	bl	8001974 <HAL_GPIO_WritePin>
	        osDelay(15); //perfect speed, change to 20 for slow speed!
 80003d4:	200f      	movs	r0, #15
 80003d6:	f003 ff0d 	bl	80041f4 <osDelay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2120      	movs	r1, #32
 80003de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e2:	f001 fac7 	bl	8001974 <HAL_GPIO_WritePin>
	        osDelay(15);
 80003e6:	200f      	movs	r0, #15
 80003e8:	f003 ff04 	bl	80041f4 <osDelay>
 80003ec:	e00c      	b.n	8000408 <motorInit+0x68>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <motorInit+0x7c>)
 80003f6:	f001 fabd 	bl	8001974 <HAL_GPIO_WritePin>
//			osDelay(250);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
//			osDelay(250);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
//			osDelay(500);
			initialized =1;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <motorInit+0x80>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	601a      	str	r2, [r3, #0]
			motorAtBoundary = 1;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <motorInit+0x84>)
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
	        return;
 8000406:	e006      	b.n	8000416 <motorInit+0x76>
	for(int x = 0; x < stepsPerRevolution; x++){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3301      	adds	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	22c8      	movs	r2, #200	; 0xc8
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4293      	cmp	r3, r2
 8000414:	dbd1      	blt.n	80003ba <motorInit+0x1a>
	      }
	}

}
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	48000400 	.word	0x48000400
 8000420:	20000038 	.word	0x20000038
 8000424:	20000034 	.word	0x20000034

08000428 <castPole>:

void castPole(){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, RESET); //write dir
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000438:	f001 fa9c 	bl	8001974 <HAL_GPIO_WritePin>

	  for(int x = 0; x < 50; x++){
 800043c:	2300      	movs	r3, #0
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	e018      	b.n	8000474 <castPole+0x4c>
		  if(motorAtBoundary == 1){  //check for initialization
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <castPole+0x5c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d111      	bne.n	800046e <castPole+0x46>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2120      	movs	r1, #32
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f001 fa8f 	bl	8001974 <HAL_GPIO_WritePin>
	          osDelay(15); //perfect speed, change to 20 for slow speed!
 8000456:	200f      	movs	r0, #15
 8000458:	f003 fecc 	bl	80041f4 <osDelay>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2120      	movs	r1, #32
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f001 fa86 	bl	8001974 <HAL_GPIO_WritePin>
	          osDelay(15);
 8000468:	200f      	movs	r0, #15
 800046a:	f003 fec3 	bl	80041f4 <osDelay>
	  for(int x = 0; x < 50; x++){
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3301      	adds	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b31      	cmp	r3, #49	; 0x31
 8000478:	dde3      	ble.n	8000442 <castPole+0x1a>
		  }
	  }
	  //update OLED

}
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000034 	.word	0x20000034

08000488 <reelPole>:
void reelPole(){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, SET);  // high towards back of A frame
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f001 fa6c 	bl	8001974 <HAL_GPIO_WritePin>

	  for(int x = 0; x < 50; x++)
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e014      	b.n	80004cc <reelPole+0x44>
	  {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2120      	movs	r1, #32
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004aa:	f001 fa63 	bl	8001974 <HAL_GPIO_WritePin>
        osDelay(15); //perfect speed, change to 20 for slow speed!
 80004ae:	200f      	movs	r0, #15
 80004b0:	f003 fea0 	bl	80041f4 <osDelay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2120      	movs	r1, #32
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f001 fa5a 	bl	8001974 <HAL_GPIO_WritePin>
        osDelay(15);
 80004c0:	200f      	movs	r0, #15
 80004c2:	f003 fe97 	bl	80041f4 <osDelay>
	  for(int x = 0; x < 50; x++)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3301      	adds	r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b31      	cmp	r3, #49	; 0x31
 80004d0:	dde7      	ble.n	80004a2 <reelPole+0x1a>
	  }

	  fishCaught++;
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <reelPole+0x5c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3301      	adds	r3, #1
 80004d8:	4a02      	ldr	r2, [pc, #8]	; (80004e4 <reelPole+0x5c>)
 80004da:	6013      	str	r3, [r2, #0]

	  //update OLED

}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000044 	.word	0x20000044

080004e8 <rejectFish>:

//cast, reel, cast!
void rejectFish(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0


	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, RESET);  // CAST
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f001 fa3c 	bl	8001974 <HAL_GPIO_WritePin>
	  for(int x = 0; x < 50; x++){
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e014      	b.n	800052c <rejectFish+0x44>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2120      	movs	r1, #32
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f001 fa33 	bl	8001974 <HAL_GPIO_WritePin>
		  osDelay(15); //perfect speed, change to 20 for slow speed!
 800050e:	200f      	movs	r0, #15
 8000510:	f003 fe70 	bl	80041f4 <osDelay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2120      	movs	r1, #32
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f001 fa2a 	bl	8001974 <HAL_GPIO_WritePin>
		  osDelay(15);
 8000520:	200f      	movs	r0, #15
 8000522:	f003 fe67 	bl	80041f4 <osDelay>
	  for(int x = 0; x < 50; x++){
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3301      	adds	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b31      	cmp	r3, #49	; 0x31
 8000530:	dde7      	ble.n	8000502 <rejectFish+0x1a>
	  }

	  osDelay(10000);					//WAIT
 8000532:	f242 7010 	movw	r0, #10000	; 0x2710
 8000536:	f003 fe5d 	bl	80041f4 <osDelay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, SET); //REEL
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f001 fa16 	bl	8001974 <HAL_GPIO_WritePin>
	  for(int x = 0; x < 35; x++){
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	e018      	b.n	8000580 <rejectFish+0x98>
		  if(motorAtBoundary == 1){  //check for initialization
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <rejectFish+0xfc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d111      	bne.n	800057a <rejectFish+0x92>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2120      	movs	r1, #32
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f001 fa09 	bl	8001974 <HAL_GPIO_WritePin>
	          osDelay(15); //perfect speed, change to 20 for slow speed!
 8000562:	200f      	movs	r0, #15
 8000564:	f003 fe46 	bl	80041f4 <osDelay>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 fa00 	bl	8001974 <HAL_GPIO_WritePin>
	          osDelay(15);
 8000574:	200f      	movs	r0, #15
 8000576:	f003 fe3d 	bl	80041f4 <osDelay>
	  for(int x = 0; x < 35; x++){
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	3301      	adds	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b22      	cmp	r3, #34	; 0x22
 8000584:	dde3      	ble.n	800054e <rejectFish+0x66>
		  }
	  }

	  osDelay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f003 fe34 	bl	80041f4 <osDelay>

	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, RESET);  // UNREEL
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f001 f9ed 	bl	8001974 <HAL_GPIO_WritePin>
	  for(int x = 0; x < 35; x++)
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e014      	b.n	80005ca <rejectFish+0xe2>
	  {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f001 f9e4 	bl	8001974 <HAL_GPIO_WritePin>
      osDelay(15); //perfect speed, change to 20 for slow speed!
 80005ac:	200f      	movs	r0, #15
 80005ae:	f003 fe21 	bl	80041f4 <osDelay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f001 f9db 	bl	8001974 <HAL_GPIO_WritePin>
      osDelay(15);
 80005be:	200f      	movs	r0, #15
 80005c0:	f003 fe18 	bl	80041f4 <osDelay>
	  for(int x = 0; x < 35; x++)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b22      	cmp	r3, #34	; 0x22
 80005ce:	dde7      	ble.n	80005a0 <rejectFish+0xb8>
	  }

	  fishRejected++;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <rejectFish+0x100>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <rejectFish+0x100>)
 80005d8:	6013      	str	r3, [r2, #0]


}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000034 	.word	0x20000034
 80005e8:	20000048 	.word	0x20000048

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b5c      	ldr	r3, [pc, #368]	; (8000774 <MX_GPIO_Init+0x188>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a5b      	ldr	r2, [pc, #364]	; (8000774 <MX_GPIO_Init+0x188>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b59      	ldr	r3, [pc, #356]	; (8000774 <MX_GPIO_Init+0x188>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b56      	ldr	r3, [pc, #344]	; (8000774 <MX_GPIO_Init+0x188>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a55      	ldr	r2, [pc, #340]	; (8000774 <MX_GPIO_Init+0x188>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b53      	ldr	r3, [pc, #332]	; (8000774 <MX_GPIO_Init+0x188>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b50      	ldr	r3, [pc, #320]	; (8000774 <MX_GPIO_Init+0x188>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a4f      	ldr	r2, [pc, #316]	; (8000774 <MX_GPIO_Init+0x188>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <MX_GPIO_Init+0x188>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064a:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <MX_GPIO_Init+0x188>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a49      	ldr	r2, [pc, #292]	; (8000774 <MX_GPIO_Init+0x188>)
 8000650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b47      	ldr	r3, [pc, #284]	; (8000774 <MX_GPIO_Init+0x188>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000662:	f001 feb3 	bl	80023cc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_STEP_PIN_Pin|EXTERNAL_LED_BLUE_Pin|MOTOR_DIRECTION_PIN_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f001 f980 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Initialized_Pin|ONBOARD__RED__LED_Pin|ONBOARD__BLUE__LED_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 4191 	mov.w	r1, #18560	; 0x4880
 800067a:	483f      	ldr	r0, [pc, #252]	; (8000778 <MX_GPIO_Init+0x18c>)
 800067c:	f001 f97a 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ONBOARD__GREEN__LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000686:	483d      	ldr	r0, [pc, #244]	; (800077c <MX_GPIO_Init+0x190>)
 8000688:	f001 f974 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMERGENCY_SHUTDOWN_Pin;
 800068c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000692:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <MX_GPIO_Init+0x194>)
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMERGENCY_SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4836      	ldr	r0, [pc, #216]	; (800077c <MX_GPIO_Init+0x190>)
 80006a2:	f000 ffbd 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_PIN_Pin|EXTERNAL_LED_BLUE_Pin|MOTOR_DIRECTION_PIN_Pin;
 80006a6:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f000 ffad 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Initialized_Pin|ONBOARD__RED__LED_Pin|ONBOARD__BLUE__LED_Pin;
 80006c6:	f44f 4391 	mov.w	r3, #18560	; 0x4880
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4826      	ldr	r0, [pc, #152]	; (8000778 <MX_GPIO_Init+0x18c>)
 80006e0:	f000 ff9e 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_Pin;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <MX_GPIO_Init+0x194>)
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	4823      	ldr	r0, [pc, #140]	; (8000784 <MX_GPIO_Init+0x198>)
 80006f8:	f000 ff92 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC10 */
  GPIO_InitStruct.Pin = ONBOARD__GREEN__LED_Pin|GPIO_PIN_10;
 80006fc:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_GPIO_Init+0x190>)
 8000716:	f000 ff83 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800071a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4813      	ldr	r0, [pc, #76]	; (800077c <MX_GPIO_Init+0x190>)
 8000730:	f000 ff76 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_GPIO_Init+0x18c>)
 8000748:	f000 ff6a 	bl	8001620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2105      	movs	r1, #5
 8000750:	2017      	movs	r0, #23
 8000752:	f000 ff3b 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000756:	2017      	movs	r0, #23
 8000758:	f000 ff54 	bl	8001604 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2105      	movs	r1, #5
 8000760:	2028      	movs	r0, #40	; 0x28
 8000762:	f000 ff33 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000766:	2028      	movs	r0, #40	; 0x28
 8000768:	f000 ff4c 	bl	8001604 <HAL_NVIC_EnableIRQ>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400
 800077c:	48000800 	.word	0x48000800
 8000780:	10110000 	.word	0x10110000
 8000784:	48001800 	.word	0x48001800

08000788 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
//CALLBACK IMPLEMENTED FROM STM32L4XX_HAL_GPIO.C
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]

	//BELOW IS JUST CODE IN PLACE OF TOTAL SYSTEM SHUTDOWN.
	//EVERYTHING SHOULD STOP IN ITS PLACE IMMEDIATELY

	//NOTE: PIN 13 IS FOR ONBOARD EMERGENCY STOP BUTTON
	if (GPIO_Pin == GPIO_PIN_13){
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000798:	d14c      	bne.n	8000834 <HAL_GPIO_EXTI_Callback+0xac>
		if(isOn == false){
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <HAL_GPIO_EXTI_Callback+0x10c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f083 0301 	eor.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d071      	beq.n	800088c <HAL_GPIO_EXTI_Callback+0x104>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	483a      	ldr	r0, [pc, #232]	; (8000898 <HAL_GPIO_EXTI_Callback+0x110>)
 80007b0:	f001 f8e0 	bl	8001974 <HAL_GPIO_WritePin>
				isOn = true;
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <HAL_GPIO_EXTI_Callback+0x10c>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
				while (1){
					for(int i; i < 5000000; i++){
 80007ba:	e036      	b.n	800082a <HAL_GPIO_EXTI_Callback+0xa2>

						 	 	  SSD1306_GotoXY (0,0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fba2 	bl	8000f08 <SSD1306_GotoXY>
							      SSD1306_Puts ("EMERGENCY" , &Font_7x10, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	4935      	ldr	r1, [pc, #212]	; (800089c <HAL_GPIO_EXTI_Callback+0x114>)
 80007c8:	4835      	ldr	r0, [pc, #212]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x118>)
 80007ca:	f000 fc33 	bl	8001034 <SSD1306_Puts>
							      SSD1306_GotoXY (0, 15);
 80007ce:	210f      	movs	r1, #15
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fb99 	bl	8000f08 <SSD1306_GotoXY>
							      SSD1306_Puts ("BUTTON", &Font_7x10, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	4930      	ldr	r1, [pc, #192]	; (800089c <HAL_GPIO_EXTI_Callback+0x114>)
 80007da:	4832      	ldr	r0, [pc, #200]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x11c>)
 80007dc:	f000 fc2a 	bl	8001034 <SSD1306_Puts>
							      SSD1306_GotoXY (0, 30);
 80007e0:	211e      	movs	r1, #30
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 fb90 	bl	8000f08 <SSD1306_GotoXY>
							      SSD1306_Puts ("PRESSED", &Font_7x10, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	492c      	ldr	r1, [pc, #176]	; (800089c <HAL_GPIO_EXTI_Callback+0x114>)
 80007ec:	482e      	ldr	r0, [pc, #184]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x120>)
 80007ee:	f000 fc21 	bl	8001034 <SSD1306_Puts>
							      SSD1306_UpdateScreen(); //display
 80007f2:	f000 fae3 	bl	8000dbc <SSD1306_UpdateScreen>
							      SSD1306_InvertDisplay(1);   // invert the display
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 fa05 	bl	8000c06 <SSD1306_InvertDisplay>
							      HAL_Delay (3000);
 80007fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000800:	f000 fe08 	bl	8001414 <HAL_Delay>
							      SSD1306_InvertDisplay(0);   // invert the display
 8000804:	2000      	movs	r0, #0
 8000806:	f000 f9fe 	bl	8000c06 <SSD1306_InvertDisplay>
							      HAL_Delay (3000);
 800080a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800080e:	f000 fe01 	bl	8001414 <HAL_Delay>
							      SSD1306_InvertDisplay(1);   // invert the display
 8000812:	2001      	movs	r0, #1
 8000814:	f000 f9f7 	bl	8000c06 <SSD1306_InvertDisplay>
							      HAL_Delay (5000);
 8000818:	f241 3088 	movw	r0, #5000	; 0x1388
 800081c:	f000 fdfa 	bl	8001414 <HAL_Delay>
							      SSD1306_Clear();
 8000820:	f000 fc2d 	bl	800107e <SSD1306_Clear>
					for(int i; i < 5000000; i++){
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <HAL_GPIO_EXTI_Callback+0x124>)
 800082e:	4293      	cmp	r3, r2
 8000830:	ddc4      	ble.n	80007bc <HAL_GPIO_EXTI_Callback+0x34>
 8000832:	e7c2      	b.n	80007ba <HAL_GPIO_EXTI_Callback+0x32>
	}

// ELSE IF IT WAS THE LIMIT SWITCH THEN:
	else{

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083a:	4817      	ldr	r0, [pc, #92]	; (8000898 <HAL_GPIO_EXTI_Callback+0x110>)
 800083c:	f001 f89a 	bl	8001974 <HAL_GPIO_WritePin>
			//set the PB11 to high to signal initialization  of motor
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f001 f893 	bl	8001974 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800084e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000852:	f000 fddf 	bl	8001414 <HAL_Delay>

				  for(int x = 0; x < 10; x++){ //take 20 steps forward
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	e014      	b.n	8000886 <HAL_GPIO_EXTI_Callback+0xfe>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2120      	movs	r1, #32
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f001 f886 	bl	8001974 <HAL_GPIO_WritePin>
				      HAL_Delay(15); //perfect speed, change to 20 for slow speed!
 8000868:	200f      	movs	r0, #15
 800086a:	f000 fdd3 	bl	8001414 <HAL_Delay>
				      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f001 f87d 	bl	8001974 <HAL_GPIO_WritePin>
				      HAL_Delay(15);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 fdca 	bl	8001414 <HAL_Delay>
				  for(int x = 0; x < 10; x++){ //take 20 steps forward
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b09      	cmp	r3, #9
 800088a:	dde7      	ble.n	800085c <HAL_GPIO_EXTI_Callback+0xd4>

				  }
	}

}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000004c 	.word	0x2000004c
 8000898:	48000400 	.word	0x48000400
 800089c:	20000000 	.word	0x20000000
 80008a0:	08006bdc 	.word	0x08006bdc
 80008a4:	08006be8 	.word	0x08006be8
 80008a8:	08006bf0 	.word	0x08006bf0
 80008ac:	004c4b3f 	.word	0x004c4b3f

080008b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_I2C1_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <MX_I2C1_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_I2C1_Init+0x74>)
 80008bc:	2204      	movs	r2, #4
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_I2C1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_I2C1_Init+0x74>)
 80008ec:	f001 f872 	bl	80019d4 <HAL_I2C_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f6:	f000 f981 	bl	8000bfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_I2C1_Init+0x74>)
 80008fe:	f001 fc69 	bl	80021d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 f978 	bl	8000bfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_I2C1_Init+0x74>)
 8000910:	f001 fcab 	bl	800226a <HAL_I2CEx_ConfigDigitalFilter>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 f96f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20001d2c 	.word	0x20001d2c
 8000928:	40005400 	.word	0x40005400

0800092c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_I2C_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d128      	bne.n	80009a0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_I2C_MspInit+0x80>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_I2C_MspInit+0x80>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_I2C_MspInit+0x80>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096c:	2312      	movs	r3, #18
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000978:	2304      	movs	r3, #4
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <HAL_I2C_MspInit+0x84>)
 8000984:	f000 fe4c 	bl	8001620 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_I2C_MspInit+0x80>)
 800098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_I2C_MspInit+0x80>)
 800098e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000992:	6593      	str	r3, [r2, #88]	; 0x58
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_I2C_MspInit+0x80>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000400 	.word	0x48000400

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fcf3 	bl	80013a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f8a6 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff fe14 	bl	80005ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80009c4:	f7ff ff74 	bl	80008b0 <MX_I2C1_Init>
//      HAL_Delay(2000);
//
//      SSD1306_InvertDisplay(0);  // normalize the display


      SSD1306_Clear();
 80009c8:	f000 fb59 	bl	800107e <SSD1306_Clear>

      SSD1306_GotoXY (0,0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 fa9a 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("Fish Caught: 1" , &Font_7x10, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	4942      	ldr	r1, [pc, #264]	; (8000ae0 <main+0x12c>)
 80009d8:	4842      	ldr	r0, [pc, #264]	; (8000ae4 <main+0x130>)
 80009da:	f000 fb2b 	bl	8001034 <SSD1306_Puts>
      SSD1306_GotoXY (0, 15);
 80009de:	210f      	movs	r1, #15
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fa91 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("Fish Rejected: 2", &Font_7x10, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	493d      	ldr	r1, [pc, #244]	; (8000ae0 <main+0x12c>)
 80009ea:	483f      	ldr	r0, [pc, #252]	; (8000ae8 <main+0x134>)
 80009ec:	f000 fb22 	bl	8001034 <SSD1306_Puts>
      SSD1306_GotoXY (0, 30);
 80009f0:	211e      	movs	r1, #30
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 fa88 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("Action:Waiting For", &Font_7x10, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4939      	ldr	r1, [pc, #228]	; (8000ae0 <main+0x12c>)
 80009fc:	483b      	ldr	r0, [pc, #236]	; (8000aec <main+0x138>)
 80009fe:	f000 fb19 	bl	8001034 <SSD1306_Puts>
      SSD1306_GotoXY (0, 40);
 8000a02:	2128      	movs	r1, #40	; 0x28
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fa7f 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("Fish", &Font_7x10, 1);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4934      	ldr	r1, [pc, #208]	; (8000ae0 <main+0x12c>)
 8000a0e:	4838      	ldr	r0, [pc, #224]	; (8000af0 <main+0x13c>)
 8000a10:	f000 fb10 	bl	8001034 <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 8000a14:	f000 f9d2 	bl	8000dbc <SSD1306_UpdateScreen>
      HAL_Delay (5000);
 8000a18:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a1c:	f000 fcfa 	bl	8001414 <HAL_Delay>
      SSD1306_Clear();
 8000a20:	f000 fb2d 	bl	800107e <SSD1306_Clear>

      SSD1306_GotoXY (0,0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fa6e 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("Motor Initializing " , &Font_7x10, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	492c      	ldr	r1, [pc, #176]	; (8000ae0 <main+0x12c>)
 8000a30:	4830      	ldr	r0, [pc, #192]	; (8000af4 <main+0x140>)
 8000a32:	f000 faff 	bl	8001034 <SSD1306_Puts>
      SSD1306_GotoXY (0, 15);
 8000a36:	210f      	movs	r1, #15
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fa65 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("", &Font_7x10, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4927      	ldr	r1, [pc, #156]	; (8000ae0 <main+0x12c>)
 8000a42:	482d      	ldr	r0, [pc, #180]	; (8000af8 <main+0x144>)
 8000a44:	f000 faf6 	bl	8001034 <SSD1306_Puts>
      SSD1306_GotoXY (0, 30);
 8000a48:	211e      	movs	r1, #30
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 fa5c 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("Please Wait", &Font_7x10, 1);
 8000a50:	2201      	movs	r2, #1
 8000a52:	4923      	ldr	r1, [pc, #140]	; (8000ae0 <main+0x12c>)
 8000a54:	4829      	ldr	r0, [pc, #164]	; (8000afc <main+0x148>)
 8000a56:	f000 faed 	bl	8001034 <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 8000a5a:	f000 f9af 	bl	8000dbc <SSD1306_UpdateScreen>
      HAL_Delay (5000);
 8000a5e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a62:	f000 fcd7 	bl	8001414 <HAL_Delay>
      SSD1306_Clear();
 8000a66:	f000 fb0a 	bl	800107e <SSD1306_Clear>

      SSD1306_GotoXY (0,0);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fa4b 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("EMERGENCY" , &Font_7x10, 1);
 8000a72:	2201      	movs	r2, #1
 8000a74:	491a      	ldr	r1, [pc, #104]	; (8000ae0 <main+0x12c>)
 8000a76:	4822      	ldr	r0, [pc, #136]	; (8000b00 <main+0x14c>)
 8000a78:	f000 fadc 	bl	8001034 <SSD1306_Puts>
      SSD1306_GotoXY (0, 15);
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 fa42 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("BUTTON", &Font_7x10, 1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	4916      	ldr	r1, [pc, #88]	; (8000ae0 <main+0x12c>)
 8000a88:	481e      	ldr	r0, [pc, #120]	; (8000b04 <main+0x150>)
 8000a8a:	f000 fad3 	bl	8001034 <SSD1306_Puts>
      SSD1306_GotoXY (0, 30);
 8000a8e:	211e      	movs	r1, #30
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 fa39 	bl	8000f08 <SSD1306_GotoXY>
      SSD1306_Puts ("PRESSED", &Font_7x10, 1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	4911      	ldr	r1, [pc, #68]	; (8000ae0 <main+0x12c>)
 8000a9a:	481b      	ldr	r0, [pc, #108]	; (8000b08 <main+0x154>)
 8000a9c:	f000 faca 	bl	8001034 <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 8000aa0:	f000 f98c 	bl	8000dbc <SSD1306_UpdateScreen>
      SSD1306_InvertDisplay(1);   // invert the display
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 f8ae 	bl	8000c06 <SSD1306_InvertDisplay>
      HAL_Delay (3000);
 8000aaa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aae:	f000 fcb1 	bl	8001414 <HAL_Delay>
      SSD1306_InvertDisplay(0);   // invert the display
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8a7 	bl	8000c06 <SSD1306_InvertDisplay>
      HAL_Delay (3000);
 8000ab8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000abc:	f000 fcaa 	bl	8001414 <HAL_Delay>
      SSD1306_InvertDisplay(1);   // invert the display
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f000 f8a0 	bl	8000c06 <SSD1306_InvertDisplay>
      HAL_Delay (5000);
 8000ac6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aca:	f000 fca3 	bl	8001414 <HAL_Delay>
      SSD1306_Clear();
 8000ace:	f000 fad6 	bl	800107e <SSD1306_Clear>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ad2:	f003 fab3 	bl	800403c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ad6:	f7ff fb8b 	bl	80001f0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ada:	f003 fad3 	bl	8004084 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x12a>
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	08006bf8 	.word	0x08006bf8
 8000ae8:	08006c08 	.word	0x08006c08
 8000aec:	08006c1c 	.word	0x08006c1c
 8000af0:	08006c30 	.word	0x08006c30
 8000af4:	08006c38 	.word	0x08006c38
 8000af8:	08006c4c 	.word	0x08006c4c
 8000afc:	08006c50 	.word	0x08006c50
 8000b00:	08006c5c 	.word	0x08006c5c
 8000b04:	08006c68 	.word	0x08006c68
 8000b08:	08006c70 	.word	0x08006c70

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ba      	sub	sp, #232	; 0xe8
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b16:	2244      	movs	r2, #68	; 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f006 f810 	bl	8006b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	228c      	movs	r2, #140	; 0x8c
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 f802 	bl	8006b40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fc44 	bl	80023ec <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b6a:	f000 f847 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 f850 	bl	8002c38 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b9e:	f000 f82d 	bl	8000bfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fa65 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000bb8:	f000 f820 	bl	8000bfc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bbc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bc0:	f001 fbae 	bl	8002320 <HAL_PWREx_ControlVoltageScaling>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bca:	f000 f817 	bl	8000bfc <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	37e8      	adds	r7, #232	; 0xe8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bea:	f000 fbf3 	bl	80013d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40001000 	.word	0x40001000

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>

08000c06 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <SSD1306_InvertDisplay+0x1a>
 8000c14:	22a7      	movs	r2, #167	; 0xa7
 8000c16:	2100      	movs	r1, #0
 8000c18:	2078      	movs	r0, #120	; 0x78
 8000c1a:	f000 fa97 	bl	800114c <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8000c1e:	e004      	b.n	8000c2a <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8000c20:	22a6      	movs	r2, #166	; 0xa6
 8000c22:	2100      	movs	r1, #0
 8000c24:	2078      	movs	r0, #120	; 0x78
 8000c26:	f000 fa91 	bl	800114c <ssd1306_I2C_Write>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c3a:	f000 fa29 	bl	8001090 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c3e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c42:	2201      	movs	r2, #1
 8000c44:	2178      	movs	r1, #120	; 0x78
 8000c46:	485b      	ldr	r0, [pc, #364]	; (8000db4 <SSD1306_Init+0x180>)
 8000c48:	f001 f848 	bl	8001cdc <HAL_I2C_IsDeviceReady>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e0a9      	b.n	8000daa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c56:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c5a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c5c:	e002      	b.n	8000c64 <SSD1306_Init+0x30>
		p--;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f9      	bne.n	8000c5e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c6a:	22ae      	movs	r2, #174	; 0xae
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2078      	movs	r0, #120	; 0x78
 8000c70:	f000 fa6c 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	2078      	movs	r0, #120	; 0x78
 8000c7a:	f000 fa67 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c7e:	2210      	movs	r2, #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2078      	movs	r0, #120	; 0x78
 8000c84:	f000 fa62 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c88:	22b0      	movs	r2, #176	; 0xb0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2078      	movs	r0, #120	; 0x78
 8000c8e:	f000 fa5d 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c92:	22c8      	movs	r2, #200	; 0xc8
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	; 0x78
 8000c98:	f000 fa58 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f000 fa53 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	; 0x78
 8000cac:	f000 fa4e 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000cb0:	2240      	movs	r2, #64	; 0x40
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2078      	movs	r0, #120	; 0x78
 8000cb6:	f000 fa49 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cba:	2281      	movs	r2, #129	; 0x81
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	; 0x78
 8000cc0:	f000 fa44 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2078      	movs	r0, #120	; 0x78
 8000cca:	f000 fa3f 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cce:	22a1      	movs	r2, #161	; 0xa1
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	; 0x78
 8000cd4:	f000 fa3a 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000cd8:	22a6      	movs	r2, #166	; 0xa6
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2078      	movs	r0, #120	; 0x78
 8000cde:	f000 fa35 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000ce2:	22a8      	movs	r2, #168	; 0xa8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	; 0x78
 8000ce8:	f000 fa30 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000cec:	223f      	movs	r2, #63	; 0x3f
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2078      	movs	r0, #120	; 0x78
 8000cf2:	f000 fa2b 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cf6:	22a4      	movs	r2, #164	; 0xa4
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	; 0x78
 8000cfc:	f000 fa26 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d00:	22d3      	movs	r2, #211	; 0xd3
 8000d02:	2100      	movs	r1, #0
 8000d04:	2078      	movs	r0, #120	; 0x78
 8000d06:	f000 fa21 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	; 0x78
 8000d10:	f000 fa1c 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d14:	22d5      	movs	r2, #213	; 0xd5
 8000d16:	2100      	movs	r1, #0
 8000d18:	2078      	movs	r0, #120	; 0x78
 8000d1a:	f000 fa17 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d1e:	22f0      	movs	r2, #240	; 0xf0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	; 0x78
 8000d24:	f000 fa12 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d28:	22d9      	movs	r2, #217	; 0xd9
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2078      	movs	r0, #120	; 0x78
 8000d2e:	f000 fa0d 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d32:	2222      	movs	r2, #34	; 0x22
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	; 0x78
 8000d38:	f000 fa08 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d3c:	22da      	movs	r2, #218	; 0xda
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f000 fa03 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d46:	2212      	movs	r2, #18
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	; 0x78
 8000d4c:	f000 f9fe 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d50:	22db      	movs	r2, #219	; 0xdb
 8000d52:	2100      	movs	r1, #0
 8000d54:	2078      	movs	r0, #120	; 0x78
 8000d56:	f000 f9f9 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 f9f4 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d64:	228d      	movs	r2, #141	; 0x8d
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 f9ef 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d6e:	2214      	movs	r2, #20
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 f9ea 	bl	800114c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d78:	22af      	movs	r2, #175	; 0xaf
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 f9e5 	bl	800114c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d82:	222e      	movs	r2, #46	; 0x2e
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 f9e0 	bl	800114c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f843 	bl	8000e18 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d92:	f000 f813 	bl	8000dbc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <SSD1306_Init+0x184>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SSD1306_Init+0x184>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SSD1306_Init+0x184>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20001d2c 	.word	0x20001d2c
 8000db8:	20000450 	.word	0x20000450

08000dbc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e01d      	b.n	8000e04 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	3b50      	subs	r3, #80	; 0x50
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2078      	movs	r0, #120	; 0x78
 8000dd4:	f000 f9ba 	bl	800114c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2078      	movs	r0, #120	; 0x78
 8000dde:	f000 f9b5 	bl	800114c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000de2:	2210      	movs	r2, #16
 8000de4:	2100      	movs	r1, #0
 8000de6:	2078      	movs	r0, #120	; 0x78
 8000de8:	f000 f9b0 	bl	800114c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <SSD1306_UpdateScreen+0x58>)
 8000df2:	441a      	add	r2, r3
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	2078      	movs	r0, #120	; 0x78
 8000dfa:	f000 f95f 	bl	80010bc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3301      	adds	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d9de      	bls.n	8000dc8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000050 	.word	0x20000050

08000e18 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <SSD1306_Fill+0x14>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e000      	b.n	8000e2e <SSD1306_Fill+0x16>
 8000e2c:	23ff      	movs	r3, #255	; 0xff
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	4619      	mov	r1, r3
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <SSD1306_Fill+0x2c>)
 8000e36:	f005 fe83 	bl	8006b40 <memset>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000050 	.word	0x20000050

08000e48 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	460b      	mov	r3, r1
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	70fb      	strb	r3, [r7, #3]
	if (
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5e:	d848      	bhi.n	8000ef2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	2b3f      	cmp	r3, #63	; 0x3f
 8000e64:	d845      	bhi.n	8000ef2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <SSD1306_DrawPixel+0xb8>)
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf0c      	ite	eq
 8000e74:	2301      	moveq	r3, #1
 8000e76:	2300      	movne	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d11a      	bne.n	8000eb8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e82:	88fa      	ldrh	r2, [r7, #6]
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	01db      	lsls	r3, r3, #7
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b259      	sxtb	r1, r3
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	4603      	mov	r3, r0
 8000eac:	01db      	lsls	r3, r3, #7
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2c9      	uxtb	r1, r1
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000eb4:	54d1      	strb	r1, [r2, r3]
 8000eb6:	e01d      	b.n	8000ef4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	01db      	lsls	r3, r3, #7
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	b25a      	sxtb	r2, r3
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	b259      	sxtb	r1, r3
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	01db      	lsls	r3, r3, #7
 8000ee8:	4413      	add	r3, r2
 8000eea:	b2c9      	uxtb	r1, r1
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SSD1306_DrawPixel+0xbc>)
 8000eee:	54d1      	strb	r1, [r2, r3]
 8000ef0:	e000      	b.n	8000ef4 <SSD1306_DrawPixel+0xac>
		return;
 8000ef2:	bf00      	nop
	}
}
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000450 	.word	0x20000450
 8000f04:	20000050 	.word	0x20000050

08000f08 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	80fb      	strh	r3, [r7, #6]
 8000f14:	4613      	mov	r3, r2
 8000f16:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SSD1306_GotoXY+0x28>)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <SSD1306_GotoXY+0x28>)
 8000f20:	88bb      	ldrh	r3, [r7, #4]
 8000f22:	8053      	strh	r3, [r2, #2]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000450 	.word	0x20000450

08000f34 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <SSD1306_Putc+0xfc>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
	if (
 8000f50:	2b7f      	cmp	r3, #127	; 0x7f
 8000f52:	dc07      	bgt.n	8000f64 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <SSD1306_Putc+0xfc>)
 8000f56:	885b      	ldrh	r3, [r3, #2]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f60:	2b3f      	cmp	r3, #63	; 0x3f
 8000f62:	dd01      	ble.n	8000f68 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e05e      	b.n	8001026 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e04b      	b.n	8001006 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3b20      	subs	r3, #32
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	7849      	ldrb	r1, [r1, #1]
 8000f7a:	fb01 f303 	mul.w	r3, r1, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	440b      	add	r3, r1
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e030      	b.n	8000ff4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d010      	beq.n	8000fc4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fa4:	881a      	ldrh	r2, [r3, #0]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	b298      	uxth	r0, r3
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fb0:	885a      	ldrh	r2, [r3, #2]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	79ba      	ldrb	r2, [r7, #6]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff ff43 	bl	8000e48 <SSD1306_DrawPixel>
 8000fc2:	e014      	b.n	8000fee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b298      	uxth	r0, r3
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <SSD1306_Putc+0xfc>)
 8000fd2:	885a      	ldrh	r2, [r3, #2]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f7ff ff2d 	bl	8000e48 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d3c8      	bcc.n	8000f92 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	461a      	mov	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4293      	cmp	r3, r2
 8001010:	d3ad      	bcc.n	8000f6e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <SSD1306_Putc+0xfc>)
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <SSD1306_Putc+0xfc>)
 8001022:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001024:	79fb      	ldrb	r3, [r7, #7]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000450 	.word	0x20000450

08001034 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001042:	e012      	b.n	800106a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff71 	bl	8000f34 <SSD1306_Putc>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d002      	beq.n	8001064 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	e008      	b.n	8001076 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e8      	bne.n	8001044 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fec8 	bl	8000e18 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001088:	f7ff fe98 	bl	8000dbc <SSD1306_UpdateScreen>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <ssd1306_I2C_Init+0x28>)
 8001098:	607b      	str	r3, [r7, #4]
	while(p>0)
 800109a:	e002      	b.n	80010a2 <ssd1306_I2C_Init+0x12>
		p--;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f9      	bne.n	800109c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	0003d090 	.word	0x0003d090

080010bc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b0c7      	sub	sp, #284	; 0x11c
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4639      	mov	r1, r7
 80010c8:	600a      	str	r2, [r1, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	4622      	mov	r2, r4
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	4602      	mov	r2, r0
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	460a      	mov	r2, r1
 80010dc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	1dba      	adds	r2, r7, #6
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010ee:	e010      	b.n	8001112 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80010f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010f4:	463a      	mov	r2, r7
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	441a      	add	r2, r3
 80010fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010fe:	3301      	adds	r3, #1
 8001100:	7811      	ldrb	r1, [r2, #0]
 8001102:	f107 020c 	add.w	r2, r7, #12
 8001106:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001108:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800110c:	3301      	adds	r3, #1
 800110e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001112:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001116:	b29b      	uxth	r3, r3
 8001118:	1d3a      	adds	r2, r7, #4
 800111a:	8812      	ldrh	r2, [r2, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8e7      	bhi.n	80010f0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b299      	uxth	r1, r3
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	b29b      	uxth	r3, r3
 800112e:	f107 020c 	add.w	r2, r7, #12
 8001132:	200a      	movs	r0, #10
 8001134:	9000      	str	r0, [sp, #0]
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <ssd1306_I2C_WriteMulti+0x8c>)
 8001138:	f000 fcdc 	bl	8001af4 <HAL_I2C_Master_Transmit>
}
 800113c:	bf00      	nop
 800113e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	bf00      	nop
 8001148:	20001d2c 	.word	0x20001d2c

0800114c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	460b      	mov	r3, r1
 8001158:	71bb      	strb	r3, [r7, #6]
 800115a:	4613      	mov	r3, r2
 800115c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	b299      	uxth	r1, r3
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	230a      	movs	r3, #10
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2302      	movs	r3, #2
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <ssd1306_I2C_Write+0x38>)
 8001176:	f000 fcbd 	bl	8001af4 <HAL_I2C_Master_Transmit>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20001d2c 	.word	0x20001d2c

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_MspInit+0x4c>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_MspInit+0x4c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_MspInit+0x4c>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_MspInit+0x4c>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	210f      	movs	r1, #15
 80011c2:	f06f 0001 	mvn.w	r0, #1
 80011c6:	f000 fa01 	bl	80015cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	2036      	movs	r0, #54	; 0x36
 80011ee:	f000 f9ed 	bl	80015cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011f2:	2036      	movs	r0, #54	; 0x36
 80011f4:	f000 fa06 	bl	8001604 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_InitTick+0x9c>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_InitTick+0x9c>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6593      	str	r3, [r2, #88]	; 0x58
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_InitTick+0x9c>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fe9c 	bl	8002f58 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001220:	f001 fe84 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8001224:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	4a13      	ldr	r2, [pc, #76]	; (8001278 <HAL_InitTick+0xa0>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3b01      	subs	r3, #1
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_InitTick+0xa4>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_InitTick+0xa8>)
 8001238:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_InitTick+0xa4>)
 800123c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001240:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_InitTick+0xa4>)
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_InitTick+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_InitTick+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_InitTick+0xa4>)
 8001256:	f002 fbdb 	bl	8003a10 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d104      	bne.n	800126a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <HAL_InitTick+0xa4>)
 8001262:	f002 fc37 	bl	8003ad4 <HAL_TIM_Base_Start_IT>
 8001266:	4603      	mov	r3, r0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3730      	adds	r7, #48	; 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	431bde83 	.word	0x431bde83
 800127c:	20001d78 	.word	0x20001d78
 8001280:	40001000 	.word	0x40001000

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012b4:	2040      	movs	r0, #64	; 0x40
 80012b6:	f000 fb75 	bl	80019a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c6:	f000 fb6d 	bl	80019a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM6_DAC_IRQHandler+0x10>)
 80012d6:	f002 fc6d 	bl	8003bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20001d78 	.word	0x20001d78

080012e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <SystemInit+0x64>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a16      	ldr	r2, [pc, #88]	; (8001348 <SystemInit+0x64>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <SystemInit+0x68>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <SystemInit+0x68>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <SystemInit+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <SystemInit+0x68>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <SystemInit+0x68>)
 8001310:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001314:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001318:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <SystemInit+0x68>)
 800131c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001320:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <SystemInit+0x68>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <SystemInit+0x68>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <SystemInit+0x68>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SystemInit+0x64>)
 8001336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133a:	609a      	str	r2, [r3, #8]
#endif
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	40021000 	.word	0x40021000

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff ffc6 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001358:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800135a:	e003      	b.n	8001364 <LoopCopyDataInit>

0800135c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800135e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001360:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001362:	3104      	adds	r1, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001368:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800136c:	d3f6      	bcc.n	800135c <CopyDataInit>
	ldr	r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001370:	e002      	b.n	8001378 <LoopFillZerobss>

08001372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001372:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001374:	f842 3b04 	str.w	r3, [r2], #4

08001378 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <LoopForever+0x16>)
	cmp	r2, r3
 800137a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800137c:	d3f9      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f005 fbad 	bl	8006adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff fb17 	bl	80009b4 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 800138c:	08007494 	.word	0x08007494
	ldr	r0, =_sdata
 8001390:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001394:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001398:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 800139c:	20001e08 	.word	0x20001e08

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>

080013a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f902 	bl	80015b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ff10 	bl	80011d8 <HAL_InitTick>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	e001      	b.n	80013c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c4:	f7ff fee0 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000010 	.word	0x20000010
 80013f8:	20001dc4 	.word	0x20001dc4

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20001dc4 	.word	0x20001dc4

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000010 	.word	0x20000010

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff4c 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015de:	f7ff ff61 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	6978      	ldr	r0, [r7, #20]
 80015ea:	f7ff ffb1 	bl	8001550 <NVIC_EncodePriority>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff80 	bl	80014fc <__NVIC_SetPriority>
}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff54 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	e166      	b.n	80018fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8158 	beq.w	80018f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d00b      	beq.n	8001668 <HAL_GPIO_Init+0x48>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165c:	2b11      	cmp	r3, #17
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0xea>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b12      	cmp	r3, #18
 8001708:	d123      	bne.n	8001752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	6939      	ldr	r1, [r7, #16]
 800174e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0203 	and.w	r2, r3, #3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80b2 	beq.w	80018f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001794:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_GPIO_Init+0x2fc>)
 8001796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001798:	4a60      	ldr	r2, [pc, #384]	; (800191c <HAL_GPIO_Init+0x2fc>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6613      	str	r3, [r2, #96]	; 0x60
 80017a0:	4b5e      	ldr	r3, [pc, #376]	; (800191c <HAL_GPIO_Init+0x2fc>)
 80017a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ac:	4a5c      	ldr	r2, [pc, #368]	; (8001920 <HAL_GPIO_Init+0x300>)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017d6:	d02b      	beq.n	8001830 <HAL_GPIO_Init+0x210>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_GPIO_Init+0x304>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d025      	beq.n	800182c <HAL_GPIO_Init+0x20c>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_GPIO_Init+0x308>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d01f      	beq.n	8001828 <HAL_GPIO_Init+0x208>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_GPIO_Init+0x30c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d019      	beq.n	8001824 <HAL_GPIO_Init+0x204>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_GPIO_Init+0x310>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d013      	beq.n	8001820 <HAL_GPIO_Init+0x200>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <HAL_GPIO_Init+0x314>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00d      	beq.n	800181c <HAL_GPIO_Init+0x1fc>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a4d      	ldr	r2, [pc, #308]	; (8001938 <HAL_GPIO_Init+0x318>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0x1f8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_GPIO_Init+0x31c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_GPIO_Init+0x1f4>
 8001810:	2307      	movs	r3, #7
 8001812:	e00e      	b.n	8001832 <HAL_GPIO_Init+0x212>
 8001814:	2308      	movs	r3, #8
 8001816:	e00c      	b.n	8001832 <HAL_GPIO_Init+0x212>
 8001818:	2306      	movs	r3, #6
 800181a:	e00a      	b.n	8001832 <HAL_GPIO_Init+0x212>
 800181c:	2305      	movs	r3, #5
 800181e:	e008      	b.n	8001832 <HAL_GPIO_Init+0x212>
 8001820:	2304      	movs	r3, #4
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x212>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x212>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x212>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x212>
 8001830:	2300      	movs	r3, #0
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001842:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_GPIO_Init+0x300>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_GPIO_Init+0x320>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001874:	4a32      	ldr	r2, [pc, #200]	; (8001940 <HAL_GPIO_Init+0x320>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_GPIO_Init+0x320>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189e:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_GPIO_Init+0x320>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_GPIO_Init+0x320>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_GPIO_Init+0x320>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_GPIO_Init+0x320>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <HAL_GPIO_Init+0x320>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	f47f ae91 	bne.w	8001630 <HAL_GPIO_Init+0x10>
  }
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	48001000 	.word	0x48001000
 8001934:	48001400 	.word	0x48001400
 8001938:	48001800 	.word	0x48001800
 800193c:	48001c00 	.word	0x48001c00
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001990:	e002      	b.n	8001998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fee0 	bl	8000788 <HAL_GPIO_EXTI_Callback>
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e081      	b.n	8001aea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe ff96 	bl	800092c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	e006      	b.n	8001a5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d104      	bne.n	8001a6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	ea42 0103 	orr.w	r1, r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	021a      	lsls	r2, r3, #8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69d9      	ldr	r1, [r3, #28]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	461a      	mov	r2, r3
 8001b00:	460b      	mov	r3, r1
 8001b02:	817b      	strh	r3, [r7, #10]
 8001b04:	4613      	mov	r3, r2
 8001b06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	f040 80da 	bne.w	8001cca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2C_Master_Transmit+0x30>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0d3      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1d8>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fc66 	bl	80013fc <HAL_GetTick>
 8001b30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2319      	movs	r3, #25
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f9f7 	bl	8001f32 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0be      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2221      	movs	r2, #33	; 0x21
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	893a      	ldrh	r2, [r7, #8]
 8001b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2bff      	cmp	r3, #255	; 0xff
 8001b7e:	d90e      	bls.n	8001b9e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	22ff      	movs	r2, #255	; 0xff
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 faee 	bl	8002178 <I2C_TransferConfig>
 8001b9c:	e06c      	b.n	8001c78 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	8979      	ldrh	r1, [r7, #10]
 8001bb0:	4b48      	ldr	r3, [pc, #288]	; (8001cd4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fadd 	bl	8002178 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001bbe:	e05b      	b.n	8001c78 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	6a39      	ldr	r1, [r7, #32]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f9f4 	bl	8001fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e07b      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d034      	beq.n	8001c78 <HAL_I2C_Master_Transmit+0x184>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d130      	bne.n	8001c78 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f986 	bl	8001f32 <I2C_WaitOnFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e04d      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2bff      	cmp	r3, #255	; 0xff
 8001c38:	d90e      	bls.n	8001c58 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	22ff      	movs	r2, #255	; 0xff
 8001c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	8979      	ldrh	r1, [r7, #10]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fa91 	bl	8002178 <I2C_TransferConfig>
 8001c56:	e00f      	b.n	8001c78 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	8979      	ldrh	r1, [r7, #10]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa80 	bl	8002178 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d19e      	bne.n	8001bc0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f9d3 	bl	8002032 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e01a      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001caa:	400b      	ands	r3, r1
 8001cac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	80002000 	.word	0x80002000
 8001cd8:	fe00e800 	.word	0xfe00e800

08001cdc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	f040 80f1 	bne.w	8001ee0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e0e7      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_I2C_IsDeviceReady+0x44>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0e0      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2224      	movs	r2, #36	; 0x24
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_I2C_IsDeviceReady+0x72>
 8001d3e:	897b      	ldrh	r3, [r7, #10]
 8001d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d4c:	e004      	b.n	8001d58 <HAL_I2C_IsDeviceReady+0x7c>
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fb4d 	bl	80013fc <HAL_GetTick>
 8001d62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	bf0c      	ite	eq
 8001d72:	2301      	moveq	r3, #1
 8001d74:	2300      	movne	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d90:	e034      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d01a      	beq.n	8001dd0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff fb2f 	bl	80013fc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <HAL_I2C_IsDeviceReady+0xd4>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e088      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	bf0c      	ite	eq
 8001dde:	2301      	moveq	r3, #1
 8001de0:	2300      	movne	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001dfc:	7ffb      	ldrb	r3, [r7, #31]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <HAL_I2C_IsDeviceReady+0x12c>
 8001e02:	7fbb      	ldrb	r3, [r7, #30]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0c4      	beq.n	8001d92 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d01a      	beq.n	8001e4c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2120      	movs	r1, #32
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f886 	bl	8001f32 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e058      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2220      	movs	r2, #32
 8001e36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e04a      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	2120      	movs	r1, #32
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f86b 	bl	8001f32 <I2C_WaitOnFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e03d      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2220      	movs	r2, #32
 8001e74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d118      	bne.n	8001eb0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2120      	movs	r1, #32
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f84a 	bl	8001f32 <I2C_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e01c      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2220      	movs	r2, #32
 8001eae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	f63f af3b 	bhi.w	8001d36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d103      	bne.n	8001f08 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d007      	beq.n	8001f26 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	619a      	str	r2, [r3, #24]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f42:	e022      	b.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d01e      	beq.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4c:	f7ff fa56 	bl	80013fc <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d302      	bcc.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d113      	bne.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f043 0220 	orr.w	r2, r3, #32
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d0cd      	beq.n	8001f44 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fbe:	e02c      	b.n	800201a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f871 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e02a      	b.n	800202a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d01e      	beq.n	800201a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fdc:	f7ff fa0e 	bl	80013fc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d113      	bne.n	800201a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d1cb      	bne.n	8001fc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800203e:	e028      	b.n	8002092 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f831 	bl	80020ac <I2C_IsAcknowledgeFailed>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e026      	b.n	80020a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002054:	f7ff f9d2 	bl	80013fc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	429a      	cmp	r2, r3
 8002062:	d302      	bcc.n	800206a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d113      	bne.n	8002092 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e007      	b.n	80020a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b20      	cmp	r3, #32
 800209e:	d1cf      	bne.n	8002040 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d151      	bne.n	800216a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c6:	e022      	b.n	800210e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d01e      	beq.n	800210e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d0:	f7ff f994 	bl	80013fc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d302      	bcc.n	80020e6 <I2C_IsAcknowledgeFailed+0x3a>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e02e      	b.n	800216c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b20      	cmp	r3, #32
 800211a:	d1d5      	bne.n	80020c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2220      	movs	r2, #32
 800212a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fedc 	bl	8001eea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <I2C_IsAcknowledgeFailed+0xc8>)
 800213e:	400b      	ands	r3, r1
 8002140:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f043 0204 	orr.w	r2, r3, #4
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	fe00e800 	.word	0xfe00e800

08002178 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	817b      	strh	r3, [r7, #10]
 8002186:	4613      	mov	r3, r2
 8002188:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	0d5b      	lsrs	r3, r3, #21
 8002194:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <I2C_TransferConfig+0x58>)
 800219a:	430b      	orrs	r3, r1
 800219c:	43db      	mvns	r3, r3
 800219e:	ea02 0103 	and.w	r1, r2, r3
 80021a2:	897b      	ldrh	r3, [r7, #10]
 80021a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021a8:	7a7b      	ldrb	r3, [r7, #9]
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	03ff63ff 	.word	0x03ff63ff

080021d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d138      	bne.n	800225c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e032      	b.n	800225e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b20      	cmp	r3, #32
 800227e:	d139      	bne.n	80022f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800228a:	2302      	movs	r3, #2
 800228c:	e033      	b.n	80022f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2224      	movs	r2, #36	; 0x24
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_PWREx_GetVoltageRange+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40007000 	.word	0x40007000

08002320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232e:	d130      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233c:	d038      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002364:	e002      	b.n	800236c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3b01      	subs	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002378:	d102      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x60>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f2      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238c:	d110      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e00f      	b.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d007      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000
 80023c4:	20000008 	.word	0x20000008
 80023c8:	431bde83 	.word	0x431bde83

080023cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023da:	6053      	str	r3, [r2, #4]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40007000 	.word	0x40007000

080023ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f000 bc16 	b.w	8002c2c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002400:	4ba0      	ldr	r3, [pc, #640]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800240a:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80e4 	beq.w	80025ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_RCC_OscConfig+0x4c>
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	f040 808b 	bne.w	8002546 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b01      	cmp	r3, #1
 8002434:	f040 8087 	bne.w	8002546 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002438:	4b92      	ldr	r3, [pc, #584]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_OscConfig+0x64>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e3ed      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <HAL_RCC_OscConfig+0x7e>
 8002460:	4b88      	ldr	r3, [pc, #544]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002468:	e005      	b.n	8002476 <HAL_RCC_OscConfig+0x8a>
 800246a:	4b86      	ldr	r3, [pc, #536]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002476:	4293      	cmp	r3, r2
 8002478:	d223      	bcs.n	80024c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fd9c 	bl	8002fbc <RCC_SetFlashLatencyFromMSIRange>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e3ce      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800248e:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7c      	ldr	r2, [pc, #496]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b7a      	ldr	r3, [pc, #488]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4977      	ldr	r1, [pc, #476]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	4972      	ldr	r1, [pc, #456]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e025      	b.n	800250e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c2:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6f      	ldr	r2, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024c8:	f043 0308 	orr.w	r3, r3, #8
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	496a      	ldr	r1, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	4965      	ldr	r1, [pc, #404]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fd5c 	bl	8002fbc <RCC_SetFlashLatencyFromMSIRange>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e38e      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800250e:	f000 fc75 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	495a      	ldr	r1, [pc, #360]	; (8002688 <HAL_RCC_OscConfig+0x29c>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_OscConfig+0x2a0>)
 800252c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800252e:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_RCC_OscConfig+0x2a4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fe50 	bl	80011d8 <HAL_InitTick>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d052      	beq.n	80025e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	e372      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d032      	beq.n	80025b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800254e:	4b4d      	ldr	r3, [pc, #308]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a4c      	ldr	r2, [pc, #304]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800255a:	f7fe ff4f 	bl	80013fc <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002562:	f7fe ff4b 	bl	80013fc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e35b      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3f      	ldr	r2, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	493a      	ldr	r1, [pc, #232]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	4935      	ldr	r1, [pc, #212]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	e01a      	b.n	80025ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a32      	ldr	r2, [pc, #200]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025c0:	f7fe ff1c 	bl	80013fc <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c8:	f7fe ff18 	bl	80013fc <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e328      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1dc>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d073      	beq.n	80026de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_OscConfig+0x21c>
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d10e      	bne.n	8002620 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d063      	beq.n	80026dc <HAL_RCC_OscConfig+0x2f0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d15f      	bne.n	80026dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e305      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x24c>
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0x288>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x270>
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0x288>
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a05      	ldr	r2, [pc, #20]	; (8002684 <HAL_RCC_OscConfig+0x298>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe febe 	bl	80013fc <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002682:	e010      	b.n	80026a6 <HAL_RCC_OscConfig+0x2ba>
 8002684:	40021000 	.word	0x40021000
 8002688:	08007444 	.word	0x08007444
 800268c:	20000008 	.word	0x20000008
 8002690:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe feb2 	bl	80013fc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e2c2      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	4baf      	ldr	r3, [pc, #700]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x2a8>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fea2 	bl	80013fc <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fe9e 	bl	80013fc <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e2ae      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ce:	4ba5      	ldr	r3, [pc, #660]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x2d0>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d060      	beq.n	80027ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_OscConfig+0x310>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d119      	bne.n	800272a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d116      	bne.n	800272a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	4b99      	ldr	r3, [pc, #612]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_OscConfig+0x328>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e28b      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b93      	ldr	r3, [pc, #588]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	4990      	ldr	r1, [pc, #576]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002728:	e040      	b.n	80027ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d023      	beq.n	800277a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002732:	4b8c      	ldr	r3, [pc, #560]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a8b      	ldr	r2, [pc, #556]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7fe fe5d 	bl	80013fc <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002746:	f7fe fe59 	bl	80013fc <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e269      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002758:	4b82      	ldr	r3, [pc, #520]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b7f      	ldr	r3, [pc, #508]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	497c      	ldr	r1, [pc, #496]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
 8002778:	e018      	b.n	80027ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	4b7a      	ldr	r3, [pc, #488]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a79      	ldr	r2, [pc, #484]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fe39 	bl	80013fc <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe fe35 	bl	80013fc <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e245      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027a0:	4b70      	ldr	r3, [pc, #448]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03c      	beq.n	8002832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01c      	beq.n	80027fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	4a67      	ldr	r2, [pc, #412]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fe14 	bl	80013fc <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fe10 	bl	80013fc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e220      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ea:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ef      	beq.n	80027d8 <HAL_RCC_OscConfig+0x3ec>
 80027f8:	e01b      	b.n	8002832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fa:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fdf7 	bl	80013fc <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fdf3 	bl	80013fc <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e203      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002824:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ef      	bne.n	8002812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80a6 	beq.w	800298c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002844:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10d      	bne.n	800286c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b44      	ldr	r3, [pc, #272]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	4a43      	ldr	r2, [pc, #268]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	6593      	str	r3, [r2, #88]	; 0x58
 800285c:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002868:	2301      	movs	r3, #1
 800286a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286c:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCC_OscConfig+0x57c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d118      	bne.n	80028aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_OscConfig+0x57c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3a      	ldr	r2, [pc, #232]	; (8002968 <HAL_RCC_OscConfig+0x57c>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002884:	f7fe fdba 	bl	80013fc <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fe fdb6 	bl	80013fc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1c6      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289e:	4b32      	ldr	r3, [pc, #200]	; (8002968 <HAL_RCC_OscConfig+0x57c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4d8>
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c2:	e024      	b.n	800290e <HAL_RCC_OscConfig+0x522>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d110      	bne.n	80028ee <HAL_RCC_OscConfig+0x502>
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	4a24      	ldr	r2, [pc, #144]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	4a20      	ldr	r2, [pc, #128]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ec:	e00f      	b.n	800290e <HAL_RCC_OscConfig+0x522>
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7fe fd71 	bl	80013fc <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fd6d 	bl	80013fc <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e17b      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_OscConfig+0x578>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ed      	beq.n	800291e <HAL_RCC_OscConfig+0x532>
 8002942:	e01a      	b.n	800297a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe fd5a 	bl	80013fc <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800294a:	e00f      	b.n	800296c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe fd56 	bl	80013fc <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d906      	bls.n	800296c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e164      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800296c:	4ba8      	ldr	r3, [pc, #672]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e8      	bne.n	800294c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4ba3      	ldr	r3, [pc, #652]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	4aa2      	ldr	r2, [pc, #648]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d03c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01c      	beq.n	80029da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029a0:	4b9b      	ldr	r3, [pc, #620]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 80029a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029a6:	4a9a      	ldr	r2, [pc, #616]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fd24 	bl	80013fc <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b8:	f7fe fd20 	bl	80013fc <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e130      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029ca:	4b91      	ldr	r3, [pc, #580]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 80029cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ef      	beq.n	80029b8 <HAL_RCC_OscConfig+0x5cc>
 80029d8:	e01b      	b.n	8002a12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029da:	4b8d      	ldr	r3, [pc, #564]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 80029dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029e0:	4a8b      	ldr	r2, [pc, #556]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7fe fd07 	bl	80013fc <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f2:	f7fe fd03 	bl	80013fc <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e113      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a04:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ef      	bne.n	80029f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8107 	beq.w	8002c2a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	f040 80cb 	bne.w	8002bbc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a26:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0203 	and.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d12c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	3b01      	subs	r3, #1
 8002a46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d123      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d11b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d113      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d109      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d06d      	beq.n	8002b70 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d068      	beq.n	8002b6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a9a:	4b5d      	ldr	r3, [pc, #372]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0ba      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a55      	ldr	r2, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac2:	f7fe fc9b 	bl	80013fc <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fc97 	bl	80013fc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0a7      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002adc:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae8:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_RCC_OscConfig+0x828>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002af8:	3a01      	subs	r2, #1
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	4311      	orrs	r1, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b02:	0212      	lsls	r2, r2, #8
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b0a:	0852      	lsrs	r2, r2, #1
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	0552      	lsls	r2, r2, #21
 8002b10:	4311      	orrs	r1, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b16:	0852      	lsrs	r2, r2, #1
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0652      	lsls	r2, r2, #25
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b22:	06d2      	lsls	r2, r2, #27
 8002b24:	430a      	orrs	r2, r1
 8002b26:	493a      	ldr	r1, [pc, #232]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a37      	ldr	r2, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b44:	f7fe fc5a 	bl	80013fc <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fc56 	bl	80013fc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e066      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6a:	e05e      	b.n	8002c2a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e05d      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d156      	bne.n	8002c2a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b94:	f7fe fc32 	bl	80013fc <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fc2e 	bl	80013fc <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e03e      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x7b0>
 8002bba:	e036      	b.n	8002c2a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d031      	beq.n	8002c26 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002be0:	f023 0303 	bic.w	r3, r3, #3
 8002be4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <HAL_RCC_OscConfig+0x824>)
 8002bec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fc01 	bl	80013fc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfc:	e00c      	b.n	8002c18 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fbfd 	bl	80013fc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d905      	bls.n	8002c18 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e00d      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_OscConfig+0x848>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ec      	bne.n	8002bfe <HAL_RCC_OscConfig+0x812>
 8002c24:	e001      	b.n	8002c2a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0c8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d910      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0207 	bic.w	r2, r3, #7
 8002c62:	4961      	ldr	r1, [pc, #388]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0b0      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d04c      	beq.n	8002d22 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c90:	4b56      	ldr	r3, [pc, #344]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d121      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e09e      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca8:	4b50      	ldr	r3, [pc, #320]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d115      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e092      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc0:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e086      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd0:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e07e      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ce0:	4b42      	ldr	r3, [pc, #264]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 0203 	bic.w	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	493f      	ldr	r1, [pc, #252]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fb83 	bl	80013fc <HAL_GetTick>
 8002cf6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfa:	f7fe fb7f 	bl	80013fc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e066      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 020c 	and.w	r2, r3, #12
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d1eb      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	492c      	ldr	r1, [pc, #176]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d210      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4924      	ldr	r1, [pc, #144]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e036      	b.n	8002dde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4918      	ldr	r1, [pc, #96]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4910      	ldr	r1, [pc, #64]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dae:	f000 f825 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_RCC_ClockConfig+0x1b4>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	490c      	ldr	r1, [pc, #48]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	5ccb      	ldrb	r3, [r1, r3]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fa00 	bl	80011d8 <HAL_InitTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08007444 	.word	0x08007444
 8002df4:	20000008 	.word	0x20000008
 8002df8:	2000000c 	.word	0x2000000c

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d121      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11e      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e005      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e58:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e74:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e004      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d134      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ea0:	e005      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eaa:	617b      	str	r3, [r7, #20]
      break;
 8002eac:	e002      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	617b      	str	r3, [r7, #20]
      break;
 8002eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	fb02 f203 	mul.w	r2, r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	0e5b      	lsrs	r3, r3, #25
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	0800745c 	.word	0x0800745c
 8002f0c:	00f42400 	.word	0x00f42400
 8002f10:	007a1200 	.word	0x007a1200

08002f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000008 	.word	0x20000008

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f30:	f7ff fff0 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4904      	ldr	r1, [pc, #16]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08007454 	.word	0x08007454

08002f58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	220f      	movs	r2, #15
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RCC_GetClockConfig+0x60>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	601a      	str	r2, [r3, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40022000 	.word	0x40022000

08002fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fd4:	f7ff f996 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8002fd8:	6178      	str	r0, [r7, #20]
 8002fda:	e014      	b.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	4b25      	ldr	r3, [pc, #148]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	4a24      	ldr	r2, [pc, #144]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe8:	4b22      	ldr	r3, [pc, #136]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ff4:	f7ff f986 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8002ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300c:	d10b      	bne.n	8003026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d919      	bls.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2ba0      	cmp	r3, #160	; 0xa0
 8003018:	d902      	bls.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800301a:	2302      	movs	r3, #2
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	e013      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003020:	2301      	movs	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	e010      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d902      	bls.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800302c:	2303      	movs	r3, #3
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e00a      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d102      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003038:	2302      	movs	r3, #2
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e004      	b.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b70      	cmp	r3, #112	; 0x70
 8003042:	d101      	bne.n	8003048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003044:	2301      	movs	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 0207 	bic.w	r2, r3, #7
 8003050:	4909      	ldr	r1, [pc, #36]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	40022000 	.word	0x40022000

0800307c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003084:	2300      	movs	r3, #0
 8003086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003088:	2300      	movs	r3, #0
 800308a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d041      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a0:	d02a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a6:	d824      	bhi.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ac:	d008      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030b2:	d81e      	bhi.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030bc:	d010      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030be:	e018      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030c0:	4b86      	ldr	r3, [pc, #536]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a85      	ldr	r2, [pc, #532]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030cc:	e015      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 facd 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030de:	e00c      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3320      	adds	r3, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fbb6 	bl	8003858 <RCCEx_PLLSAI2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f0:	e003      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	74fb      	strb	r3, [r7, #19]
      break;
 80030f6:	e000      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10b      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003100:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310e:	4973      	ldr	r1, [pc, #460]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003116:	e001      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d041      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003130:	d02a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003132:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003136:	d824      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800313c:	d008      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800313e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003142:	d81e      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314c:	d010      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800314e:	e018      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003150:	4b62      	ldr	r3, [pc, #392]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a61      	ldr	r2, [pc, #388]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800315c:	e015      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fa85 	bl	8003674 <RCCEx_PLLSAI1_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800316e:	e00c      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3320      	adds	r3, #32
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fb6e 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003180:	e003      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	74fb      	strb	r3, [r7, #19]
      break;
 8003186:	e000      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003190:	4b52      	ldr	r3, [pc, #328]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319e:	494f      	ldr	r1, [pc, #316]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031a6:	e001      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a0 	beq.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d4:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	4a40      	ldr	r2, [pc, #256]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031de:	6593      	str	r3, [r2, #88]	; 0x58
 80031e0:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ec:	2301      	movs	r3, #1
 80031ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f0:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031fc:	f7fe f8fe 	bl	80013fc <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003202:	e009      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fe f8fa 	bl	80013fc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d902      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	74fb      	strb	r3, [r7, #19]
        break;
 8003216:	e005      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d15c      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800322a:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003234:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01f      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	429a      	cmp	r2, r3
 8003246:	d019      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003252:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	4a20      	ldr	r2, [pc, #128]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe f8b9 	bl	80013fc <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328c:	e00b      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fe f8b5 	bl	80013fc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d902      	bls.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	74fb      	strb	r3, [r7, #19]
            break;
 80032a4:	e006      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ec      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	4904      	ldr	r1, [pc, #16]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032d2:	e009      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	74bb      	strb	r3, [r7, #18]
 80032d8:	e006      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e8:	7c7b      	ldrb	r3, [r7, #17]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ee:	4ba6      	ldr	r3, [pc, #664]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	4aa5      	ldr	r2, [pc, #660]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003306:	4ba0      	ldr	r3, [pc, #640]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f023 0203 	bic.w	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	499c      	ldr	r1, [pc, #624]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003328:	4b97      	ldr	r3, [pc, #604]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f023 020c 	bic.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	4994      	ldr	r1, [pc, #592]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800334a:	4b8f      	ldr	r3, [pc, #572]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	498b      	ldr	r1, [pc, #556]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800336c:	4b86      	ldr	r3, [pc, #536]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4983      	ldr	r1, [pc, #524]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800338e:	4b7e      	ldr	r3, [pc, #504]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339c:	497a      	ldr	r1, [pc, #488]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033b0:	4b75      	ldr	r3, [pc, #468]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	4972      	ldr	r1, [pc, #456]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d2:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	4969      	ldr	r1, [pc, #420]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033f4:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003402:	4961      	ldr	r1, [pc, #388]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003416:	4b5c      	ldr	r3, [pc, #368]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	4958      	ldr	r1, [pc, #352]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	4950      	ldr	r1, [pc, #320]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345a:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	4947      	ldr	r1, [pc, #284]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800347c:	4b42      	ldr	r3, [pc, #264]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800347e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	493f      	ldr	r1, [pc, #252]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d028      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800349e:	4b3a      	ldr	r3, [pc, #232]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4936      	ldr	r1, [pc, #216]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034bc:	d106      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034be:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c8:	60d3      	str	r3, [r2, #12]
 80034ca:	e011      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f8c9 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d028      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034fc:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350a:	491f      	ldr	r1, [pc, #124]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351a:	d106      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003526:	60d3      	str	r3, [r2, #12]
 8003528:	e011      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003532:	d10c      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	2101      	movs	r1, #1
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f89a 	bl	8003674 <RCCEx_PLLSAI1_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003568:	4907      	ldr	r1, [pc, #28]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003578:	d108      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357a:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4a02      	ldr	r2, [pc, #8]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003584:	60d3      	str	r3, [r2, #12]
 8003586:	e013      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003588:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f869 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035bc:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ca:	4929      	ldr	r1, [pc, #164]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035da:	d10d      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f846 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d014      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	74bb      	strb	r3, [r7, #18]
 80035f6:	e011      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003600:	d10c      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3320      	adds	r3, #32
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f925 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003638:	490d      	ldr	r1, [pc, #52]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365c:	4904      	ldr	r1, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003664:	7cbb      	ldrb	r3, [r7, #18]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000

08003674 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003682:	4b74      	ldr	r3, [pc, #464]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d018      	beq.n	80036c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800368e:	4b71      	ldr	r3, [pc, #452]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d10d      	bne.n	80036ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
       ||
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036a6:	4b6b      	ldr	r3, [pc, #428]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
       ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d047      	beq.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e044      	b.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d018      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0x86>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d825      	bhi.n	8003718 <RCCEx_PLLSAI1_Config+0xa4>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d002      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x62>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x74>
 80036d4:	e020      	b.n	8003718 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e01a      	b.n	800371e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e8:	4b5a      	ldr	r3, [pc, #360]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e013      	b.n	8003722 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b56      	ldr	r3, [pc, #344]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003706:	4b53      	ldr	r3, [pc, #332]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003716:	e006      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003726:	bf00      	nop
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	430b      	orrs	r3, r1
 8003744:	4943      	ldr	r1, [pc, #268]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003746:	4313      	orrs	r3, r2
 8003748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d17c      	bne.n	800384a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003750:	4b40      	ldr	r3, [pc, #256]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fd fe4e 	bl	80013fc <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003762:	e009      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003764:	f7fd fe4a 	bl	80013fc <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
        break;
 8003776:	e005      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ef      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d15f      	bne.n	800384a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d110      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	06d2      	lsls	r2, r2, #27
 80037a8:	430a      	orrs	r2, r1
 80037aa:	492a      	ldr	r1, [pc, #168]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	610b      	str	r3, [r1, #16]
 80037b0:	e027      	b.n	8003802 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d112      	bne.n	80037de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b8:	4b26      	ldr	r3, [pc, #152]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	0211      	lsls	r1, r2, #8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6912      	ldr	r2, [r2, #16]
 80037ce:	0852      	lsrs	r2, r2, #1
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0552      	lsls	r2, r2, #21
 80037d4:	430a      	orrs	r2, r1
 80037d6:	491f      	ldr	r1, [pc, #124]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
 80037dc:	e011      	b.n	8003802 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0211      	lsls	r1, r2, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6952      	ldr	r2, [r2, #20]
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	3a01      	subs	r2, #1
 80037f8:	0652      	lsls	r2, r2, #25
 80037fa:	430a      	orrs	r2, r1
 80037fc:	4915      	ldr	r1, [pc, #84]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a13      	ldr	r2, [pc, #76]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fd fdf5 	bl	80013fc <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003814:	e009      	b.n	800382a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003816:	f7fd fdf1 	bl	80013fc <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d902      	bls.n	800382a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	73fb      	strb	r3, [r7, #15]
          break;
 8003828:	e005      	b.n	8003836 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ef      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4903      	ldr	r1, [pc, #12]	; (8003854 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003846:	4313      	orrs	r3, r2
 8003848:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003866:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003872:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
       ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
       ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d047      	beq.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e044      	b.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d018      	beq.n	80038de <RCCEx_PLLSAI2_Config+0x86>
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d825      	bhi.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d002      	beq.n	80038ba <RCCEx_PLLSAI2_Config+0x62>
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d009      	beq.n	80038cc <RCCEx_PLLSAI2_Config+0x74>
 80038b8:	e020      	b.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ba:	4b54      	ldr	r3, [pc, #336]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11d      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ca:	e01a      	b.n	8003902 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038cc:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e013      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038de:	4b4b      	ldr	r3, [pc, #300]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fa:	e006      	b.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e004      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390a:	bf00      	nop
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003912:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	430b      	orrs	r3, r1
 8003928:	4938      	ldr	r1, [pc, #224]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d166      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fd fd5c 	bl	80013fc <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003946:	e009      	b.n	800395c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003948:	f7fd fd58 	bl	80013fc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	73fb      	strb	r3, [r7, #15]
        break;
 800395a:	e005      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ef      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d149      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d110      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800397c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	0211      	lsls	r1, r2, #8
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	06d2      	lsls	r2, r2, #27
 800398c:	430a      	orrs	r2, r1
 800398e:	491f      	ldr	r1, [pc, #124]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	614b      	str	r3, [r1, #20]
 8003994:	e011      	b.n	80039ba <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800399e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6892      	ldr	r2, [r2, #8]
 80039a6:	0211      	lsls	r1, r2, #8
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6912      	ldr	r2, [r2, #16]
 80039ac:	0852      	lsrs	r2, r2, #1
 80039ae:	3a01      	subs	r2, #1
 80039b0:	0652      	lsls	r2, r2, #25
 80039b2:	430a      	orrs	r2, r1
 80039b4:	4915      	ldr	r1, [pc, #84]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd fd19 	bl	80013fc <HAL_GetTick>
 80039ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039cc:	e009      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039ce:	f7fd fd15 	bl	80013fc <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d902      	bls.n	80039e2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	73fb      	strb	r3, [r7, #15]
          break;
 80039e0:	e005      	b.n	80039ee <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0ef      	beq.n	80039ce <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	4903      	ldr	r1, [pc, #12]	; (8003a0c <RCCEx_PLLSAI2_Config+0x1b4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e049      	b.n	8003ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f841 	bl	8003abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 f9f8 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e04f      	b.n	8003b8c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0x76>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d018      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0x76>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0x76>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0x76>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0x76>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0x76>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_TIM_Base_Start_IT+0xd8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d115      	bne.n	8003b76 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b06      	cmp	r3, #6
 8003b5a:	d015      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0xb4>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b62:	d011      	beq.n	8003b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	e008      	b.n	8003b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e000      	b.n	8003b8a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	00010007 	.word	0x00010007

08003bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0202 	mvn.w	r2, #2
 8003be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f905 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8f7 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f908 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0204 	mvn.w	r2, #4
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8db 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8cd 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f8de 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0208 	mvn.w	r2, #8
 8003c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8b1 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8a3 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f8b4 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f887 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f879 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f88a 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0201 	mvn.w	r2, #1
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fc ff50 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f914 	bl	8003f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f907 	bl	8003fa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f838 	bl	8003e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d10e      	bne.n	8003dea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0220 	mvn.w	r2, #32
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f8c7 	bl	8003f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d01b      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d017      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00f      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_Base_SetConfig+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00f      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <TIM_Base_SetConfig+0x128>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <TIM_Base_SetConfig+0x130>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <__NVIC_SetPriority>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	db0a      	blt.n	8003fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	490c      	ldr	r1, [pc, #48]	; (8004000 <__NVIC_SetPriority+0x4c>)
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	0112      	lsls	r2, r2, #4
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fdc:	e00a      	b.n	8003ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4908      	ldr	r1, [pc, #32]	; (8004004 <__NVIC_SetPriority+0x50>)
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	3b04      	subs	r3, #4
 8003fec:	0112      	lsls	r2, r2, #4
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	761a      	strb	r2, [r3, #24]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000e100 	.word	0xe000e100
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <SysTick_Handler+0x1c>)
 800400e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004010:	f001 fcfe 	bl	8005a10 <xTaskGetSchedulerState>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d001      	beq.n	800401e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800401a:	f002 fae5 	bl	80065e8 <xPortSysTickHandler>
  }
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010

08004028 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800402c:	2100      	movs	r1, #0
 800402e:	f06f 0004 	mvn.w	r0, #4
 8004032:	f7ff ffbf 	bl	8003fb4 <__NVIC_SetPriority>
#endif
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004042:	f3ef 8305 	mrs	r3, IPSR
 8004046:	603b      	str	r3, [r7, #0]
  return(result);
 8004048:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800404e:	f06f 0305 	mvn.w	r3, #5
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e00c      	b.n	8004070 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <osKernelInitialize+0x44>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <osKernelInitialize+0x44>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004064:	2300      	movs	r3, #0
 8004066:	607b      	str	r3, [r7, #4]
 8004068:	e002      	b.n	8004070 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004070:	687b      	ldr	r3, [r7, #4]
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000458 	.word	0x20000458

08004084 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800408a:	f3ef 8305 	mrs	r3, IPSR
 800408e:	603b      	str	r3, [r7, #0]
  return(result);
 8004090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004096:	f06f 0305 	mvn.w	r3, #5
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e010      	b.n	80040c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <osKernelStart+0x48>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d109      	bne.n	80040ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040a6:	f7ff ffbf 	bl	8004028 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <osKernelStart+0x48>)
 80040ac:	2202      	movs	r2, #2
 80040ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040b0:	f001 f866 	bl	8005180 <vTaskStartScheduler>
      stat = osOK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	e002      	b.n	80040c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040c0:	687b      	ldr	r3, [r7, #4]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000458 	.word	0x20000458

080040d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08e      	sub	sp, #56	; 0x38
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e0:	f3ef 8305 	mrs	r3, IPSR
 80040e4:	617b      	str	r3, [r7, #20]
  return(result);
 80040e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d17e      	bne.n	80041ea <osThreadNew+0x11a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d07b      	beq.n	80041ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040f6:	2318      	movs	r3, #24
 80040f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d045      	beq.n	8004196 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <osThreadNew+0x48>
        name = attr->name;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <osThreadNew+0x6e>
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b38      	cmp	r3, #56	; 0x38
 8004130:	d805      	bhi.n	800413e <osThreadNew+0x6e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <osThreadNew+0x72>
        return (NULL);
 800413e:	2300      	movs	r3, #0
 8004140:	e054      	b.n	80041ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	089b      	lsrs	r3, r3, #2
 8004150:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <osThreadNew+0xa8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b5b      	cmp	r3, #91	; 0x5b
 8004160:	d90a      	bls.n	8004178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <osThreadNew+0xa8>
        mem = 1;
 8004172:	2301      	movs	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e010      	b.n	800419a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10c      	bne.n	800419a <osThreadNew+0xca>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <osThreadNew+0xca>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d104      	bne.n	800419a <osThreadNew+0xca>
          mem = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e001      	b.n	800419a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d110      	bne.n	80041c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041a8:	9202      	str	r2, [sp, #8]
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fe0c 	bl	8004dd4 <xTaskCreateStatic>
 80041bc:	4603      	mov	r3, r0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e013      	b.n	80041ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	f107 0310 	add.w	r3, r7, #16
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fe57 	bl	8004e8e <xTaskCreate>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <osThreadNew+0x11a>
            hTask = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041ea:	693b      	ldr	r3, [r7, #16]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3728      	adds	r7, #40	; 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041fc:	f3ef 8305 	mrs	r3, IPSR
 8004200:	60bb      	str	r3, [r7, #8]
  return(result);
 8004202:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <osDelay+0x1c>
    stat = osErrorISR;
 8004208:	f06f 0305 	mvn.w	r3, #5
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e007      	b.n	8004220 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <osDelay+0x2c>
      vTaskDelay(ticks);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 ff7c 	bl	8005118 <vTaskDelay>
    }
  }

  return (stat);
 8004220:	68fb      	ldr	r3, [r7, #12]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <vApplicationGetIdleTaskMemory+0x2c>)
 800423c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4a06      	ldr	r2, [pc, #24]	; (800425c <vApplicationGetIdleTaskMemory+0x30>)
 8004242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	2000045c 	.word	0x2000045c
 800425c:	200004b8 	.word	0x200004b8

08004260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <vApplicationGetTimerTaskMemory+0x2c>)
 8004270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a06      	ldr	r2, [pc, #24]	; (8004290 <vApplicationGetTimerTaskMemory+0x30>)
 8004276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	200006b8 	.word	0x200006b8
 8004290:	20000714 	.word	0x20000714

08004294 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0208 	add.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f103 0208 	add.w	r2, r3, #8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f103 0208 	add.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	601a      	str	r2, [r3, #0]
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d103      	bne.n	8004356 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e00c      	b.n	8004370 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3308      	adds	r3, #8
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e002      	b.n	8004364 <vListInsert+0x2e>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d2f6      	bcs.n	800435e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	601a      	str	r2, [r3, #0]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6892      	ldr	r2, [r2, #8]
 80043be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6852      	ldr	r2, [r2, #4]
 80043c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d103      	bne.n	80043dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004426:	f002 f84d 	bl	80064c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	441a      	add	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	3b01      	subs	r3, #1
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	441a      	add	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	22ff      	movs	r2, #255	; 0xff
 800446a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d114      	bne.n	80044a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01a      	beq.n	80044ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3310      	adds	r3, #16
 8004488:	4618      	mov	r0, r3
 800448a:	f001 f903 	bl	8005694 <xTaskRemoveFromEventList>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d012      	beq.n	80044ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <xQueueGenericReset+0xcc>)
 8004496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	e009      	b.n	80044ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3310      	adds	r3, #16
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fef2 	bl	8004294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3324      	adds	r3, #36	; 0x24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff feed 	bl	8004294 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044ba:	f002 f833 	bl	8006524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044be:	2301      	movs	r3, #1
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08e      	sub	sp, #56	; 0x38
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <xQueueGenericCreateStatic+0x52>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <xQueueGenericCreateStatic+0x56>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <xQueueGenericCreateStatic+0x58>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	623b      	str	r3, [r7, #32]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <xQueueGenericCreateStatic+0x7e>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <xQueueGenericCreateStatic+0x82>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <xQueueGenericCreateStatic+0x84>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	61fb      	str	r3, [r7, #28]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800456a:	2350      	movs	r3, #80	; 0x50
 800456c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d00a      	beq.n	800458a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	61bb      	str	r3, [r7, #24]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800458a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800459e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4613      	mov	r3, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f805 	bl	80045bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	; 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e002      	b.n	80045de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045ea:	2101      	movs	r1, #1
 80045ec:	69b8      	ldr	r0, [r7, #24]
 80045ee:	f7ff ff05 	bl	80043fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08e      	sub	sp, #56	; 0x38
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004612:	2300      	movs	r3, #0
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xQueueGenericSend+0x32>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <xQueueGenericSend+0x40>
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <xQueueGenericSend+0x44>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <xQueueGenericSend+0x46>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <xQueueGenericSend+0x60>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d103      	bne.n	8004672 <xQueueGenericSend+0x6e>
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <xQueueGenericSend+0x72>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueGenericSend+0x74>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xQueueGenericSend+0x8e>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	623b      	str	r3, [r7, #32]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004692:	f001 f9bd 	bl	8005a10 <xTaskGetSchedulerState>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <xQueueGenericSend+0x9e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <xQueueGenericSend+0xa2>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <xQueueGenericSend+0xa4>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61fb      	str	r3, [r7, #28]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c2:	f001 feff 	bl	80064c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <xQueueGenericSend+0xd4>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d129      	bne.n	800472c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046de:	f000 fa0b 	bl	8004af8 <prvCopyDataToQueue>
 80046e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d010      	beq.n	800470e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	3324      	adds	r3, #36	; 0x24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 ffcf 	bl	8005694 <xTaskRemoveFromEventList>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046fc:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <xQueueGenericSend+0x1f8>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	e00a      	b.n	8004724 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004714:	4b39      	ldr	r3, [pc, #228]	; (80047fc <xQueueGenericSend+0x1f8>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004724:	f001 fefe 	bl	8006524 <vPortExitCritical>
				return pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	e063      	b.n	80047f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004732:	f001 fef7 	bl	8006524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004736:	2300      	movs	r3, #0
 8004738:	e05c      	b.n	80047f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	4618      	mov	r0, r3
 8004746:	f001 f809 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800474a:	2301      	movs	r3, #1
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800474e:	f001 fee9 	bl	8006524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004752:	f000 fd7b 	bl	800524c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004756:	f001 feb5 	bl	80064c4 <vPortEnterCritical>
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004760:	b25b      	sxtb	r3, r3
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d103      	bne.n	8004770 <xQueueGenericSend+0x16c>
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004776:	b25b      	sxtb	r3, r3
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d103      	bne.n	8004786 <xQueueGenericSend+0x182>
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004786:	f001 fecd 	bl	8006524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800478a:	1d3a      	adds	r2, r7, #4
 800478c:	f107 0314 	add.w	r3, r7, #20
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fff8 	bl	8005788 <xTaskCheckForTimeOut>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d124      	bne.n	80047e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800479e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a0:	f000 faa2 	bl	8004ce8 <prvIsQueueFull>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d018      	beq.n	80047dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	3310      	adds	r3, #16
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 ff1e 	bl	80055f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ba:	f000 fa2d 	bl	8004c18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047be:	f000 fd53 	bl	8005268 <xTaskResumeAll>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f47f af7c 	bne.w	80046c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <xQueueGenericSend+0x1f8>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	e772      	b.n	80046c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047de:	f000 fa1b 	bl	8004c18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047e2:	f000 fd41 	bl	8005268 <xTaskResumeAll>
 80047e6:	e76c      	b.n	80046c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ea:	f000 fa15 	bl	8004c18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ee:	f000 fd3b 	bl	8005268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3738      	adds	r7, #56	; 0x38
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b090      	sub	sp, #64	; 0x40
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <xQueueGenericSendFromISR+0x3c>
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <xQueueGenericSendFromISR+0x40>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <xQueueGenericSendFromISR+0x42>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d103      	bne.n	800486a <xQueueGenericSendFromISR+0x6a>
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <xQueueGenericSendFromISR+0x6e>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <xQueueGenericSendFromISR+0x70>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800488a:	f001 fefd 	bl	8006688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800488e:	f3ef 8211 	mrs	r2, BASEPRI
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61fa      	str	r2, [r7, #28]
 80048a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <xQueueGenericSendFromISR+0xbc>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d12f      	bne.n	800491c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048d2:	f000 f911 	bl	8004af8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d112      	bne.n	8004906 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d016      	beq.n	8004916 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ea:	3324      	adds	r3, #36	; 0x24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fed1 	bl	8005694 <xTaskRemoveFromEventList>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e007      	b.n	8004916 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004906:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800490a:	3301      	adds	r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	b25a      	sxtb	r2, r3
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004916:	2301      	movs	r3, #1
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800491a:	e001      	b.n	8004920 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800491c:	2300      	movs	r3, #0
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800492a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800492e:	4618      	mov	r0, r3
 8004930:	3740      	adds	r7, #64	; 0x40
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08c      	sub	sp, #48	; 0x30
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <xQueueReceive+0x30>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	623b      	str	r3, [r7, #32]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <xQueueReceive+0x3e>
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <xQueueReceive+0x42>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <xQueueReceive+0x44>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <xQueueReceive+0x5e>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	61fb      	str	r3, [r7, #28]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004996:	f001 f83b 	bl	8005a10 <xTaskGetSchedulerState>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <xQueueReceive+0x6e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <xQueueReceive+0x72>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueReceive+0x74>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueReceive+0x8e>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61bb      	str	r3, [r7, #24]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049c6:	f001 fd7d 	bl	80064c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01f      	beq.n	8004a16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049da:	f000 f8f7 	bl	8004bcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1e5a      	subs	r2, r3, #1
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00f      	beq.n	8004a0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	3310      	adds	r3, #16
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fe4e 	bl	8005694 <xTaskRemoveFromEventList>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049fe:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <xQueueReceive+0x1bc>)
 8004a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a0e:	f001 fd89 	bl	8006524 <vPortExitCritical>
				return pdPASS;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e069      	b.n	8004aea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d103      	bne.n	8004a24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a1c:	f001 fd82 	bl	8006524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e062      	b.n	8004aea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a2a:	f107 0310 	add.w	r3, r7, #16
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fe94 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a38:	f001 fd74 	bl	8006524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a3c:	f000 fc06 	bl	800524c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a40:	f001 fd40 	bl	80064c4 <vPortEnterCritical>
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d103      	bne.n	8004a5a <xQueueReceive+0x122>
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d103      	bne.n	8004a70 <xQueueReceive+0x138>
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a70:	f001 fd58 	bl	8006524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a74:	1d3a      	adds	r2, r7, #4
 8004a76:	f107 0310 	add.w	r3, r7, #16
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fe83 	bl	8005788 <xTaskCheckForTimeOut>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d123      	bne.n	8004ad0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8a:	f000 f917 	bl	8004cbc <prvIsQueueEmpty>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fda9 	bl	80055f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa4:	f000 f8b8 	bl	8004c18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004aa8:	f000 fbde 	bl	8005268 <xTaskResumeAll>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d189      	bne.n	80049c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <xQueueReceive+0x1bc>)
 8004ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	e780      	b.n	80049c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac6:	f000 f8a7 	bl	8004c18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aca:	f000 fbcd 	bl	8005268 <xTaskResumeAll>
 8004ace:	e77a      	b.n	80049c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad2:	f000 f8a1 	bl	8004c18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ad6:	f000 fbc7 	bl	8005268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004adc:	f000 f8ee 	bl	8004cbc <prvIsQueueEmpty>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f43f af6f 	beq.w	80049c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3730      	adds	r7, #48	; 0x30
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10d      	bne.n	8004b32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d14d      	bne.n	8004bba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 ff92 	bl	8005a4c <xTaskPriorityDisinherit>
 8004b28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	e043      	b.n	8004bba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d119      	bne.n	8004b6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6858      	ldr	r0, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	461a      	mov	r2, r3
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	f001 ffee 	bl	8006b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d32b      	bcc.n	8004bba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	e026      	b.n	8004bba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68d8      	ldr	r0, [r3, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	461a      	mov	r2, r3
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	f001 ffd4 	bl	8006b24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	425b      	negs	r3, r3
 8004b86:	441a      	add	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d207      	bcs.n	8004ba8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	425b      	negs	r3, r3
 8004ba2:	441a      	add	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d105      	bne.n	8004bba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d303      	bcc.n	8004c00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68d9      	ldr	r1, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6838      	ldr	r0, [r7, #0]
 8004c0c:	f001 ff8a 	bl	8006b24 <memcpy>
	}
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c20:	f001 fc50 	bl	80064c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c2c:	e011      	b.n	8004c52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fd2a 	bl	8005694 <xTaskRemoveFromEventList>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c46:	f000 fe01 	bl	800584c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	dce9      	bgt.n	8004c2e <prvUnlockQueue+0x16>
 8004c5a:	e000      	b.n	8004c5e <prvUnlockQueue+0x46>
					break;
 8004c5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	22ff      	movs	r2, #255	; 0xff
 8004c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c66:	f001 fc5d 	bl	8006524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c6a:	f001 fc2b 	bl	80064c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c76:	e011      	b.n	8004c9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3310      	adds	r3, #16
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fd05 	bl	8005694 <xTaskRemoveFromEventList>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c90:	f000 fddc 	bl	800584c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c94:	7bbb      	ldrb	r3, [r7, #14]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dce9      	bgt.n	8004c78 <prvUnlockQueue+0x60>
 8004ca4:	e000      	b.n	8004ca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	22ff      	movs	r2, #255	; 0xff
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cb0:	f001 fc38 	bl	8006524 <vPortExitCritical>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cc4:	f001 fbfe 	bl	80064c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e001      	b.n	8004cda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cda:	f001 fc23 	bl	8006524 <vPortExitCritical>

	return xReturn;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf0:	f001 fbe8 	bl	80064c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d102      	bne.n	8004d06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e001      	b.n	8004d0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d0a:	f001 fc0b 	bl	8006524 <vPortExitCritical>

	return xReturn;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e014      	b.n	8004d52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d28:	4a0f      	ldr	r2, [pc, #60]	; (8004d68 <vQueueAddToRegistry+0x50>)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d34:	490c      	ldr	r1, [pc, #48]	; (8004d68 <vQueueAddToRegistry+0x50>)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <vQueueAddToRegistry+0x50>)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d4a:	e006      	b.n	8004d5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b07      	cmp	r3, #7
 8004d56:	d9e7      	bls.n	8004d28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20001dc8 	.word	0x20001dc8

08004d6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d7c:	f001 fba2 	bl	80064c4 <vPortEnterCritical>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d103      	bne.n	8004d96 <vQueueWaitForMessageRestricted+0x2a>
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d9c:	b25b      	sxtb	r3, r3
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d103      	bne.n	8004dac <vQueueWaitForMessageRestricted+0x40>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dac:	f001 fbba 	bl	8006524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3324      	adds	r3, #36	; 0x24
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fc3b 	bl	800563c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7ff ff26 	bl	8004c18 <prvUnlockQueue>
	}
 8004dcc:	bf00      	nop
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08e      	sub	sp, #56	; 0x38
 8004dd8:	af04      	add	r7, sp, #16
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	623b      	str	r3, [r7, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	61fb      	str	r3, [r7, #28]
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e1a:	235c      	movs	r3, #92	; 0x5c
 8004e1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b5c      	cmp	r3, #92	; 0x5c
 8004e22:	d00a      	beq.n	8004e3a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61bb      	str	r3, [r7, #24]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01e      	beq.n	8004e80 <xTaskCreateStatic+0xac>
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9303      	str	r3, [sp, #12]
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	f107 0314 	add.w	r3, r7, #20
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f850 	bl	8004f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e7a:	f000 f8dd 	bl	8005038 <prvAddNewTaskToReadyList>
 8004e7e:	e001      	b.n	8004e84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e84:	697b      	ldr	r3, [r7, #20]
	}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3728      	adds	r7, #40	; 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b08c      	sub	sp, #48	; 0x30
 8004e92:	af04      	add	r7, sp, #16
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fc30 	bl	8006708 <pvPortMalloc>
 8004ea8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004eb0:	205c      	movs	r0, #92	; 0x5c
 8004eb2:	f001 fc29 	bl	8006708 <pvPortMalloc>
 8004eb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ec4:	e005      	b.n	8004ed2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ec6:	6978      	ldr	r0, [r7, #20]
 8004ec8:	f001 fcea 	bl	80068a0 <vPortFree>
 8004ecc:	e001      	b.n	8004ed2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9303      	str	r3, [sp, #12]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	9302      	str	r3, [sp, #8]
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f80e 	bl	8004f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004efc:	69f8      	ldr	r0, [r7, #28]
 8004efe:	f000 f89b 	bl	8005038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e002      	b.n	8004f0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f08:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	461a      	mov	r2, r3
 8004f30:	21a5      	movs	r1, #165	; 0xa5
 8004f32:	f001 fe05 	bl	8006b40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f40:	3b01      	subs	r3, #1
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f023 0307 	bic.w	r3, r3, #7
 8004f4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	617b      	str	r3, [r7, #20]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01f      	beq.n	8004fb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e012      	b.n	8004fa2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	7819      	ldrb	r1, [r3, #0]
 8004f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	3334      	adds	r3, #52	; 0x34
 8004f8c:	460a      	mov	r2, r1
 8004f8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d006      	beq.n	8004faa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	61fb      	str	r3, [r7, #28]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b0f      	cmp	r3, #15
 8004fa6:	d9e9      	bls.n	8004f7c <prvInitialiseNewTask+0x64>
 8004fa8:	e000      	b.n	8004fac <prvInitialiseNewTask+0x94>
			{
				break;
 8004faa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fb4:	e003      	b.n	8004fbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	2b37      	cmp	r3, #55	; 0x37
 8004fc2:	d901      	bls.n	8004fc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fc4:	2337      	movs	r3, #55	; 0x37
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff f978 	bl	80042d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff f973 	bl	80042d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	2200      	movs	r2, #0
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	69b8      	ldr	r0, [r7, #24]
 8005018:	f001 f928 	bl	800626c <pxPortInitialiseStack>
 800501c:	4602      	mov	r2, r0
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800502e:	bf00      	nop
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005040:	f001 fa40 	bl	80064c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005044:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 800504c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800504e:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005064:	f000 fc16 	bl	8005894 <prvInitialiseTaskLists>
 8005068:	e00d      	b.n	8005086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800506a:	4b26      	ldr	r3, [pc, #152]	; (8005104 <prvAddNewTaskToReadyList+0xcc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005072:	4b23      	ldr	r3, [pc, #140]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	429a      	cmp	r2, r3
 800507e:	d802      	bhi.n	8005086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005080:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 800508e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <prvAddNewTaskToReadyList+0xd4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d903      	bls.n	80050ac <prvAddNewTaskToReadyList+0x74>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <prvAddNewTaskToReadyList+0xd4>)
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <prvAddNewTaskToReadyList+0xd8>)
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f7ff f913 	bl	80042ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050c8:	f001 fa2c 	bl	8006524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <prvAddNewTaskToReadyList+0xcc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	429a      	cmp	r2, r3
 80050e0:	d207      	bcs.n	80050f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <prvAddNewTaskToReadyList+0xdc>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000fe8 	.word	0x20000fe8
 8005100:	20000b14 	.word	0x20000b14
 8005104:	20000ff4 	.word	0x20000ff4
 8005108:	20001004 	.word	0x20001004
 800510c:	20000ff0 	.word	0x20000ff0
 8005110:	20000b18 	.word	0x20000b18
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800512a:	4b13      	ldr	r3, [pc, #76]	; (8005178 <vTaskDelay+0x60>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <vTaskDelay+0x30>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60bb      	str	r3, [r7, #8]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005148:	f000 f880 	bl	800524c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800514c:	2100      	movs	r1, #0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fcea 	bl	8005b28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005154:	f000 f888 	bl	8005268 <xTaskResumeAll>
 8005158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <vTaskDelay+0x64>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20001010 	.word	0x20001010
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08a      	sub	sp, #40	; 0x28
 8005184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800518e:	463a      	mov	r2, r7
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff f848 	bl	800422c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	9202      	str	r2, [sp, #8]
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2300      	movs	r3, #0
 80051ac:	460a      	mov	r2, r1
 80051ae:	4921      	ldr	r1, [pc, #132]	; (8005234 <vTaskStartScheduler+0xb4>)
 80051b0:	4821      	ldr	r0, [pc, #132]	; (8005238 <vTaskStartScheduler+0xb8>)
 80051b2:	f7ff fe0f 	bl	8004dd4 <xTaskCreateStatic>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a20      	ldr	r2, [pc, #128]	; (800523c <vTaskStartScheduler+0xbc>)
 80051ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <vTaskStartScheduler+0xbc>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e001      	b.n	80051ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d102      	bne.n	80051da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051d4:	f000 fcfc 	bl	8005bd0 <xTimerCreateTimerTask>
 80051d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d116      	bne.n	800520e <vTaskStartScheduler+0x8e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051f4:	4b12      	ldr	r3, [pc, #72]	; (8005240 <vTaskStartScheduler+0xc0>)
 80051f6:	f04f 32ff 	mov.w	r2, #4294967295
 80051fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <vTaskStartScheduler+0xc4>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <vTaskStartScheduler+0xc8>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005208:	f001 f8ba 	bl	8006380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800520c:	e00e      	b.n	800522c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d10a      	bne.n	800522c <vTaskStartScheduler+0xac>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <vTaskStartScheduler+0xaa>
}
 800522c:	bf00      	nop
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	08006c78 	.word	0x08006c78
 8005238:	08005865 	.word	0x08005865
 800523c:	2000100c 	.word	0x2000100c
 8005240:	20001008 	.word	0x20001008
 8005244:	20000ff4 	.word	0x20000ff4
 8005248:	20000fec 	.word	0x20000fec

0800524c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <vTaskSuspendAll+0x18>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	4a03      	ldr	r2, [pc, #12]	; (8005264 <vTaskSuspendAll+0x18>)
 8005258:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	20001010 	.word	0x20001010

08005268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005276:	4b42      	ldr	r3, [pc, #264]	; (8005380 <xTaskResumeAll+0x118>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xTaskResumeAll+0x2c>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	603b      	str	r3, [r7, #0]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005294:	f001 f916 	bl	80064c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005298:	4b39      	ldr	r3, [pc, #228]	; (8005380 <xTaskResumeAll+0x118>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	4a38      	ldr	r2, [pc, #224]	; (8005380 <xTaskResumeAll+0x118>)
 80052a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a2:	4b37      	ldr	r3, [pc, #220]	; (8005380 <xTaskResumeAll+0x118>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d162      	bne.n	8005370 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052aa:	4b36      	ldr	r3, [pc, #216]	; (8005384 <xTaskResumeAll+0x11c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d05e      	beq.n	8005370 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b2:	e02f      	b.n	8005314 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b4:	4b34      	ldr	r3, [pc, #208]	; (8005388 <xTaskResumeAll+0x120>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3318      	adds	r3, #24
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff f871 	bl	80043a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f86c 	bl	80043a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4b2d      	ldr	r3, [pc, #180]	; (800538c <xTaskResumeAll+0x124>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d903      	bls.n	80052e4 <xTaskResumeAll+0x7c>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <xTaskResumeAll+0x124>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a27      	ldr	r2, [pc, #156]	; (8005390 <xTaskResumeAll+0x128>)
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7fe fff7 	bl	80042ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4b23      	ldr	r3, [pc, #140]	; (8005394 <xTaskResumeAll+0x12c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800530e:	4b22      	ldr	r3, [pc, #136]	; (8005398 <xTaskResumeAll+0x130>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <xTaskResumeAll+0x120>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1cb      	bne.n	80052b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005322:	f000 fb55 	bl	80059d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <xTaskResumeAll+0x134>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005332:	f000 f847 	bl	80053c4 <xTaskIncrementTick>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800533c:	4b16      	ldr	r3, [pc, #88]	; (8005398 <xTaskResumeAll+0x130>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3b01      	subs	r3, #1
 8005346:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f1      	bne.n	8005332 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <xTaskResumeAll+0x134>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <xTaskResumeAll+0x130>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <xTaskResumeAll+0x138>)
 8005362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005370:	f001 f8d8 	bl	8006524 <vPortExitCritical>

	return xAlreadyYielded;
 8005374:	68bb      	ldr	r3, [r7, #8]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20001010 	.word	0x20001010
 8005384:	20000fe8 	.word	0x20000fe8
 8005388:	20000fa8 	.word	0x20000fa8
 800538c:	20000ff0 	.word	0x20000ff0
 8005390:	20000b18 	.word	0x20000b18
 8005394:	20000b14 	.word	0x20000b14
 8005398:	20000ffc 	.word	0x20000ffc
 800539c:	20000ff8 	.word	0x20000ff8
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <xTaskGetTickCount+0x1c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053b0:	687b      	ldr	r3, [r7, #4]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000fec 	.word	0x20000fec

080053c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ce:	4b4f      	ldr	r3, [pc, #316]	; (800550c <xTaskIncrementTick+0x148>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 808f 	bne.w	80054f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053d8:	4b4d      	ldr	r3, [pc, #308]	; (8005510 <xTaskIncrementTick+0x14c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053e0:	4a4b      	ldr	r2, [pc, #300]	; (8005510 <xTaskIncrementTick+0x14c>)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d120      	bne.n	800542e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053ec:	4b49      	ldr	r3, [pc, #292]	; (8005514 <xTaskIncrementTick+0x150>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <xTaskIncrementTick+0x48>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	603b      	str	r3, [r7, #0]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <xTaskIncrementTick+0x46>
 800540c:	4b41      	ldr	r3, [pc, #260]	; (8005514 <xTaskIncrementTick+0x150>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	4b41      	ldr	r3, [pc, #260]	; (8005518 <xTaskIncrementTick+0x154>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a3f      	ldr	r2, [pc, #252]	; (8005514 <xTaskIncrementTick+0x150>)
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4a3f      	ldr	r2, [pc, #252]	; (8005518 <xTaskIncrementTick+0x154>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b3e      	ldr	r3, [pc, #248]	; (800551c <xTaskIncrementTick+0x158>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	4a3d      	ldr	r2, [pc, #244]	; (800551c <xTaskIncrementTick+0x158>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	f000 fad1 	bl	80059d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800542e:	4b3c      	ldr	r3, [pc, #240]	; (8005520 <xTaskIncrementTick+0x15c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d349      	bcc.n	80054cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005438:	4b36      	ldr	r3, [pc, #216]	; (8005514 <xTaskIncrementTick+0x150>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d104      	bne.n	800544c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005442:	4b37      	ldr	r3, [pc, #220]	; (8005520 <xTaskIncrementTick+0x15c>)
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	601a      	str	r2, [r3, #0]
					break;
 800544a:	e03f      	b.n	80054cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544c:	4b31      	ldr	r3, [pc, #196]	; (8005514 <xTaskIncrementTick+0x150>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d203      	bcs.n	800546c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005464:	4a2e      	ldr	r2, [pc, #184]	; (8005520 <xTaskIncrementTick+0x15c>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800546a:	e02f      	b.n	80054cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	3304      	adds	r3, #4
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe ff99 	bl	80043a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3318      	adds	r3, #24
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe ff90 	bl	80043a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <xTaskIncrementTick+0x160>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <xTaskIncrementTick+0xd8>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4a22      	ldr	r2, [pc, #136]	; (8005524 <xTaskIncrementTick+0x160>)
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <xTaskIncrementTick+0x164>)
 80054aa:	441a      	add	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7fe ff1b 	bl	80042ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <xTaskIncrementTick+0x168>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d3b8      	bcc.n	8005438 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ca:	e7b5      	b.n	8005438 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054cc:	4b17      	ldr	r3, [pc, #92]	; (800552c <xTaskIncrementTick+0x168>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d2:	4915      	ldr	r1, [pc, #84]	; (8005528 <xTaskIncrementTick+0x164>)
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d901      	bls.n	80054e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054e8:	4b11      	ldr	r3, [pc, #68]	; (8005530 <xTaskIncrementTick+0x16c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80054f0:	2301      	movs	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e004      	b.n	8005500 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <xTaskIncrementTick+0x170>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <xTaskIncrementTick+0x170>)
 80054fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005500:	697b      	ldr	r3, [r7, #20]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20001010 	.word	0x20001010
 8005510:	20000fec 	.word	0x20000fec
 8005514:	20000fa0 	.word	0x20000fa0
 8005518:	20000fa4 	.word	0x20000fa4
 800551c:	20001000 	.word	0x20001000
 8005520:	20001008 	.word	0x20001008
 8005524:	20000ff0 	.word	0x20000ff0
 8005528:	20000b18 	.word	0x20000b18
 800552c:	20000b14 	.word	0x20000b14
 8005530:	20000ffc 	.word	0x20000ffc
 8005534:	20000ff8 	.word	0x20000ff8

08005538 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800553e:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <vTaskSwitchContext+0xa8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <vTaskSwitchContext+0xac>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800554c:	e041      	b.n	80055d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <vTaskSwitchContext+0xac>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005554:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <vTaskSwitchContext+0xb0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	e010      	b.n	800557e <vTaskSwitchContext+0x46>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <vTaskSwitchContext+0x40>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	607b      	str	r3, [r7, #4]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <vTaskSwitchContext+0x3e>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3b01      	subs	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	491b      	ldr	r1, [pc, #108]	; (80055ec <vTaskSwitchContext+0xb4>)
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0e4      	beq.n	800555c <vTaskSwitchContext+0x24>
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4a13      	ldr	r2, [pc, #76]	; (80055ec <vTaskSwitchContext+0xb4>)
 800559e:	4413      	add	r3, r2
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	605a      	str	r2, [r3, #4]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	3308      	adds	r3, #8
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d104      	bne.n	80055c2 <vTaskSwitchContext+0x8a>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <vTaskSwitchContext+0xb8>)
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	4a06      	ldr	r2, [pc, #24]	; (80055e8 <vTaskSwitchContext+0xb0>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6013      	str	r3, [r2, #0]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20001010 	.word	0x20001010
 80055e4:	20000ffc 	.word	0x20000ffc
 80055e8:	20000ff0 	.word	0x20000ff0
 80055ec:	20000b18 	.word	0x20000b18
 80055f0:	20000b14 	.word	0x20000b14

080055f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60fb      	str	r3, [r7, #12]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <vTaskPlaceOnEventList+0x44>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3318      	adds	r3, #24
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fe fe87 	bl	8004336 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005628:	2101      	movs	r1, #1
 800562a:	6838      	ldr	r0, [r7, #0]
 800562c:	f000 fa7c 	bl	8005b28 <prvAddCurrentTaskToDelayedList>
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000b14 	.word	0x20000b14

0800563c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	617b      	str	r3, [r7, #20]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <vTaskPlaceOnEventListRestricted+0x54>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3318      	adds	r3, #24
 800566a:	4619      	mov	r1, r3
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7fe fe3e 	bl	80042ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f000 fa51 	bl	8005b28 <prvAddCurrentTaskToDelayedList>
	}
 8005686:	bf00      	nop
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000b14 	.word	0x20000b14

08005694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	60fb      	str	r3, [r7, #12]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3318      	adds	r3, #24
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fe6f 	bl	80043a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ca:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <xTaskRemoveFromEventList+0xb0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11d      	bne.n	800570e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fe66 	bl	80043a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <xTaskRemoveFromEventList+0xb4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <xTaskRemoveFromEventList+0x5c>
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <xTaskRemoveFromEventList+0xb4>)
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <xTaskRemoveFromEventList+0xb8>)
 80056fe:	441a      	add	r2, r3
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7fe fdf1 	bl	80042ee <vListInsertEnd>
 800570c:	e005      	b.n	800571a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3318      	adds	r3, #24
 8005712:	4619      	mov	r1, r3
 8005714:	480e      	ldr	r0, [pc, #56]	; (8005750 <xTaskRemoveFromEventList+0xbc>)
 8005716:	f7fe fdea 	bl	80042ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <xTaskRemoveFromEventList+0xc0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	429a      	cmp	r2, r3
 8005726:	d905      	bls.n	8005734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800572c:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <xTaskRemoveFromEventList+0xc4>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e001      	b.n	8005738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005738:	697b      	ldr	r3, [r7, #20]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20001010 	.word	0x20001010
 8005748:	20000ff0 	.word	0x20000ff0
 800574c:	20000b18 	.word	0x20000b18
 8005750:	20000fa8 	.word	0x20000fa8
 8005754:	20000b14 	.word	0x20000b14
 8005758:	20000ffc 	.word	0x20000ffc

0800575c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <vTaskInternalSetTimeOutState+0x24>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <vTaskInternalSetTimeOutState+0x28>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20001000 	.word	0x20001000
 8005784:	20000fec 	.word	0x20000fec

08005788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60fb      	str	r3, [r7, #12]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057ca:	f000 fe7b 	bl	80064c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ce:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <xTaskCheckForTimeOut+0xbc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d102      	bne.n	80057ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	e023      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <xTaskCheckForTimeOut+0xc0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d007      	beq.n	800580a <xTaskCheckForTimeOut+0x82>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e015      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	429a      	cmp	r2, r3
 8005812:	d20b      	bcs.n	800582c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff9b 	bl	800575c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	e004      	b.n	8005836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005832:	2301      	movs	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005836:	f000 fe75 	bl	8006524 <vPortExitCritical>

	return xReturn;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000fec 	.word	0x20000fec
 8005848:	20001000 	.word	0x20001000

0800584c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005850:	4b03      	ldr	r3, [pc, #12]	; (8005860 <vTaskMissedYield+0x14>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20000ffc 	.word	0x20000ffc

08005864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800586c:	f000 f852 	bl	8005914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <prvIdleTask+0x28>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d9f9      	bls.n	800586c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <prvIdleTask+0x2c>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005888:	e7f0      	b.n	800586c <prvIdleTask+0x8>
 800588a:	bf00      	nop
 800588c:	20000b18 	.word	0x20000b18
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800589a:	2300      	movs	r3, #0
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	e00c      	b.n	80058ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <prvInitialiseTaskLists+0x60>)
 80058ac:	4413      	add	r3, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fcf0 	bl	8004294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3301      	adds	r3, #1
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b37      	cmp	r3, #55	; 0x37
 80058be:	d9ef      	bls.n	80058a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058c0:	480d      	ldr	r0, [pc, #52]	; (80058f8 <prvInitialiseTaskLists+0x64>)
 80058c2:	f7fe fce7 	bl	8004294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058c6:	480d      	ldr	r0, [pc, #52]	; (80058fc <prvInitialiseTaskLists+0x68>)
 80058c8:	f7fe fce4 	bl	8004294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058cc:	480c      	ldr	r0, [pc, #48]	; (8005900 <prvInitialiseTaskLists+0x6c>)
 80058ce:	f7fe fce1 	bl	8004294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058d2:	480c      	ldr	r0, [pc, #48]	; (8005904 <prvInitialiseTaskLists+0x70>)
 80058d4:	f7fe fcde 	bl	8004294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058d8:	480b      	ldr	r0, [pc, #44]	; (8005908 <prvInitialiseTaskLists+0x74>)
 80058da:	f7fe fcdb 	bl	8004294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <prvInitialiseTaskLists+0x78>)
 80058e0:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <prvInitialiseTaskLists+0x64>)
 80058e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <prvInitialiseTaskLists+0x7c>)
 80058e6:	4a05      	ldr	r2, [pc, #20]	; (80058fc <prvInitialiseTaskLists+0x68>)
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000b18 	.word	0x20000b18
 80058f8:	20000f78 	.word	0x20000f78
 80058fc:	20000f8c 	.word	0x20000f8c
 8005900:	20000fa8 	.word	0x20000fa8
 8005904:	20000fbc 	.word	0x20000fbc
 8005908:	20000fd4 	.word	0x20000fd4
 800590c:	20000fa0 	.word	0x20000fa0
 8005910:	20000fa4 	.word	0x20000fa4

08005914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800591a:	e019      	b.n	8005950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800591c:	f000 fdd2 	bl	80064c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <prvCheckTasksWaitingTermination+0x50>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe fd3b 	bl	80043a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005932:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <prvCheckTasksWaitingTermination+0x54>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3b01      	subs	r3, #1
 8005938:	4a0b      	ldr	r2, [pc, #44]	; (8005968 <prvCheckTasksWaitingTermination+0x54>)
 800593a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3b01      	subs	r3, #1
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 8005944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005946:	f000 fded 	bl	8006524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f810 	bl	8005970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <prvCheckTasksWaitingTermination+0x58>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e1      	bne.n	800591c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000fbc 	.word	0x20000fbc
 8005968:	20000fe8 	.word	0x20000fe8
 800596c:	20000fd0 	.word	0x20000fd0

08005970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	4618      	mov	r0, r3
 8005988:	f000 ff8a 	bl	80068a0 <vPortFree>
				vPortFree( pxTCB );
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 ff87 	bl	80068a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005992:	e018      	b.n	80059c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800599a:	2b01      	cmp	r3, #1
 800599c:	d103      	bne.n	80059a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 ff7e 	bl	80068a0 <vPortFree>
	}
 80059a4:	e00f      	b.n	80059c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d00a      	beq.n	80059c6 <prvDeleteTCB+0x56>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <prvDeleteTCB+0x54>
	}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvResetNextTaskUnblockTime+0x38>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <prvResetNextTaskUnblockTime+0x3c>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059e8:	e008      	b.n	80059fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <prvResetNextTaskUnblockTime+0x38>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <prvResetNextTaskUnblockTime+0x3c>)
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	20000fa0 	.word	0x20000fa0
 8005a0c:	20001008 	.word	0x20001008

08005a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <xTaskGetSchedulerState+0x34>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	607b      	str	r3, [r7, #4]
 8005a22:	e008      	b.n	8005a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a24:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <xTaskGetSchedulerState+0x38>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	e001      	b.n	8005a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a32:	2300      	movs	r3, #0
 8005a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a36:	687b      	ldr	r3, [r7, #4]
	}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	20000ff4 	.word	0x20000ff4
 8005a48:	20001010 	.word	0x20001010

08005a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d056      	beq.n	8005b10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a62:	4b2e      	ldr	r3, [pc, #184]	; (8005b1c <xTaskPriorityDisinherit+0xd0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d00a      	beq.n	8005a82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60fb      	str	r3, [r7, #12]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60bb      	str	r3, [r7, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	1e5a      	subs	r2, r3, #1
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d02c      	beq.n	8005b10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d128      	bne.n	8005b10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fc70 	bl	80043a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <xTaskPriorityDisinherit+0xd4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d903      	bls.n	8005af0 <xTaskPriorityDisinherit+0xa4>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <xTaskPriorityDisinherit+0xd4>)
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <xTaskPriorityDisinherit+0xd8>)
 8005afe:	441a      	add	r2, r3
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7fe fbf1 	bl	80042ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b10:	697b      	ldr	r3, [r7, #20]
	}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000b14 	.word	0x20000b14
 8005b20:	20000ff0 	.word	0x20000ff0
 8005b24:	20000b18 	.word	0x20000b18

08005b28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b32:	4b21      	ldr	r3, [pc, #132]	; (8005bb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe fc32 	bl	80043a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d10a      	bne.n	8005b62 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b52:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4819      	ldr	r0, [pc, #100]	; (8005bc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b5c:	f7fe fbc7 	bl	80042ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b60:	e026      	b.n	8005bb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b6a:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d209      	bcs.n	8005b8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4610      	mov	r0, r2
 8005b88:	f7fe fbd5 	bl	8004336 <vListInsert>
}
 8005b8c:	e010      	b.n	8005bb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f7fe fbcb 	bl	8004336 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d202      	bcs.n	8005bb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005baa:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6013      	str	r3, [r2, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000fec 	.word	0x20000fec
 8005bbc:	20000b14 	.word	0x20000b14
 8005bc0:	20000fd4 	.word	0x20000fd4
 8005bc4:	20000fa4 	.word	0x20000fa4
 8005bc8:	20000fa0 	.word	0x20000fa0
 8005bcc:	20001008 	.word	0x20001008

08005bd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	; 0x28
 8005bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bda:	f000 fb07 	bl	80061ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bde:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <xTimerCreateTimerTask+0x80>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d021      	beq.n	8005c2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bee:	1d3a      	adds	r2, r7, #4
 8005bf0:	f107 0108 	add.w	r1, r7, #8
 8005bf4:	f107 030c 	add.w	r3, r7, #12
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fb31 	bl	8004260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	9202      	str	r2, [sp, #8]
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	2302      	movs	r3, #2
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	460a      	mov	r2, r1
 8005c10:	4910      	ldr	r1, [pc, #64]	; (8005c54 <xTimerCreateTimerTask+0x84>)
 8005c12:	4811      	ldr	r0, [pc, #68]	; (8005c58 <xTimerCreateTimerTask+0x88>)
 8005c14:	f7ff f8de 	bl	8004dd4 <xTaskCreateStatic>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <xTimerCreateTimerTask+0x8c>)
 8005c1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <xTimerCreateTimerTask+0x8c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c26:	2301      	movs	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c46:	697b      	ldr	r3, [r7, #20]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20001044 	.word	0x20001044
 8005c54:	08006c80 	.word	0x08006c80
 8005c58:	08005d95 	.word	0x08005d95
 8005c5c:	20001048 	.word	0x20001048

08005c60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	; 0x28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	623b      	str	r3, [r7, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <xTimerGenericCommand+0x98>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02a      	beq.n	8005cec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b05      	cmp	r3, #5
 8005ca6:	dc18      	bgt.n	8005cda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ca8:	f7ff feb2 	bl	8005a10 <xTaskGetSchedulerState>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d109      	bne.n	8005cc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cb2:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <xTimerGenericCommand+0x98>)
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	f107 0110 	add.w	r1, r7, #16
 8005cba:	2300      	movs	r3, #0
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbe:	f7fe fca1 	bl	8004604 <xQueueGenericSend>
 8005cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8005cc4:	e012      	b.n	8005cec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <xTimerGenericCommand+0x98>)
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f107 0110 	add.w	r1, r7, #16
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f7fe fc97 	bl	8004604 <xQueueGenericSend>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24
 8005cd8:	e008      	b.n	8005cec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <xTimerGenericCommand+0x98>)
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	f107 0110 	add.w	r1, r7, #16
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	f7fe fd8b 	bl	8004800 <xQueueGenericSendFromISR>
 8005cea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3728      	adds	r7, #40	; 0x28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20001044 	.word	0x20001044

08005cfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d06:	4b22      	ldr	r3, [pc, #136]	; (8005d90 <prvProcessExpiredTimer+0x94>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe fb47 	bl	80043a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d022      	beq.n	8005d6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	699a      	ldr	r2, [r3, #24]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	18d1      	adds	r1, r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	6978      	ldr	r0, [r7, #20]
 8005d36:	f000 f8d1 	bl	8005edc <prvInsertTimerInActiveList>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01f      	beq.n	8005d80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d40:	2300      	movs	r3, #0
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2300      	movs	r3, #0
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	6978      	ldr	r0, [r7, #20]
 8005d4c:	f7ff ff88 	bl	8005c60 <xTimerGenericCommand>
 8005d50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d113      	bne.n	8005d80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	60fb      	str	r3, [r7, #12]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	6978      	ldr	r0, [r7, #20]
 8005d86:	4798      	blx	r3
}
 8005d88:	bf00      	nop
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	2000103c 	.word	0x2000103c

08005d94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d9c:	f107 0308 	add.w	r3, r7, #8
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 f857 	bl	8005e54 <prvGetNextExpireTime>
 8005da6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4619      	mov	r1, r3
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f803 	bl	8005db8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005db2:	f000 f8d5 	bl	8005f60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005db6:	e7f1      	b.n	8005d9c <prvTimerTask+0x8>

08005db8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dc2:	f7ff fa43 	bl	800524c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dc6:	f107 0308 	add.w	r3, r7, #8
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f866 	bl	8005e9c <prvSampleTimeNow>
 8005dd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d130      	bne.n	8005e3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <prvProcessTimerOrBlockTask+0x3c>
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d806      	bhi.n	8005df4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005de6:	f7ff fa3f 	bl	8005268 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ff85 	bl	8005cfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005df2:	e024      	b.n	8005e3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <prvProcessTimerOrBlockTask+0x90>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <prvProcessTimerOrBlockTask+0x50>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <prvProcessTimerOrBlockTask+0x52>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <prvProcessTimerOrBlockTask+0x94>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f7fe ffa7 	bl	8004d6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e1e:	f7ff fa23 	bl	8005268 <xTaskResumeAll>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e28:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <prvProcessTimerOrBlockTask+0x98>)
 8005e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	f3bf 8f6f 	isb	sy
}
 8005e38:	e001      	b.n	8005e3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e3a:	f7ff fa15 	bl	8005268 <xTaskResumeAll>
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20001040 	.word	0x20001040
 8005e4c:	20001044 	.word	0x20001044
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e5c:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <prvGetNextExpireTime+0x44>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <prvGetNextExpireTime+0x16>
 8005e66:	2201      	movs	r2, #1
 8005e68:	e000      	b.n	8005e6c <prvGetNextExpireTime+0x18>
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <prvGetNextExpireTime+0x44>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e001      	b.n	8005e88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e88:	68fb      	ldr	r3, [r7, #12]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	2000103c 	.word	0x2000103c

08005e9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ea4:	f7ff fa7e 	bl	80053a4 <xTaskGetTickCount>
 8005ea8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <prvSampleTimeNow+0x3c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d205      	bcs.n	8005ec0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005eb4:	f000 f936 	bl	8006124 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e002      	b.n	8005ec6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ec6:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <prvSampleTimeNow+0x3c>)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	2000104c 	.word	0x2000104c

08005edc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d812      	bhi.n	8005f28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d302      	bcc.n	8005f16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e01b      	b.n	8005f4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f16:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <prvInsertTimerInActiveList+0x7c>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f7fe fa08 	bl	8004336 <vListInsert>
 8005f26:	e012      	b.n	8005f4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d206      	bcs.n	8005f3e <prvInsertTimerInActiveList+0x62>
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d302      	bcc.n	8005f3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	e007      	b.n	8005f4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <prvInsertTimerInActiveList+0x80>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3304      	adds	r3, #4
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f7fe f9f4 	bl	8004336 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f4e:	697b      	ldr	r3, [r7, #20]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20001040 	.word	0x20001040
 8005f5c:	2000103c 	.word	0x2000103c

08005f60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08e      	sub	sp, #56	; 0x38
 8005f64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f66:	e0ca      	b.n	80060fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da18      	bge.n	8005fa0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	3304      	adds	r3, #4
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	61fb      	str	r3, [r7, #28]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f96:	6850      	ldr	r0, [r2, #4]
 8005f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9a:	6892      	ldr	r2, [r2, #8]
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f2c0 80aa 	blt.w	80060fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe f9f5 	bl	80043a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ff6b 	bl	8005e9c <prvSampleTimeNow>
 8005fc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b09      	cmp	r3, #9
 8005fcc:	f200 8097 	bhi.w	80060fe <prvProcessReceivedCommands+0x19e>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <prvProcessReceivedCommands+0x78>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08006001 	.word	0x08006001
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006001 	.word	0x08006001
 8005fe4:	08006075 	.word	0x08006075
 8005fe8:	08006089 	.word	0x08006089
 8005fec:	080060d3 	.word	0x080060d3
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	08006001 	.word	0x08006001
 8005ff8:	08006075 	.word	0x08006075
 8005ffc:	08006089 	.word	0x08006089
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	b2da      	uxtb	r2, r3
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	18d1      	adds	r1, r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006020:	f7ff ff5c 	bl	8005edc <prvInsertTimerInActiveList>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d069      	beq.n	80060fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006030:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d05e      	beq.n	80060fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	441a      	add	r2, r3
 8006048:	2300      	movs	r3, #0
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2300      	movs	r3, #0
 800604e:	2100      	movs	r1, #0
 8006050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006052:	f7ff fe05 	bl	8005c60 <xTimerGenericCommand>
 8006056:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d14f      	bne.n	80060fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	61bb      	str	r3, [r7, #24]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006086:	e03a      	b.n	80060fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	617b      	str	r3, [r7, #20]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	18d1      	adds	r1, r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060cc:	f7ff ff06 	bl	8005edc <prvInsertTimerInActiveList>
					break;
 80060d0:	e015      	b.n	80060fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80060e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e2:	f000 fbdd 	bl	80068a0 <vPortFree>
 80060e6:	e00a      	b.n	80060fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060fa:	e000      	b.n	80060fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060fe:	4b08      	ldr	r3, [pc, #32]	; (8006120 <prvProcessReceivedCommands+0x1c0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	1d39      	adds	r1, r7, #4
 8006104:	2200      	movs	r2, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fc16 	bl	8004938 <xQueueReceive>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	f47f af2a 	bne.w	8005f68 <prvProcessReceivedCommands+0x8>
	}
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	3730      	adds	r7, #48	; 0x30
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20001044 	.word	0x20001044

08006124 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800612a:	e048      	b.n	80061be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800612c:	4b2d      	ldr	r3, [pc, #180]	; (80061e4 <prvSwitchTimerLists+0xc0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006136:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <prvSwitchTimerLists+0xc0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe f92f 	bl	80043a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02e      	beq.n	80061be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	429a      	cmp	r2, r3
 8006170:	d90e      	bls.n	8006190 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800617e:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <prvSwitchTimerLists+0xc0>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f7fe f8d4 	bl	8004336 <vListInsert>
 800618e:	e016      	b.n	80061be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006190:	2300      	movs	r3, #0
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2300      	movs	r3, #0
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	2100      	movs	r1, #0
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fd60 	bl	8005c60 <xTimerGenericCommand>
 80061a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	603b      	str	r3, [r7, #0]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <prvSwitchTimerLists+0xc0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1b1      	bne.n	800612c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <prvSwitchTimerLists+0xc0>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <prvSwitchTimerLists+0xc4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <prvSwitchTimerLists+0xc0>)
 80061d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061d6:	4a04      	ldr	r2, [pc, #16]	; (80061e8 <prvSwitchTimerLists+0xc4>)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	2000103c 	.word	0x2000103c
 80061e8:	20001040 	.word	0x20001040

080061ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061f2:	f000 f967 	bl	80064c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061f6:	4b15      	ldr	r3, [pc, #84]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d120      	bne.n	8006240 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061fe:	4814      	ldr	r0, [pc, #80]	; (8006250 <prvCheckForValidListAndQueue+0x64>)
 8006200:	f7fe f848 	bl	8004294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006204:	4813      	ldr	r0, [pc, #76]	; (8006254 <prvCheckForValidListAndQueue+0x68>)
 8006206:	f7fe f845 	bl	8004294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800620a:	4b13      	ldr	r3, [pc, #76]	; (8006258 <prvCheckForValidListAndQueue+0x6c>)
 800620c:	4a10      	ldr	r2, [pc, #64]	; (8006250 <prvCheckForValidListAndQueue+0x64>)
 800620e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <prvCheckForValidListAndQueue+0x70>)
 8006212:	4a10      	ldr	r2, [pc, #64]	; (8006254 <prvCheckForValidListAndQueue+0x68>)
 8006214:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006216:	2300      	movs	r3, #0
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <prvCheckForValidListAndQueue+0x74>)
 800621c:	4a11      	ldr	r2, [pc, #68]	; (8006264 <prvCheckForValidListAndQueue+0x78>)
 800621e:	2110      	movs	r1, #16
 8006220:	200a      	movs	r0, #10
 8006222:	f7fe f953 	bl	80044cc <xQueueGenericCreateStatic>
 8006226:	4603      	mov	r3, r0
 8006228:	4a08      	ldr	r2, [pc, #32]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 800622a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <prvCheckForValidListAndQueue+0x60>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	490b      	ldr	r1, [pc, #44]	; (8006268 <prvCheckForValidListAndQueue+0x7c>)
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fd6c 	bl	8004d18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006240:	f000 f970 	bl	8006524 <vPortExitCritical>
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20001044 	.word	0x20001044
 8006250:	20001014 	.word	0x20001014
 8006254:	20001028 	.word	0x20001028
 8006258:	2000103c 	.word	0x2000103c
 800625c:	20001040 	.word	0x20001040
 8006260:	200010f0 	.word	0x200010f0
 8006264:	20001050 	.word	0x20001050
 8006268:	08006c88 	.word	0x08006c88

0800626c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3b04      	subs	r3, #4
 800627c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3b04      	subs	r3, #4
 800628a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b04      	subs	r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800629c:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <pxPortInitialiseStack+0x64>)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3b14      	subs	r3, #20
 80062a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3b04      	subs	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f06f 0202 	mvn.w	r2, #2
 80062ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3b20      	subs	r3, #32
 80062c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062c2:	68fb      	ldr	r3, [r7, #12]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	080062d5 	.word	0x080062d5

080062d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <prvTaskExitError+0x54>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d00a      	beq.n	80062fe <prvTaskExitError+0x2a>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	60fb      	str	r3, [r7, #12]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <prvTaskExitError+0x28>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	60bb      	str	r3, [r7, #8]
}
 8006310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006312:	bf00      	nop
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0fc      	beq.n	8006314 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	20000014 	.word	0x20000014
 800632c:	00000000 	.word	0x00000000

08006330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <pxCurrentTCBConst2>)
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	6808      	ldr	r0, [r1, #0]
 8006336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633a:	f380 8809 	msr	PSP, r0
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8811 	msr	BASEPRI, r0
 800634a:	4770      	bx	lr
 800634c:	f3af 8000 	nop.w

08006350 <pxCurrentTCBConst2>:
 8006350:	20000b14 	.word	0x20000b14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006358:	4808      	ldr	r0, [pc, #32]	; (800637c <prvPortStartFirstTask+0x24>)
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	6800      	ldr	r0, [r0, #0]
 800635e:	f380 8808 	msr	MSP, r0
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8814 	msr	CONTROL, r0
 800636a:	b662      	cpsie	i
 800636c:	b661      	cpsie	f
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	df00      	svc	0
 8006378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800637a:	bf00      	nop
 800637c:	e000ed08 	.word	0xe000ed08

08006380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006386:	4b46      	ldr	r3, [pc, #280]	; (80064a0 <xPortStartScheduler+0x120>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a46      	ldr	r2, [pc, #280]	; (80064a4 <xPortStartScheduler+0x124>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d10a      	bne.n	80063a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	613b      	str	r3, [r7, #16]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063a6:	4b3e      	ldr	r3, [pc, #248]	; (80064a0 <xPortStartScheduler+0x120>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a3f      	ldr	r2, [pc, #252]	; (80064a8 <xPortStartScheduler+0x128>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10a      	bne.n	80063c6 <xPortStartScheduler+0x46>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	60fb      	str	r3, [r7, #12]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063c6:	4b39      	ldr	r3, [pc, #228]	; (80064ac <xPortStartScheduler+0x12c>)
 80063c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	22ff      	movs	r2, #255	; 0xff
 80063d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <xPortStartScheduler+0x130>)
 80063ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ee:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <xPortStartScheduler+0x134>)
 80063f0:	2207      	movs	r2, #7
 80063f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063f4:	e009      	b.n	800640a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063f6:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <xPortStartScheduler+0x134>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <xPortStartScheduler+0x134>)
 80063fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b80      	cmp	r3, #128	; 0x80
 8006414:	d0ef      	beq.n	80063f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006416:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <xPortStartScheduler+0x134>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1c3 0307 	rsb	r3, r3, #7
 800641e:	2b04      	cmp	r3, #4
 8006420:	d00a      	beq.n	8006438 <xPortStartScheduler+0xb8>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60bb      	str	r3, [r7, #8]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006438:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <xPortStartScheduler+0x134>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <xPortStartScheduler+0x134>)
 8006440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <xPortStartScheduler+0x134>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800644a:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <xPortStartScheduler+0x134>)
 800644c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006456:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <xPortStartScheduler+0x138>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <xPortStartScheduler+0x138>)
 800645c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <xPortStartScheduler+0x138>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a14      	ldr	r2, [pc, #80]	; (80064b8 <xPortStartScheduler+0x138>)
 8006468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800646c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800646e:	f000 f8dd 	bl	800662c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <xPortStartScheduler+0x13c>)
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006478:	f000 f8fc 	bl	8006674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <xPortStartScheduler+0x140>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0f      	ldr	r2, [pc, #60]	; (80064c0 <xPortStartScheduler+0x140>)
 8006482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006488:	f7ff ff66 	bl	8006358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800648c:	f7ff f854 	bl	8005538 <vTaskSwitchContext>
	prvTaskExitError();
 8006490:	f7ff ff20 	bl	80062d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	e000ed00 	.word	0xe000ed00
 80064a4:	410fc271 	.word	0x410fc271
 80064a8:	410fc270 	.word	0x410fc270
 80064ac:	e000e400 	.word	0xe000e400
 80064b0:	20001140 	.word	0x20001140
 80064b4:	20001144 	.word	0x20001144
 80064b8:	e000ed20 	.word	0xe000ed20
 80064bc:	20000014 	.word	0x20000014
 80064c0:	e000ef34 	.word	0xe000ef34

080064c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	607b      	str	r3, [r7, #4]
}
 80064dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <vPortEnterCritical+0x58>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	4a0d      	ldr	r2, [pc, #52]	; (800651c <vPortEnterCritical+0x58>)
 80064e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <vPortEnterCritical+0x58>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d10f      	bne.n	8006510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <vPortEnterCritical+0x5c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <vPortEnterCritical+0x4c>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	603b      	str	r3, [r7, #0]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <vPortEnterCritical+0x4a>
	}
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	20000014 	.word	0x20000014
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <vPortExitCritical+0x50>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <vPortExitCritical+0x24>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <vPortExitCritical+0x50>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3b01      	subs	r3, #1
 800654e:	4a09      	ldr	r2, [pc, #36]	; (8006574 <vPortExitCritical+0x50>)
 8006550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <vPortExitCritical+0x50>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <vPortExitCritical+0x42>
 800655a:	2300      	movs	r3, #0
 800655c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f383 8811 	msr	BASEPRI, r3
}
 8006564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000014 	.word	0x20000014
	...

08006580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006580:	f3ef 8009 	mrs	r0, PSP
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <pxCurrentTCBConst>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f01e 0f10 	tst.w	lr, #16
 8006590:	bf08      	it	eq
 8006592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	6010      	str	r0, [r2, #0]
 800659c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065a4:	f380 8811 	msr	BASEPRI, r0
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f7fe ffc2 	bl	8005538 <vTaskSwitchContext>
 80065b4:	f04f 0000 	mov.w	r0, #0
 80065b8:	f380 8811 	msr	BASEPRI, r0
 80065bc:	bc09      	pop	{r0, r3}
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	6808      	ldr	r0, [r1, #0]
 80065c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c6:	f01e 0f10 	tst.w	lr, #16
 80065ca:	bf08      	it	eq
 80065cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065d0:	f380 8809 	msr	PSP, r0
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst>:
 80065e0:	20000b14 	.word	0x20000b14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006602:	f7fe fedf 	bl	80053c4 <xTaskIncrementTick>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <xPortSysTickHandler+0x40>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	f383 8811 	msr	BASEPRI, r3
}
 800661e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <vPortSetupTimerInterrupt+0x34>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <vPortSetupTimerInterrupt+0x38>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <vPortSetupTimerInterrupt+0x3c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0a      	ldr	r2, [pc, #40]	; (800666c <vPortSetupTimerInterrupt+0x40>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	4a09      	ldr	r2, [pc, #36]	; (8006670 <vPortSetupTimerInterrupt+0x44>)
 800664a:	3b01      	subs	r3, #1
 800664c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800664e:	4b04      	ldr	r3, [pc, #16]	; (8006660 <vPortSetupTimerInterrupt+0x34>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	e000e010 	.word	0xe000e010
 8006664:	e000e018 	.word	0xe000e018
 8006668:	20000008 	.word	0x20000008
 800666c:	10624dd3 	.word	0x10624dd3
 8006670:	e000e014 	.word	0xe000e014

08006674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006684 <vPortEnableVFP+0x10>
 8006678:	6801      	ldr	r1, [r0, #0]
 800667a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800667e:	6001      	str	r1, [r0, #0]
 8006680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006682:	bf00      	nop
 8006684:	e000ed88 	.word	0xe000ed88

08006688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800668e:	f3ef 8305 	mrs	r3, IPSR
 8006692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d914      	bls.n	80066c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <vPortValidateInterruptPriority+0x70>)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066a4:	4b15      	ldr	r3, [pc, #84]	; (80066fc <vPortValidateInterruptPriority+0x74>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	7afa      	ldrb	r2, [r7, #11]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d20a      	bcs.n	80066c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	607b      	str	r3, [r7, #4]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066c4:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <vPortValidateInterruptPriority+0x78>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066cc:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <vPortValidateInterruptPriority+0x7c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d90a      	bls.n	80066ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	603b      	str	r3, [r7, #0]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <vPortValidateInterruptPriority+0x60>
	}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	e000e3f0 	.word	0xe000e3f0
 80066fc:	20001140 	.word	0x20001140
 8006700:	e000ed0c 	.word	0xe000ed0c
 8006704:	20001144 	.word	0x20001144

08006708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006714:	f7fe fd9a 	bl	800524c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006718:	4b5b      	ldr	r3, [pc, #364]	; (8006888 <pvPortMalloc+0x180>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006720:	f000 f920 	bl	8006964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006724:	4b59      	ldr	r3, [pc, #356]	; (800688c <pvPortMalloc+0x184>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 8093 	bne.w	8006858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01d      	beq.n	8006774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006738:	2208      	movs	r2, #8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	2b00      	cmp	r3, #0
 8006748:	d014      	beq.n	8006774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f023 0307 	bic.w	r3, r3, #7
 8006750:	3308      	adds	r3, #8
 8006752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <pvPortMalloc+0x6c>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	617b      	str	r3, [r7, #20]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d06e      	beq.n	8006858 <pvPortMalloc+0x150>
 800677a:	4b45      	ldr	r3, [pc, #276]	; (8006890 <pvPortMalloc+0x188>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d869      	bhi.n	8006858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006784:	4b43      	ldr	r3, [pc, #268]	; (8006894 <pvPortMalloc+0x18c>)
 8006786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006788:	4b42      	ldr	r3, [pc, #264]	; (8006894 <pvPortMalloc+0x18c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800678e:	e004      	b.n	800679a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d903      	bls.n	80067ac <pvPortMalloc+0xa4>
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f1      	bne.n	8006790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067ac:	4b36      	ldr	r3, [pc, #216]	; (8006888 <pvPortMalloc+0x180>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d050      	beq.n	8006858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2208      	movs	r2, #8
 80067bc:	4413      	add	r3, r2
 80067be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	2308      	movs	r3, #8
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d91f      	bls.n	8006818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <pvPortMalloc+0xf8>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	613b      	str	r3, [r7, #16]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	1ad2      	subs	r2, r2, r3
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006812:	69b8      	ldr	r0, [r7, #24]
 8006814:	f000 f908 	bl	8006a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006818:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <pvPortMalloc+0x188>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <pvPortMalloc+0x188>)
 8006824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006826:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <pvPortMalloc+0x188>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <pvPortMalloc+0x190>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d203      	bcs.n	800683a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006832:	4b17      	ldr	r3, [pc, #92]	; (8006890 <pvPortMalloc+0x188>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <pvPortMalloc+0x190>)
 8006838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	4b13      	ldr	r3, [pc, #76]	; (800688c <pvPortMalloc+0x184>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	431a      	orrs	r2, r3
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800684e:	4b13      	ldr	r3, [pc, #76]	; (800689c <pvPortMalloc+0x194>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	4a11      	ldr	r2, [pc, #68]	; (800689c <pvPortMalloc+0x194>)
 8006856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006858:	f7fe fd06 	bl	8005268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <pvPortMalloc+0x174>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	60fb      	str	r3, [r7, #12]
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <pvPortMalloc+0x172>
	return pvReturn;
 800687c:	69fb      	ldr	r3, [r7, #28]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3728      	adds	r7, #40	; 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20001d08 	.word	0x20001d08
 800688c:	20001d1c 	.word	0x20001d1c
 8006890:	20001d0c 	.word	0x20001d0c
 8006894:	20001d00 	.word	0x20001d00
 8006898:	20001d10 	.word	0x20001d10
 800689c:	20001d14 	.word	0x20001d14

080068a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04d      	beq.n	800694e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068b2:	2308      	movs	r3, #8
 80068b4:	425b      	negs	r3, r3
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4413      	add	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	4b24      	ldr	r3, [pc, #144]	; (8006958 <vPortFree+0xb8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <vPortFree+0x44>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60fb      	str	r3, [r7, #12]
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <vPortFree+0x62>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60bb      	str	r3, [r7, #8]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <vPortFree+0xb8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01e      	beq.n	800694e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d11a      	bne.n	800694e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	4b0e      	ldr	r3, [pc, #56]	; (8006958 <vPortFree+0xb8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	43db      	mvns	r3, r3
 8006922:	401a      	ands	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006928:	f7fe fc90 	bl	800524c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	4b0a      	ldr	r3, [pc, #40]	; (800695c <vPortFree+0xbc>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4413      	add	r3, r2
 8006936:	4a09      	ldr	r2, [pc, #36]	; (800695c <vPortFree+0xbc>)
 8006938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800693a:	6938      	ldr	r0, [r7, #16]
 800693c:	f000 f874 	bl	8006a28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006940:	4b07      	ldr	r3, [pc, #28]	; (8006960 <vPortFree+0xc0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	4a06      	ldr	r2, [pc, #24]	; (8006960 <vPortFree+0xc0>)
 8006948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800694a:	f7fe fc8d 	bl	8005268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800694e:	bf00      	nop
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20001d1c 	.word	0x20001d1c
 800695c:	20001d0c 	.word	0x20001d0c
 8006960:	20001d18 	.word	0x20001d18

08006964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800696a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800696e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006970:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <prvHeapInit+0xac>)
 8006972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00c      	beq.n	8006998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3307      	adds	r3, #7
 8006982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0307 	bic.w	r3, r3, #7
 800698a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <prvHeapInit+0xac>)
 8006994:	4413      	add	r3, r2
 8006996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800699c:	4a1d      	ldr	r2, [pc, #116]	; (8006a14 <prvHeapInit+0xb0>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069a2:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <prvHeapInit+0xb0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4413      	add	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069b0:	2208      	movs	r2, #8
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <prvHeapInit+0xb4>)
 80069c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <prvHeapInit+0xb4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <prvHeapInit+0xb4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvHeapInit+0xb4>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <prvHeapInit+0xb8>)
 80069f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <prvHeapInit+0xbc>)
 80069fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069fc:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <prvHeapInit+0xc0>)
 80069fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a02:	601a      	str	r2, [r3, #0]
}
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	20001148 	.word	0x20001148
 8006a14:	20001d00 	.word	0x20001d00
 8006a18:	20001d08 	.word	0x20001d08
 8006a1c:	20001d10 	.word	0x20001d10
 8006a20:	20001d0c 	.word	0x20001d0c
 8006a24:	20001d1c 	.word	0x20001d1c

08006a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a30:	4b28      	ldr	r3, [pc, #160]	; (8006ad4 <prvInsertBlockIntoFreeList+0xac>)
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e002      	b.n	8006a3c <prvInsertBlockIntoFreeList+0x14>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d8f7      	bhi.n	8006a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d108      	bne.n	8006a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	441a      	add	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d118      	bne.n	8006ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d00d      	beq.n	8006aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	441a      	add	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e008      	b.n	8006ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e003      	b.n	8006ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d002      	beq.n	8006ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20001d00 	.word	0x20001d00
 8006ad8:	20001d08 	.word	0x20001d08

08006adc <__libc_init_array>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	4d0d      	ldr	r5, [pc, #52]	; (8006b14 <__libc_init_array+0x38>)
 8006ae0:	4c0d      	ldr	r4, [pc, #52]	; (8006b18 <__libc_init_array+0x3c>)
 8006ae2:	1b64      	subs	r4, r4, r5
 8006ae4:	10a4      	asrs	r4, r4, #2
 8006ae6:	2600      	movs	r6, #0
 8006ae8:	42a6      	cmp	r6, r4
 8006aea:	d109      	bne.n	8006b00 <__libc_init_array+0x24>
 8006aec:	4d0b      	ldr	r5, [pc, #44]	; (8006b1c <__libc_init_array+0x40>)
 8006aee:	4c0c      	ldr	r4, [pc, #48]	; (8006b20 <__libc_init_array+0x44>)
 8006af0:	f000 f82e 	bl	8006b50 <_init>
 8006af4:	1b64      	subs	r4, r4, r5
 8006af6:	10a4      	asrs	r4, r4, #2
 8006af8:	2600      	movs	r6, #0
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	d105      	bne.n	8006b0a <__libc_init_array+0x2e>
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b04:	4798      	blx	r3
 8006b06:	3601      	adds	r6, #1
 8006b08:	e7ee      	b.n	8006ae8 <__libc_init_array+0xc>
 8006b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b0e:	4798      	blx	r3
 8006b10:	3601      	adds	r6, #1
 8006b12:	e7f2      	b.n	8006afa <__libc_init_array+0x1e>
 8006b14:	0800748c 	.word	0x0800748c
 8006b18:	0800748c 	.word	0x0800748c
 8006b1c:	0800748c 	.word	0x0800748c
 8006b20:	08007490 	.word	0x08007490

08006b24 <memcpy>:
 8006b24:	440a      	add	r2, r1
 8006b26:	4291      	cmp	r1, r2
 8006b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b2c:	d100      	bne.n	8006b30 <memcpy+0xc>
 8006b2e:	4770      	bx	lr
 8006b30:	b510      	push	{r4, lr}
 8006b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b3a:	4291      	cmp	r1, r2
 8006b3c:	d1f9      	bne.n	8006b32 <memcpy+0xe>
 8006b3e:	bd10      	pop	{r4, pc}

08006b40 <memset>:
 8006b40:	4402      	add	r2, r0
 8006b42:	4603      	mov	r3, r0
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d100      	bne.n	8006b4a <memset+0xa>
 8006b48:	4770      	bx	lr
 8006b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4e:	e7f9      	b.n	8006b44 <memset+0x4>

08006b50 <_init>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr

08006b5c <_fini>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	bf00      	nop
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr
